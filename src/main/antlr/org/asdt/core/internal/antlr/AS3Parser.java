// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g 2009-12-04 17:23:17

package org.asdt.core.internal.antlr;

import uk.co.badgersinfoil.metaas.impl.antlr.LinkedListTree;
import uk.co.badgersinfoil.metaas.impl.antlr.LinkedListTreeAdaptor;
import uk.co.badgersinfoil.metaas.impl.antlr.LinkedListToken;
import uk.co.badgersinfoil.metaas.impl.antlr.LinkedListTokenStream;
import uk.co.badgersinfoil.metaas.impl.antlr.LinkedListTokenSource;
import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;
import uk.co.badgersinfoil.metaas.impl.parser.E4XHelper;
import uk.co.badgersinfoil.metaas.impl.parser.RegexSimpleHelper;
import uk.co.badgersinfoil.metaas.impl.TokenBuilder;
import uk.co.badgersinfoil.metaas.impl.ASTUtils;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.debug.*;
import java.io.IOException;

import org.antlr.runtime.tree.*;

public class AS3Parser extends DebugParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMPILATION_UNIT", "TYPE_BLOCK", "METHOD_DEF", "VAR_DEF", "ANNOTATIONS", "ANNOTATION", "ANNOTATION_PARAMS", "MODIFIERS", "NAMESPACE_DEF", "ACCESSOR_ROLE", "CLASS_DEF", "INTERFACE_DEF", "PARAMS", "PARAM", "TYPE_SPEC", "BLOCK", "ELIST", "CONDITION", "ARGUMENTS", "EXPR_STMNT", "ENCPS_EXPR", "VAR_INIT", "METHOD_CALL", "PROPERTY_OR_IDENTIFIER", "PROPERTY_ACCESS", "TYPE_NAME", "ARRAY_ACC", "MULT", "UNARY_PLUS", "UNARY_MINUS", "POST_INC", "POST_DEC", "PRE_INC", "PRE_DEC", "ARRAY_LITERAL", "OBJECT_LITERAL", "OBJECT_FIELD", "FUNC_DEF", "FOR_INIT", "FOR_CONDITION", "FOR_ITERATOR", "FOR_EACH", "FOR_IN", "SWITCH_STATEMENT_LIST", "IDENTIFIER", "IDENTIFIER_STAR", "DEFAULT_XML_NAMESPACE", "XML_LITERAL", "REGEXP_LITERAL", "E4X_FILTER", "E4X_ATTRI_PROPERTY", "E4X_ATTRI_STAR", "E4X_ATTRI_EXPR", "SUPER_CONSTRUCTOR_INVOCATION", "GENERIC_TYPE", "VIRTUAL_PLACEHOLDER", "PACKAGE", "LCURLY", "RCURLY", "SEMI", "IMPORT", "CLASS", "INTERFACE", "EXTENDS", "COMMA", "IMPLEMENTS", "INCLUDE_DIRECTIVE", "STRING_LITERAL", "FUNCTION", "GET", "SET", "NAMESPACE", "USE", "VAR", "CONST", "ASSIGN", "LPAREN", "RPAREN", "REST", "IF", "ELSE", "THROW", "TRY", "CATCH", "FINALLY", "RETURN", "CONTINUE", "BREAK", "SWITCH", "CASE", "COLON", "DEFAULT", "FOR", "EACH", "IN", "WHILE", "DO", "WITH", "XML", "DOT", "LT", "GT", "VOID", "STAR", "DBL_COLON", "IDENT", "PUBLIC", "PRIVATE", "PROTECTED", "INTERNAL", "LBRACK", "RBRACK", "STATIC", "FINAL", "OVERRIDE", "DYNAMIC", "STAR_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "SL_ASSIGN", "SR_ASSIGN", "BSR_ASSIGN", "BAND_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "LAND_ASSIGN", "LOR_ASSIGN", "QUESTION", "LOR", "LAND", "BOR", "BXOR", "BAND", "STRICT_EQUAL", "STRICT_NOT_EQUAL", "NOT_EQUAL", "EQUAL", "LE", "GE", "IS", "AS", "INSTANCEOF", "SL", "SR", "BSR", "PLUS", "MINUS", "DIV", "MOD", "INC", "DEC", "DELETE", "TYPEOF", "LNOT", "BNOT", "E4X_DESC", "E4X_ATTRI", "UNDEFINED", "SUPER", "TRUE", "FALSE", "NULL", "HEX_LITERAL", "DECIMAL_LITERAL", "OCTAL_LITERAL", "FLOAT_LITERAL", "NEW", "UNICODE_IDENTIFIER_START", "UNICODE_IDENTIFIER_PART", "ESC", "HEX_DIGIT", "EXPONENT", "WS", "NL", "BOM", "SL_COMMENT", "ML_COMMENT", "OCT_DIGIT", "CTRLCHAR_ESC", "UNICODE_ESC", "OCTAL_ESC", "'include'", "'enumerable'", "'explicit'", "'intrinsic'", "'or'", "'and'"
    };
    public static final int FUNCTION=72;
    public static final int PACKAGE=60;
    public static final int STAR=107;
    public static final int CTRLCHAR_ESC=184;
    public static final int MOD=154;
    public static final int REST=82;
    public static final int CONST=78;
    public static final int DO=100;
    public static final int PARAM=17;
    public static final int CONDITION=21;
    public static final int BSR=150;
    public static final int EOF=-1;
    public static final int PROPERTY_OR_IDENTIFIER=27;
    public static final int UNARY_PLUS=32;
    public static final int RPAREN=81;
    public static final int FINAL=117;
    public static final int INC=155;
    public static final int LNOT=159;
    public static final int IMPORT=64;
    public static final int STRING_LITERAL=71;
    public static final int ANNOTATIONS=8;
    public static final int BSR_ASSIGN=127;
    public static final int OBJECT_FIELD=40;
    public static final int NOT_EQUAL=141;
    public static final int COMPILATION_UNIT=4;
    public static final int SUPER_CONSTRUCTOR_INVOCATION=57;
    public static final int RETURN=89;
    public static final int GET=73;
    public static final int VAR_INIT=25;
    public static final int PRE_DEC=37;
    public static final int RBRACK=115;
    public static final int GE=144;
    public static final int STATIC=116;
    public static final int ELSE=84;
    public static final int MINUS_ASSIGN=124;
    public static final int LAND_ASSIGN=131;
    public static final int PRE_INC=36;
    public static final int LCURLY=61;
    public static final int GENERIC_TYPE=58;
    public static final int UNARY_MINUS=33;
    public static final int FUNC_DEF=41;
    public static final int DEFAULT_XML_NAMESPACE=50;
    public static final int UNDEFINED=163;
    public static final int WS=178;
    public static final int TYPEOF=158;
    public static final int DBL_COLON=108;
    public static final int SL_COMMENT=181;
    public static final int GT=105;
    public static final int BNOT=160;
    public static final int XML=102;
    public static final int LAND=135;
    public static final int DECIMAL_LITERAL=169;
    public static final int FOR_INIT=42;
    public static final int DYNAMIC=119;
    public static final int PROTECTED=112;
    public static final int LBRACK=114;
    public static final int TYPE_BLOCK=5;
    public static final int METHOD_DEF=6;
    public static final int ANNOTATION=9;
    public static final int STRICT_NOT_EQUAL=140;
    public static final int POST_DEC=35;
    public static final int LPAREN=80;
    public static final int AS=146;
    public static final int OCT_DIGIT=183;
    public static final int IDENTIFIER_STAR=49;
    public static final int IMPLEMENTS=69;
    public static final int E4X_FILTER=53;
    public static final int IDENT=109;
    public static final int BXOR=137;
    public static final int PLUS=151;
    public static final int E4X_ATTRI_PROPERTY=54;
    public static final int UNICODE_IDENTIFIER_PART=174;
    public static final int PARAMS=16;
    public static final int EXPR_STMNT=23;
    public static final int STRICT_EQUAL=139;
    public static final int HEX_DIGIT=176;
    public static final int SET=74;
    public static final int INSTANCEOF=147;
    public static final int MINUS=152;
    public static final int SEMI=63;
    public static final int STAR_ASSIGN=120;
    public static final int COLON=94;
    public static final int BAND_ASSIGN=128;
    public static final int SL=148;
    public static final int BLOCK=19;
    public static final int RCURLY=62;
    public static final int SR=149;
    public static final int PLUS_ASSIGN=123;
    public static final int INCLUDE_DIRECTIVE=70;
    public static final int INTERFACE=66;
    public static final int ACCESSOR_ROLE=13;
    public static final int ANNOTATION_PARAMS=10;
    public static final int POST_INC=34;
    public static final int DIV=153;
    public static final int PUBLIC=110;
    public static final int FOR_ITERATOR=44;
    public static final int VAR_DEF=7;
    public static final int E4X_ATTRI=162;
    public static final int LOR=134;
    public static final int INTERNAL=113;
    public static final int LT=104;
    public static final int EXPONENT=177;
    public static final int WHILE=99;
    public static final int MOD_ASSIGN=122;
    public static final int OCTAL_ESC=186;
    public static final int CASE=93;
    public static final int NEW=172;
    public static final int ARRAY_ACC=30;
    public static final int FOR_CONDITION=43;
    public static final int ARRAY_LITERAL=38;
    public static final int DIV_ASSIGN=121;
    public static final int BREAK=91;
    public static final int SL_ASSIGN=125;
    public static final int VIRTUAL_PLACEHOLDER=59;
    public static final int ELIST=20;
    public static final int E4X_DESC=161;
    public static final int VAR=77;
    public static final int VOID=106;
    public static final int EACH=97;
    public static final int SUPER=164;
    public static final int NL=179;
    public static final int E4X_ATTRI_EXPR=56;
    public static final int ARGUMENTS=22;
    public static final int INTERFACE_DEF=15;
    public static final int PRIVATE=111;
    public static final int SWITCH=92;
    public static final int NULL=167;
    public static final int DELETE=157;
    public static final int MULT=31;
    public static final int METHOD_CALL=26;
    public static final int TRY=86;
    public static final int NAMESPACE=75;
    public static final int SWITCH_STATEMENT_LIST=47;
    public static final int FOR_IN=46;
    public static final int PROPERTY_ACCESS=28;
    public static final int USE=76;
    public static final int CATCH=87;
    public static final int FALSE=166;
    public static final int THROW=85;
    public static final int NAMESPACE_DEF=12;
    public static final int DEC=156;
    public static final int CLASS=65;
    public static final int BXOR_ASSIGN=129;
    public static final int ESC=175;
    public static final int TYPE_SPEC=18;
    public static final int FOR=96;
    public static final int OBJECT_LITERAL=39;
    public static final int IF=83;
    public static final int MODIFIERS=11;
    public static final int ML_COMMENT=182;
    public static final int UNICODE_IDENTIFIER_START=173;
    public static final int IN=98;
    public static final int BOR_ASSIGN=130;
    public static final int CONTINUE=90;
    public static final int BOM=180;
    public static final int COMMA=68;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int IS=145;
    public static final int IDENTIFIER=48;
    public static final int T__190=190;
    public static final int BOR=136;
    public static final int EQUAL=142;
    public static final int TYPE_NAME=29;
    public static final int HEX_LITERAL=168;
    public static final int DOT=103;
    public static final int WITH=101;
    public static final int T__188=188;
    public static final int ENCPS_EXPR=24;
    public static final int T__187=187;
    public static final int T__189=189;
    public static final int UNICODE_ESC=185;
    public static final int DEFAULT=95;
    public static final int OCTAL_LITERAL=170;
    public static final int BAND=138;
    public static final int TRUE=165;
    public static final int FLOAT_LITERAL=171;
    public static final int QUESTION=133;
    public static final int FINALLY=88;
    public static final int REGEXP_LITERAL=52;
    public static final int OVERRIDE=118;
    public static final int ASSIGN=79;
    public static final int XML_LITERAL=51;
    public static final int EXTENDS=67;
    public static final int FOR_EACH=45;
    public static final int CLASS_DEF=14;
    public static final int SR_ASSIGN=126;
    public static final int E4X_ATTRI_STAR=55;
    public static final int LE=143;
    public static final int LOR_ASSIGN=132;

    // delegates
    // delegators

    protected static class InOperator_scope {
        boolean allowed;
    }
    protected Stack InOperator_stack = new Stack();

    public static final String[] ruleNames = new String[] {
        "invalidRule", "logicalOrOperator", "fieldName", "endOfFile", "fullNewSubexpression", 
        "conditionalExpression", "importDefinition", "xmlLiteral", "finallyBlock", 
        "expressionQualifiedIdentifier", "arguments", "packageBlock", "whileStatement", 
        "regexpLiteral", "identifierStar", "switchBlock", "ifStatement", 
        "condition", "classDefinition", "compilationUnit", "primaryExpression", 
        "expressionStatement", "as2Type", "classExtendsClause", "annotation", 
        "shiftExpression", "withStatement", "postfixExpression", "identifier", 
        "variableInitializer", "synpred4_AS3", "as2InterfaceDefinition", 
        "modifier", "annotationParam", "accessorRole", "logicalAndOperator", 
        "annotations", "functionCommon", "block", "arrayLiteral", "packageDecl", 
        "simpleQualifiedIdentifier", "continueStatement", "parameterDefault", 
        "forInClause", "forStatement", "methodDefinition", "returnStatement", 
        "bitwiseOrExpression", "brackets", "packageBlockEntry", "expression", 
        "tryStatement", "interfaceDefinition", "synpred7_AS3", "parameterRestDeclaration", 
        "forCond", "defaultStatement", "ident", "literalField", "parameterDeclarationList", 
        "traditionalForClause", "synpred1_AS3", "additiveOperator", "elementList", 
        "newExpression", "bitwiseXorExpression", "breakStatement", "propOrIdent", 
        "propertyIdentifier", "synpred5_AS3", "basicParameterDeclaration", 
        "fieldList", "statement", "functionExpression", "catchBlock", "throwStatement", 
        "variableDeclarator", "typeExpression", "unaryExpressionNotPlusMinus", 
        "semi", "annotationParamList", "relationalOperator", "blockEntry", 
        "varOrConst", "nonAttributeQualifiedIdentifier", "switchStatementList", 
        "unaryExpression", "namespaceDefinition", "multiplicativeOperator", 
        "as2CompilationUnit", "shiftOperator", "logicalAndExpression", "as2ClassDefinition", 
        "synpred3_AS3", "forIter", "conditionalSubExpression", "interfaceExtendsClause", 
        "switchStatement", "qualifier", "synpred2_AS3", "constant", "additiveExpression", 
        "number", "forInit", "namespaceName", "caseStatement", "qualifiedIdentifier", 
        "relationalExpression", "propertyOperator", "element", "assignmentExpression", 
        "forInClauseDecl", "forInClauseTail", "doWhileStatement", "reservedNamespace", 
        "optionalAccessorRole", "objectLiteral", "typeBlock", "as2IncludeDirective", 
        "multiplicativeExpression", "equalityOperator", "elseClause", "includeDirective", 
        "synpred8_AS3", "equalityExpression", "declaration", "declarationStatement", 
        "logicalOrExpression", "bitwiseAndExpression", "qualifiedIdent", 
        "parameterDeclaration", "typeIdent", "as3CompilationUnit", "defaultXMLNamespaceStatement", 
        "nonemptyElementList", "modifiers", "expressionList", "useNamespaceDirective", 
        "typeBlockEntry", "e4xAttributeIdentifier", "assignmentOperator", 
        "implementsClause", "variableDefinition", "functionSignature", "forEachStatement", 
        "synpred6_AS3", "encapsulatedExpression", "declarationTail"
    };
     
        public int ruleLevel = 0;
        public int getRuleLevel() { return ruleLevel; }
        public void incRuleLevel() { ruleLevel++; }
        public void decRuleLevel() { ruleLevel--; }
        public AS3Parser(TokenStream input) {
            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
        }
        public AS3Parser(TokenStream input, int port, RecognizerSharedState state) {
            super(input, state);
            DebugEventSocketProxy proxy =
                new DebugEventSocketProxy(this,port,adaptor);
            setDebugListener(proxy);
            setTokenStream(new DebugTokenStream(input,proxy));
            try {
                proxy.handshake();
            }
            catch (IOException ioe) {
                reportError(ioe);
            }
            TreeAdaptor adap = new CommonTreeAdaptor();
            setTreeAdaptor(adap);
            proxy.setTreeAdaptor(adap);
        }
    public AS3Parser(TokenStream input, DebugEventListener dbg) {
        super(input, dbg);

         
        TreeAdaptor adap = new CommonTreeAdaptor();
        setTreeAdaptor(adap);

    }
    protected boolean evalPredicate(boolean result, String predicate) {
        dbg.semanticPredicate(result, predicate);
        return result;
    }

    protected DebugTreeAdaptor adaptor;
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = new DebugTreeAdaptor(dbg,adaptor);

    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }


    public String[] getTokenNames() { return AS3Parser.tokenNames; }
    public String getGrammarFileName() { return "/Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g"; }



    	public static final int CHANNEL_PLACEHOLDER = 999;

    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}
    	
    	private AS3Lexer lexer;
    	private CharStream cs;

    	public void setInput(AS3Lexer lexer, CharStream cs) {
    		this.lexer = lexer;
    		this.cs = cs;
    	}

    	/**
    	 * Handle 'island grammar' for embeded XML-literal elements.
    	 */
    	private LinkedListTree parseXMLLiteral() throws RecognitionException {
    		return E4XHelper.parseXMLLiteral(lexer, cs, (LinkedListTokenStream)input);
    	}

    	/**
    	 * Handle 'island grammar' for skipping over embeded
    	 * regular-expression-literal values.
    	 */
    	private LinkedListTree parseRegexpLiteral(LinkedListToken startMarker) throws RecognitionException {
    		return RegexSimpleHelper.parseRegexpLiteral(startMarker, lexer, cs, (LinkedListTokenStream)input);
    	}

    	private boolean virtualSemi() {
    		LinkedListToken tok = ((LinkedListToken)input.LT(1)).getPrev();
    		while (tok.getType() == WS) {
    			tok = tok.getPrev();
    		}
    		return tok.getType() == NL;
    	}
    	
    	/**
    	 * Adds a placeholder token into the stream, corresponding to the
    	 * location of the given AST node, if the given AST node has no
    	 * children.  Only use this function with 'imaginary' nodes, not with
    	 * nodes that already correspond to a concrete Token.
    	 */
    	private LinkedListToken placeholder(LinkedListTree imaginary) {
    		if (imaginary.getChildCount() > 0) {
    			// one of this node's children will presumably have
    			// some tokens of its own, so there's no need for us
    			// to synthesize one,
    			return imaginary.getStartToken();
    		}

    		// Since this this AST node is 'imaginary', it does not directly
    		// correspond to any Token in the input stream.  Also, since
    		// it has no children, there is nothing anchoring it to a
    		// position in the token-stream, which will make it difficult to
    		// know where new tokens should be inserted if the calling app
    		// adds a child to this node.  We therefore insert a virtual
    		// token at this point in the stream just so that the AST node
    		// can remember its own location.

    		LinkedListToken tok = (LinkedListToken)input.LT(1);
        		LinkedListToken placeholder = TokenBuilder.newPlaceholder(imaginary);
    		tok.beforeInsert(placeholder);
    		return placeholder;
    	}

    	private void demarcate(LinkedListTree parent) {
    		parent.setStartToken(parent.getFirstChild().getStartToken());
    		parent.setStopToken(parent.getLastChild().getStopToken());
    	}


    public static class compilationUnit_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:172:1: compilationUnit : ( as2CompilationUnit | as3CompilationUnit ) -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? ) ;
    public final AS3Parser.compilationUnit_return compilationUnit() throws RecognitionException {
        AS3Parser.compilationUnit_return retval = new AS3Parser.compilationUnit_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.as2CompilationUnit_return as2CompilationUnit1 = null;

        AS3Parser.as3CompilationUnit_return as3CompilationUnit2 = null;


        RewriteRuleSubtreeStream stream_as3CompilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule as3CompilationUnit");
        RewriteRuleSubtreeStream stream_as2CompilationUnit=new RewriteRuleSubtreeStream(adaptor,"rule as2CompilationUnit");
        try { dbg.enterRule(getGrammarFileName(), "compilationUnit");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(172, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:176:2: ( ( as2CompilationUnit | as3CompilationUnit ) -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:176:4: ( as2CompilationUnit | as3CompilationUnit )
            {
            dbg.location(176,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:176:4: ( as2CompilationUnit | as3CompilationUnit )
            int alt1=2;
            try { dbg.enterSubRule(1);
            try { dbg.enterDecision(1);

            try {
                isCyclicDecision = true;
                alt1 = dfa1.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(1);}

            switch (alt1) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:176:6: as2CompilationUnit
                    {
                    dbg.location(176,6);
                    pushFollow(FOLLOW_as2CompilationUnit_in_compilationUnit294);
                    as2CompilationUnit1=as2CompilationUnit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as2CompilationUnit.add(as2CompilationUnit1.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:177:5: as3CompilationUnit
                    {
                    dbg.location(177,5);
                    pushFollow(FOLLOW_as3CompilationUnit_in_compilationUnit300);
                    as3CompilationUnit2=as3CompilationUnit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as3CompilationUnit.add(as3CompilationUnit2.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(1);}



            // AST REWRITE
            // elements: as2CompilationUnit, as3CompilationUnit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 178:5: -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? )
            {
                dbg.location(178,8);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:178:8: ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(178,10);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);

                dbg.location(178,27);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:178:27: ( as2CompilationUnit )?
                if ( stream_as2CompilationUnit.hasNext() ) {
                    dbg.location(178,27);
                    adaptor.addChild(root_1, stream_as2CompilationUnit.nextTree());

                }
                stream_as2CompilationUnit.reset();
                dbg.location(178,47);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:178:47: ( as3CompilationUnit )?
                if ( stream_as3CompilationUnit.hasNext() ) {
                    dbg.location(178,47);
                    adaptor.addChild(root_1, stream_as3CompilationUnit.nextTree());

                }
                stream_as3CompilationUnit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(179, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "compilationUnit");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class as2CompilationUnit_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as2CompilationUnit"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:181:1: as2CompilationUnit : ( importDefinition )* as2Type ;
    public final AS3Parser.as2CompilationUnit_return as2CompilationUnit() throws RecognitionException {
        AS3Parser.as2CompilationUnit_return retval = new AS3Parser.as2CompilationUnit_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.importDefinition_return importDefinition3 = null;

        AS3Parser.as2Type_return as2Type4 = null;



        try { dbg.enterRule(getGrammarFileName(), "as2CompilationUnit");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(181, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:182:2: ( ( importDefinition )* as2Type )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:182:4: ( importDefinition )* as2Type
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(182,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:182:4: ( importDefinition )*
            try { dbg.enterSubRule(2);

            loop2:
            do {
                int alt2=2;
                try { dbg.enterDecision(2);

                try {
                    isCyclicDecision = true;
                    alt2 = dfa2.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(2);}

                switch (alt2) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:182:4: importDefinition
            	    {
            	    dbg.location(182,4);
            	    pushFollow(FOLLOW_importDefinition_in_as2CompilationUnit327);
            	    importDefinition3=importDefinition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDefinition3.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);
            } finally {dbg.exitSubRule(2);}

            dbg.location(183,3);
            pushFollow(FOLLOW_as2Type_in_as2CompilationUnit332);
            as2Type4=as2Type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, as2Type4.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(184, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as2CompilationUnit");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as2CompilationUnit"

    public static class as2Type_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as2Type"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:186:1: as2Type : annos= annotations mods= modifiers ( as2ClassDefinition[$annos.tree,$mods.tree] | as2InterfaceDefinition[$annos.tree,$mods.tree] ) ;
    public final AS3Parser.as2Type_return as2Type() throws RecognitionException {
        AS3Parser.as2Type_return retval = new AS3Parser.as2Type_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.annotations_return annos = null;

        AS3Parser.modifiers_return mods = null;

        AS3Parser.as2ClassDefinition_return as2ClassDefinition5 = null;

        AS3Parser.as2InterfaceDefinition_return as2InterfaceDefinition6 = null;



        try { dbg.enterRule(getGrammarFileName(), "as2Type");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(186, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:187:2: (annos= annotations mods= modifiers ( as2ClassDefinition[$annos.tree,$mods.tree] | as2InterfaceDefinition[$annos.tree,$mods.tree] ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:187:4: annos= annotations mods= modifiers ( as2ClassDefinition[$annos.tree,$mods.tree] | as2InterfaceDefinition[$annos.tree,$mods.tree] )
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(187,9);
            pushFollow(FOLLOW_annotations_in_as2Type345);
            annos=annotations();

            state._fsp--;
            if (state.failed) return retval;
            dbg.location(187,23);
            if ( state.backtracking==0 ) {
               placeholder((annos!=null?((LinkedListTree)annos.tree):null)); 
            }
            dbg.location(188,7);
            pushFollow(FOLLOW_modifiers_in_as2Type354);
            mods=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            dbg.location(189,2);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:189:2: ( as2ClassDefinition[$annos.tree,$mods.tree] | as2InterfaceDefinition[$annos.tree,$mods.tree] )
            int alt3=2;
            try { dbg.enterSubRule(3);
            try { dbg.enterDecision(3);

            int LA3_0 = input.LA(1);

            if ( (LA3_0==CLASS) ) {
                alt3=1;
            }
            else if ( (LA3_0==INTERFACE) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(3);}

            switch (alt3) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:189:4: as2ClassDefinition[$annos.tree,$mods.tree]
                    {
                    dbg.location(189,4);
                    pushFollow(FOLLOW_as2ClassDefinition_in_as2Type360);
                    as2ClassDefinition5=as2ClassDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as2ClassDefinition5.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:190:4: as2InterfaceDefinition[$annos.tree,$mods.tree]
                    {
                    dbg.location(190,4);
                    pushFollow(FOLLOW_as2InterfaceDefinition_in_as2Type366);
                    as2InterfaceDefinition6=as2InterfaceDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as2InterfaceDefinition6.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(3);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(192, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as2Type");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as2Type"

    public static class as3CompilationUnit_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as3CompilationUnit"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:194:1: as3CompilationUnit : packageDecl ( packageBlockEntry )* EOF ;
    public final AS3Parser.as3CompilationUnit_return as3CompilationUnit() throws RecognitionException {
        AS3Parser.as3CompilationUnit_return retval = new AS3Parser.as3CompilationUnit_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token EOF9=null;
        AS3Parser.packageDecl_return packageDecl7 = null;

        AS3Parser.packageBlockEntry_return packageBlockEntry8 = null;


        LinkedListTree EOF9_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "as3CompilationUnit");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(194, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:195:2: ( packageDecl ( packageBlockEntry )* EOF )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:195:4: packageDecl ( packageBlockEntry )* EOF
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(195,4);
            pushFollow(FOLLOW_packageDecl_in_as3CompilationUnit381);
            packageDecl7=packageDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, packageDecl7.getTree());
            dbg.location(196,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:196:3: ( packageBlockEntry )*
            try { dbg.enterSubRule(4);

            loop4:
            do {
                int alt4=2;
                try { dbg.enterDecision(4);

                try {
                    isCyclicDecision = true;
                    alt4 = dfa4.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(4);}

                switch (alt4) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:196:3: packageBlockEntry
            	    {
            	    dbg.location(196,3);
            	    pushFollow(FOLLOW_packageBlockEntry_in_as3CompilationUnit385);
            	    packageBlockEntry8=packageBlockEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageBlockEntry8.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);
            } finally {dbg.exitSubRule(4);}

            dbg.location(197,6);
            EOF9=(Token)match(input,EOF,FOLLOW_EOF_in_as3CompilationUnit390); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(198, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as3CompilationUnit");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as3CompilationUnit"

    public static class packageDecl_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDecl"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:200:1: packageDecl : PACKAGE ( identifier )? packageBlock ;
    public final AS3Parser.packageDecl_return packageDecl() throws RecognitionException {
        AS3Parser.packageDecl_return retval = new AS3Parser.packageDecl_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token PACKAGE10=null;
        AS3Parser.identifier_return identifier11 = null;

        AS3Parser.packageBlock_return packageBlock12 = null;


        LinkedListTree PACKAGE10_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "packageDecl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(200, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:201:2: ( PACKAGE ( identifier )? packageBlock )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:201:4: PACKAGE ( identifier )? packageBlock
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(201,11);
            PACKAGE10=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDecl402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PACKAGE10_tree = (LinkedListTree)adaptor.create(PACKAGE10);
            root_0 = (LinkedListTree)adaptor.becomeRoot(PACKAGE10_tree, root_0);
            }
            dbg.location(201,13);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:201:13: ( identifier )?
            int alt5=2;
            try { dbg.enterSubRule(5);
            try { dbg.enterDecision(5);

            try {
                isCyclicDecision = true;
                alt5 = dfa5.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(5);}

            switch (alt5) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:201:13: identifier
                    {
                    dbg.location(201,13);
                    pushFollow(FOLLOW_identifier_in_packageDecl405);
                    identifier11=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier11.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(5);}

            dbg.location(202,3);
            pushFollow(FOLLOW_packageBlock_in_packageDecl410);
            packageBlock12=packageBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, packageBlock12.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(203, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "packageDecl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "packageDecl"

    public static class packageBlock_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageBlock"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:205:1: packageBlock : LCURLY ( packageBlockEntry )* RCURLY -> ^( BLOCK ( packageBlockEntry )* ) ;
    public final AS3Parser.packageBlock_return packageBlock() throws RecognitionException {
        AS3Parser.packageBlock_return retval = new AS3Parser.packageBlock_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LCURLY13=null;
        Token RCURLY15=null;
        AS3Parser.packageBlockEntry_return packageBlockEntry14 = null;


        LinkedListTree LCURLY13_tree=null;
        LinkedListTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_packageBlockEntry=new RewriteRuleSubtreeStream(adaptor,"rule packageBlockEntry");
        try { dbg.enterRule(getGrammarFileName(), "packageBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(205, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:206:2: ( LCURLY ( packageBlockEntry )* RCURLY -> ^( BLOCK ( packageBlockEntry )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:206:4: LCURLY ( packageBlockEntry )* RCURLY
            {
            dbg.location(206,4);
            LCURLY13=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_packageBlock421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY13);

            dbg.location(207,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:207:3: ( packageBlockEntry )*
            try { dbg.enterSubRule(6);

            loop6:
            do {
                int alt6=2;
                try { dbg.enterDecision(6);

                try {
                    isCyclicDecision = true;
                    alt6 = dfa6.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(6);}

                switch (alt6) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:207:3: packageBlockEntry
            	    {
            	    dbg.location(207,3);
            	    pushFollow(FOLLOW_packageBlockEntry_in_packageBlock425);
            	    packageBlockEntry14=packageBlockEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_packageBlockEntry.add(packageBlockEntry14.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);
            } finally {dbg.exitSubRule(6);}

            dbg.location(208,3);
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_packageBlock430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);



            // AST REWRITE
            // elements: packageBlockEntry
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 209:3: -> ^( BLOCK ( packageBlockEntry )* )
            {
                dbg.location(209,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:209:6: ^( BLOCK ( packageBlockEntry )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(209,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                dbg.location(209,14);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:209:14: ( packageBlockEntry )*
                while ( stream_packageBlockEntry.hasNext() ) {
                    dbg.location(209,14);
                    adaptor.addChild(root_1, stream_packageBlockEntry.nextTree());

                }
                stream_packageBlockEntry.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(210, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "packageBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "packageBlock"

    public static class packageBlockEntry_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageBlockEntry"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:212:1: packageBlockEntry : ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI ) ;
    public final AS3Parser.packageBlockEntry_return packageBlockEntry() throws RecognitionException {
        AS3Parser.packageBlockEntry_return retval = new AS3Parser.packageBlockEntry_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token SEMI23=null;
        AS3Parser.annotations_return annos = null;

        AS3Parser.modifiers_return mods = null;

        AS3Parser.importDefinition_return importDefinition16 = null;

        AS3Parser.classDefinition_return classDefinition17 = null;

        AS3Parser.interfaceDefinition_return interfaceDefinition18 = null;

        AS3Parser.variableDefinition_return variableDefinition19 = null;

        AS3Parser.methodDefinition_return methodDefinition20 = null;

        AS3Parser.namespaceDefinition_return namespaceDefinition21 = null;

        AS3Parser.useNamespaceDirective_return useNamespaceDirective22 = null;


        LinkedListTree SEMI23_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "packageBlockEntry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(212, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:213:2: ( ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:213:4: ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI )
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(213,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:213:4: ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI )
            int alt8=3;
            try { dbg.enterSubRule(8);
            try { dbg.enterDecision(8);

            try {
                isCyclicDecision = true;
                alt8 = dfa8.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(8);}

            switch (alt8) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:213:6: importDefinition
                    {
                    dbg.location(213,6);
                    pushFollow(FOLLOW_importDefinition_in_packageBlockEntry454);
                    importDefinition16=importDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDefinition16.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:215:5: annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective )
                    {
                    dbg.location(215,10);
                    pushFollow(FOLLOW_annotations_in_packageBlockEntry463);
                    annos=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    dbg.location(215,24);
                    if ( state.backtracking==0 ) {
                       retval.start=placeholder((annos!=null?((LinkedListTree)annos.tree):null)); 
                    }
                    dbg.location(216,8);
                    pushFollow(FOLLOW_modifiers_in_packageBlockEntry473);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    dbg.location(216,20);
                    if ( state.backtracking==0 ) {
                       placeholder((mods!=null?((LinkedListTree)mods.tree):null)); 
                    }
                    dbg.location(217,4);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:217:4: ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective )
                    int alt7=6;
                    try { dbg.enterSubRule(7);
                    try { dbg.enterDecision(7);

                    switch ( input.LA(1) ) {
                    case CLASS:
                        {
                        alt7=1;
                        }
                        break;
                    case INTERFACE:
                        {
                        alt7=2;
                        }
                        break;
                    case VAR:
                    case CONST:
                        {
                        alt7=3;
                        }
                        break;
                    case FUNCTION:
                        {
                        alt7=4;
                        }
                        break;
                    case NAMESPACE:
                        {
                        alt7=5;
                        }
                        break;
                    case USE:
                        {
                        alt7=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 7, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(7);}

                    switch (alt7) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:217:6: classDefinition[$annos.tree,$mods.tree]
                            {
                            dbg.location(217,6);
                            pushFollow(FOLLOW_classDefinition_in_packageBlockEntry483);
                            classDefinition17=classDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition17.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:218:6: interfaceDefinition[$annos.tree,$mods.tree]
                            {
                            dbg.location(218,6);
                            pushFollow(FOLLOW_interfaceDefinition_in_packageBlockEntry491);
                            interfaceDefinition18=interfaceDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDefinition18.getTree());

                            }
                            break;
                        case 3 :
                            dbg.enterAlt(3);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:219:6: variableDefinition[$annos.tree,$mods.tree]
                            {
                            dbg.location(219,6);
                            pushFollow(FOLLOW_variableDefinition_in_packageBlockEntry499);
                            variableDefinition19=variableDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDefinition19.getTree());

                            }
                            break;
                        case 4 :
                            dbg.enterAlt(4);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:220:6: methodDefinition[$annos.tree,$mods.tree]
                            {
                            dbg.location(220,6);
                            pushFollow(FOLLOW_methodDefinition_in_packageBlockEntry507);
                            methodDefinition20=methodDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDefinition20.getTree());

                            }
                            break;
                        case 5 :
                            dbg.enterAlt(5);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:221:6: namespaceDefinition[$annos.tree,$mods.tree]
                            {
                            dbg.location(221,6);
                            pushFollow(FOLLOW_namespaceDefinition_in_packageBlockEntry515);
                            namespaceDefinition21=namespaceDefinition((annos!=null?((LinkedListTree)annos.tree):null), (mods!=null?((LinkedListTree)mods.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceDefinition21.getTree());

                            }
                            break;
                        case 6 :
                            dbg.enterAlt(6);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:222:6: useNamespaceDirective
                            {
                            dbg.location(222,6);
                            pushFollow(FOLLOW_useNamespaceDirective_in_packageBlockEntry523);
                            useNamespaceDirective22=useNamespaceDirective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, useNamespaceDirective22.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(7);}


                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:224:5: SEMI
                    {
                    dbg.location(224,9);
                    SEMI23=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageBlockEntry534); if (state.failed) return retval;

                    }
                    break;

            }
            } finally {dbg.exitSubRule(8);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(227, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "packageBlockEntry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "packageBlockEntry"

    public static class endOfFile_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "endOfFile"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:229:1: endOfFile : EOF ;
    public final AS3Parser.endOfFile_return endOfFile() throws RecognitionException {
        AS3Parser.endOfFile_return retval = new AS3Parser.endOfFile_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token EOF24=null;

        LinkedListTree EOF24_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "endOfFile");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(229, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:230:2: ( EOF )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:230:4: EOF
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(230,7);
            EOF24=(Token)match(input,EOF,FOLLOW_EOF_in_endOfFile551); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(231, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "endOfFile");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "endOfFile"

    public static class importDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:233:1: importDefinition : IMPORT identifierStar semi ;
    public final AS3Parser.importDefinition_return importDefinition() throws RecognitionException {
        AS3Parser.importDefinition_return retval = new AS3Parser.importDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IMPORT25=null;
        AS3Parser.identifierStar_return identifierStar26 = null;

        AS3Parser.semi_return semi27 = null;


        LinkedListTree IMPORT25_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "importDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(233, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:234:2: ( IMPORT identifierStar semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:234:4: IMPORT identifierStar semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(234,10);
            IMPORT25=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDefinition563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT25_tree = (LinkedListTree)adaptor.create(IMPORT25);
            root_0 = (LinkedListTree)adaptor.becomeRoot(IMPORT25_tree, root_0);
            }
            dbg.location(234,12);
            pushFollow(FOLLOW_identifierStar_in_importDefinition566);
            identifierStar26=identifierStar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierStar26.getTree());
            dbg.location(234,27);
            pushFollow(FOLLOW_semi_in_importDefinition568);
            semi27=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi27.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(235, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "importDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "importDefinition"

    public static class semi_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "semi"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:237:1: semi : SEMI ;
    public final AS3Parser.semi_return semi() throws RecognitionException {
        AS3Parser.semi_return retval = new AS3Parser.semi_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token SEMI28=null;

        LinkedListTree SEMI28_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "semi");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(237, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:238:2: ( SEMI )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:238:4: SEMI
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(238,8);
            SEMI28=(Token)match(input,SEMI,FOLLOW_SEMI_in_semi579); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(240, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "semi");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "semi"

    public static class classDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:242:1: classDefinition[LinkedListTree annos, LinkedListTree mods] : CLASS ident classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock ) ;
    public final AS3Parser.classDefinition_return classDefinition(LinkedListTree annos, LinkedListTree mods) throws RecognitionException {
        AS3Parser.classDefinition_return retval = new AS3Parser.classDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CLASS29=null;
        AS3Parser.ident_return ident30 = null;

        AS3Parser.classExtendsClause_return classExtendsClause31 = null;

        AS3Parser.implementsClause_return implementsClause32 = null;

        AS3Parser.typeBlock_return typeBlock33 = null;


        LinkedListTree CLASS29_tree=null;
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_typeBlock=new RewriteRuleSubtreeStream(adaptor,"rule typeBlock");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        try { dbg.enterRule(getGrammarFileName(), "classDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(242, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:243:2: ( CLASS ident classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:243:4: CLASS ident classExtendsClause implementsClause typeBlock
            {
            dbg.location(243,4);
            CLASS29=(Token)match(input,CLASS,FOLLOW_CLASS_in_classDefinition594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS29);

            dbg.location(243,10);
            pushFollow(FOLLOW_ident_in_classDefinition596);
            ident30=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident30.getTree());
            dbg.location(244,3);
            pushFollow(FOLLOW_classExtendsClause_in_classDefinition600);
            classExtendsClause31=classExtendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause31.getTree());
            dbg.location(245,3);
            pushFollow(FOLLOW_implementsClause_in_classDefinition604);
            implementsClause32=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause32.getTree());
            dbg.location(246,3);
            pushFollow(FOLLOW_typeBlock_in_classDefinition608);
            typeBlock33=typeBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeBlock.add(typeBlock33.getTree());


            // AST REWRITE
            // elements: typeBlock, implementsClause, ident, classExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 247:3: -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock )
            {
                dbg.location(247,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:247:6: ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(247,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(CLASS_DEF, "CLASS_DEF"), root_1);

                dbg.location(247,18);
                adaptor.addChild(root_1, annos);
                dbg.location(247,27);
                adaptor.addChild(root_1, mods);
                dbg.location(247,35);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(247,41);
                adaptor.addChild(root_1, stream_classExtendsClause.nextTree());
                dbg.location(247,60);
                adaptor.addChild(root_1, stream_implementsClause.nextTree());
                dbg.location(247,77);
                adaptor.addChild(root_1, stream_typeBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(248, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "classDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "classDefinition"

    public static class as2ClassDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as2ClassDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:250:1: as2ClassDefinition[LinkedListTree annos, LinkedListTree mods] : CLASS identifier classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) ;
    public final AS3Parser.as2ClassDefinition_return as2ClassDefinition(LinkedListTree annos, LinkedListTree mods) throws RecognitionException {
        AS3Parser.as2ClassDefinition_return retval = new AS3Parser.as2ClassDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CLASS34=null;
        AS3Parser.identifier_return identifier35 = null;

        AS3Parser.classExtendsClause_return classExtendsClause36 = null;

        AS3Parser.implementsClause_return implementsClause37 = null;

        AS3Parser.typeBlock_return typeBlock38 = null;


        LinkedListTree CLASS34_tree=null;
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_classExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_typeBlock=new RewriteRuleSubtreeStream(adaptor,"rule typeBlock");
        RewriteRuleSubtreeStream stream_implementsClause=new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try { dbg.enterRule(getGrammarFileName(), "as2ClassDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(250, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:251:2: ( CLASS identifier classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:251:4: CLASS identifier classExtendsClause implementsClause typeBlock
            {
            dbg.location(251,4);
            CLASS34=(Token)match(input,CLASS,FOLLOW_CLASS_in_as2ClassDefinition640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS34);

            dbg.location(251,10);
            pushFollow(FOLLOW_identifier_in_as2ClassDefinition642);
            identifier35=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier35.getTree());
            dbg.location(252,3);
            pushFollow(FOLLOW_classExtendsClause_in_as2ClassDefinition646);
            classExtendsClause36=classExtendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classExtendsClause.add(classExtendsClause36.getTree());
            dbg.location(253,3);
            pushFollow(FOLLOW_implementsClause_in_as2ClassDefinition650);
            implementsClause37=implementsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementsClause.add(implementsClause37.getTree());
            dbg.location(254,3);
            pushFollow(FOLLOW_typeBlock_in_as2ClassDefinition654);
            typeBlock38=typeBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeBlock.add(typeBlock38.getTree());


            // AST REWRITE
            // elements: identifier, implementsClause, typeBlock, classExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 255:3: -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
            {
                dbg.location(255,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:255:6: ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(255,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(CLASS_DEF, "CLASS_DEF"), root_1);

                dbg.location(255,18);
                adaptor.addChild(root_1, annos);
                dbg.location(255,27);
                adaptor.addChild(root_1, mods);
                dbg.location(255,35);
                adaptor.addChild(root_1, stream_identifier.nextTree());
                dbg.location(255,46);
                adaptor.addChild(root_1, stream_classExtendsClause.nextTree());
                dbg.location(255,65);
                adaptor.addChild(root_1, stream_implementsClause.nextTree());
                dbg.location(255,82);
                adaptor.addChild(root_1, stream_typeBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(256, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as2ClassDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as2ClassDefinition"

    public static class interfaceDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:258:1: interfaceDefinition[LinkedListTree annos, Tree mods] : INTERFACE ident interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock ) ;
    public final AS3Parser.interfaceDefinition_return interfaceDefinition(LinkedListTree annos, Tree mods) throws RecognitionException {
        AS3Parser.interfaceDefinition_return retval = new AS3Parser.interfaceDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token INTERFACE39=null;
        AS3Parser.ident_return ident40 = null;

        AS3Parser.interfaceExtendsClause_return interfaceExtendsClause41 = null;

        AS3Parser.typeBlock_return typeBlock42 = null;


        LinkedListTree INTERFACE39_tree=null;
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeBlock=new RewriteRuleSubtreeStream(adaptor,"rule typeBlock");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        try { dbg.enterRule(getGrammarFileName(), "interfaceDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(258, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:259:2: ( INTERFACE ident interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:259:4: INTERFACE ident interfaceExtendsClause typeBlock
            {
            dbg.location(259,4);
            if ( state.backtracking==0 ) {
               retval.start = annos.getStartToken(); 
            }
            dbg.location(260,3);
            INTERFACE39=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceDefinition690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE39);

            dbg.location(260,13);
            pushFollow(FOLLOW_ident_in_interfaceDefinition692);
            ident40=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident40.getTree());
            dbg.location(261,3);
            pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceDefinition696);
            interfaceExtendsClause41=interfaceExtendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause41.getTree());
            dbg.location(262,3);
            pushFollow(FOLLOW_typeBlock_in_interfaceDefinition700);
            typeBlock42=typeBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeBlock.add(typeBlock42.getTree());


            // AST REWRITE
            // elements: interfaceExtendsClause, ident, typeBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 263:3: -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock )
            {
                dbg.location(263,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:263:6: ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(263,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);

                dbg.location(263,22);
                adaptor.addChild(root_1, annos);
                dbg.location(263,31);
                adaptor.addChild(root_1, mods);
                dbg.location(263,39);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(263,45);
                adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());
                dbg.location(263,68);
                adaptor.addChild(root_1, stream_typeBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(264, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "interfaceDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "interfaceDefinition"

    public static class as2InterfaceDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as2InterfaceDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:266:1: as2InterfaceDefinition[LinkedListTree annos, Tree mods] : INTERFACE identifier interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock ) ;
    public final AS3Parser.as2InterfaceDefinition_return as2InterfaceDefinition(LinkedListTree annos, Tree mods) throws RecognitionException {
        AS3Parser.as2InterfaceDefinition_return retval = new AS3Parser.as2InterfaceDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token INTERFACE43=null;
        AS3Parser.identifier_return identifier44 = null;

        AS3Parser.interfaceExtendsClause_return interfaceExtendsClause45 = null;

        AS3Parser.typeBlock_return typeBlock46 = null;


        LinkedListTree INTERFACE43_tree=null;
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_typeBlock=new RewriteRuleSubtreeStream(adaptor,"rule typeBlock");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try { dbg.enterRule(getGrammarFileName(), "as2InterfaceDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(266, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:267:2: ( INTERFACE identifier interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:267:4: INTERFACE identifier interfaceExtendsClause typeBlock
            {
            dbg.location(267,4);
            INTERFACE43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_as2InterfaceDefinition730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(INTERFACE43);

            dbg.location(267,14);
            pushFollow(FOLLOW_identifier_in_as2InterfaceDefinition732);
            identifier44=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier44.getTree());
            dbg.location(268,3);
            pushFollow(FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition736);
            interfaceExtendsClause45=interfaceExtendsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceExtendsClause.add(interfaceExtendsClause45.getTree());
            dbg.location(269,3);
            pushFollow(FOLLOW_typeBlock_in_as2InterfaceDefinition740);
            typeBlock46=typeBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeBlock.add(typeBlock46.getTree());


            // AST REWRITE
            // elements: identifier, typeBlock, interfaceExtendsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 270:3: -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock )
            {
                dbg.location(270,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:270:6: ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(270,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);

                dbg.location(270,22);
                adaptor.addChild(root_1, annos);
                dbg.location(270,31);
                adaptor.addChild(root_1, mods);
                dbg.location(270,39);
                adaptor.addChild(root_1, stream_identifier.nextTree());
                dbg.location(270,50);
                adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());
                dbg.location(270,73);
                adaptor.addChild(root_1, stream_typeBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(271, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as2InterfaceDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as2InterfaceDefinition"

    public static class classExtendsClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classExtendsClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:273:1: classExtendsClause : ( EXTENDS identifier )? ;
    public final AS3Parser.classExtendsClause_return classExtendsClause() throws RecognitionException {
        AS3Parser.classExtendsClause_return retval = new AS3Parser.classExtendsClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token EXTENDS47=null;
        AS3Parser.identifier_return identifier48 = null;


        LinkedListTree EXTENDS47_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "classExtendsClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(273, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:274:2: ( ( EXTENDS identifier )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:274:4: ( EXTENDS identifier )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(274,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:274:4: ( EXTENDS identifier )?
            int alt9=2;
            try { dbg.enterSubRule(9);
            try { dbg.enterDecision(9);

            int LA9_0 = input.LA(1);

            if ( (LA9_0==EXTENDS) ) {
                alt9=1;
            }
            } finally {dbg.exitDecision(9);}

            switch (alt9) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:274:5: EXTENDS identifier
                    {
                    dbg.location(274,12);
                    EXTENDS47=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDS47_tree = (LinkedListTree)adaptor.create(EXTENDS47);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(EXTENDS47_tree, root_0);
                    }
                    dbg.location(274,14);
                    pushFollow(FOLLOW_identifier_in_classExtendsClause773);
                    identifier48=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier48.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(9);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(275, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "classExtendsClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "classExtendsClause"

    public static class interfaceExtendsClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceExtendsClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:276:1: interfaceExtendsClause : ( EXTENDS identifier ( COMMA identifier )* )? ;
    public final AS3Parser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        AS3Parser.interfaceExtendsClause_return retval = new AS3Parser.interfaceExtendsClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token EXTENDS49=null;
        Token COMMA51=null;
        AS3Parser.identifier_return identifier50 = null;

        AS3Parser.identifier_return identifier52 = null;


        LinkedListTree EXTENDS49_tree=null;
        LinkedListTree COMMA51_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "interfaceExtendsClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(276, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:2: ( ( EXTENDS identifier ( COMMA identifier )* )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:4: ( EXTENDS identifier ( COMMA identifier )* )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(277,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:4: ( EXTENDS identifier ( COMMA identifier )* )?
            int alt11=2;
            try { dbg.enterSubRule(11);
            try { dbg.enterDecision(11);

            int LA11_0 = input.LA(1);

            if ( (LA11_0==EXTENDS) ) {
                alt11=1;
            }
            } finally {dbg.exitDecision(11);}

            switch (alt11) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:5: EXTENDS identifier ( COMMA identifier )*
                    {
                    dbg.location(277,12);
                    EXTENDS49=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDS49_tree = (LinkedListTree)adaptor.create(EXTENDS49);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(EXTENDS49_tree, root_0);
                    }
                    dbg.location(277,14);
                    pushFollow(FOLLOW_identifier_in_interfaceExtendsClause789);
                    identifier50=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier50.getTree());
                    dbg.location(277,25);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:25: ( COMMA identifier )*
                    try { dbg.enterSubRule(10);

                    loop10:
                    do {
                        int alt10=2;
                        try { dbg.enterDecision(10);

                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==COMMA) ) {
                            alt10=1;
                        }


                        } finally {dbg.exitDecision(10);}

                        switch (alt10) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:277:27: COMMA identifier
                    	    {
                    	    dbg.location(277,32);
                    	    COMMA51=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceExtendsClause793); if (state.failed) return retval;
                    	    dbg.location(277,34);
                    	    pushFollow(FOLLOW_identifier_in_interfaceExtendsClause796);
                    	    identifier52=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier52.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(10);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(11);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(278, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "interfaceExtendsClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

    public static class implementsClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implementsClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:279:1: implementsClause : ( IMPLEMENTS identifier ( COMMA identifier )* )? ;
    public final AS3Parser.implementsClause_return implementsClause() throws RecognitionException {
        AS3Parser.implementsClause_return retval = new AS3Parser.implementsClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IMPLEMENTS53=null;
        Token COMMA55=null;
        AS3Parser.identifier_return identifier54 = null;

        AS3Parser.identifier_return identifier56 = null;


        LinkedListTree IMPLEMENTS53_tree=null;
        LinkedListTree COMMA55_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "implementsClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(279, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:2: ( ( IMPLEMENTS identifier ( COMMA identifier )* )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:4: ( IMPLEMENTS identifier ( COMMA identifier )* )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(280,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:4: ( IMPLEMENTS identifier ( COMMA identifier )* )?
            int alt13=2;
            try { dbg.enterSubRule(13);
            try { dbg.enterDecision(13);

            int LA13_0 = input.LA(1);

            if ( (LA13_0==IMPLEMENTS) ) {
                alt13=1;
            }
            } finally {dbg.exitDecision(13);}

            switch (alt13) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:5: IMPLEMENTS identifier ( COMMA identifier )*
                    {
                    dbg.location(280,15);
                    IMPLEMENTS53=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPLEMENTS53_tree = (LinkedListTree)adaptor.create(IMPLEMENTS53);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(IMPLEMENTS53_tree, root_0);
                    }
                    dbg.location(280,17);
                    pushFollow(FOLLOW_identifier_in_implementsClause814);
                    identifier54=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier54.getTree());
                    dbg.location(280,28);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:28: ( COMMA identifier )*
                    try { dbg.enterSubRule(12);

                    loop12:
                    do {
                        int alt12=2;
                        try { dbg.enterDecision(12);

                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMA) ) {
                            alt12=1;
                        }


                        } finally {dbg.exitDecision(12);}

                        switch (alt12) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:280:30: COMMA identifier
                    	    {
                    	    dbg.location(280,35);
                    	    COMMA55=(Token)match(input,COMMA,FOLLOW_COMMA_in_implementsClause818); if (state.failed) return retval;
                    	    dbg.location(280,37);
                    	    pushFollow(FOLLOW_identifier_in_implementsClause821);
                    	    identifier56=identifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier56.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(12);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(13);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(281, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "implementsClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "implementsClause"

    public static class typeBlock_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBlock"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:282:1: typeBlock : LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) ;
    public final AS3Parser.typeBlock_return typeBlock() throws RecognitionException {
        AS3Parser.typeBlock_return retval = new AS3Parser.typeBlock_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LCURLY57=null;
        Token RCURLY59=null;
        AS3Parser.typeBlockEntry_return typeBlockEntry58 = null;


        LinkedListTree LCURLY57_tree=null;
        LinkedListTree RCURLY59_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_typeBlockEntry=new RewriteRuleSubtreeStream(adaptor,"rule typeBlockEntry");
        try { dbg.enterRule(getGrammarFileName(), "typeBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(282, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:283:2: ( LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:283:4: LCURLY ( typeBlockEntry )* RCURLY
            {
            dbg.location(283,4);
            LCURLY57=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_typeBlock835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY57);

            dbg.location(284,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:284:3: ( typeBlockEntry )*
            try { dbg.enterSubRule(14);

            loop14:
            do {
                int alt14=2;
                try { dbg.enterDecision(14);

                try {
                    isCyclicDecision = true;
                    alt14 = dfa14.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(14);}

                switch (alt14) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:284:3: typeBlockEntry
            	    {
            	    dbg.location(284,3);
            	    pushFollow(FOLLOW_typeBlockEntry_in_typeBlock839);
            	    typeBlockEntry58=typeBlockEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeBlockEntry.add(typeBlockEntry58.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);
            } finally {dbg.exitSubRule(14);}

            dbg.location(285,3);
            RCURLY59=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_typeBlock844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY59);



            // AST REWRITE
            // elements: typeBlockEntry
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 286:3: -> ^( TYPE_BLOCK ( typeBlockEntry )* )
            {
                dbg.location(286,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:286:6: ^( TYPE_BLOCK ( typeBlockEntry )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(286,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(TYPE_BLOCK, "TYPE_BLOCK"), root_1);

                dbg.location(286,19);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:286:19: ( typeBlockEntry )*
                while ( stream_typeBlockEntry.hasNext() ) {
                    dbg.location(286,19);
                    adaptor.addChild(root_1, stream_typeBlockEntry.nextTree());

                }
                stream_typeBlockEntry.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(287, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "typeBlock"

    public static class typeBlockEntry_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBlockEntry"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:289:1: typeBlockEntry : (a= annotations m= modifiers ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] ) | importDefinition | as2IncludeDirective );
    public final AS3Parser.typeBlockEntry_return typeBlockEntry() throws RecognitionException {
        AS3Parser.typeBlockEntry_return retval = new AS3Parser.typeBlockEntry_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.annotations_return a = null;

        AS3Parser.modifiers_return m = null;

        AS3Parser.variableDefinition_return variableDefinition60 = null;

        AS3Parser.methodDefinition_return methodDefinition61 = null;

        AS3Parser.importDefinition_return importDefinition62 = null;

        AS3Parser.as2IncludeDirective_return as2IncludeDirective63 = null;



        try { dbg.enterRule(getGrammarFileName(), "typeBlockEntry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(289, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:290:2: (a= annotations m= modifiers ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] ) | importDefinition | as2IncludeDirective )
            int alt16=3;
            try { dbg.enterDecision(16);

            try {
                isCyclicDecision = true;
                alt16 = dfa16.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(16);}

            switch (alt16) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:291:17: a= annotations m= modifiers ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] )
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(291,18);
                    pushFollow(FOLLOW_annotations_in_typeBlockEntry870);
                    a=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    dbg.location(291,32);
                    if ( state.backtracking==0 ) {
                       retval.start = placeholder((a!=null?((LinkedListTree)a.tree):null)); 
                    }
                    dbg.location(292,4);
                    pushFollow(FOLLOW_modifiers_in_typeBlockEntry879);
                    m=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    dbg.location(292,16);
                    if ( state.backtracking==0 ) {
                       placeholder((m!=null?((LinkedListTree)m.tree):null)); 
                    }
                    dbg.location(293,3);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:293:3: ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] )
                    int alt15=2;
                    try { dbg.enterSubRule(15);
                    try { dbg.enterDecision(15);

                    int LA15_0 = input.LA(1);

                    if ( ((LA15_0>=VAR && LA15_0<=CONST)) ) {
                        alt15=1;
                    }
                    else if ( (LA15_0==FUNCTION) ) {
                        alt15=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 15, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(15);}

                    switch (alt15) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:293:5: variableDefinition[$a.tree,$m.tree]
                            {
                            dbg.location(293,5);
                            pushFollow(FOLLOW_variableDefinition_in_typeBlockEntry888);
                            variableDefinition60=variableDefinition((a!=null?((LinkedListTree)a.tree):null), (m!=null?((LinkedListTree)m.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDefinition60.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:294:5: methodDefinition[$a.tree,$m.tree]
                            {
                            dbg.location(294,5);
                            pushFollow(FOLLOW_methodDefinition_in_typeBlockEntry895);
                            methodDefinition61=methodDefinition((a!=null?((LinkedListTree)a.tree):null), (m!=null?((LinkedListTree)m.tree):null));

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDefinition61.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(15);}


                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:296:4: importDefinition
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(296,4);
                    pushFollow(FOLLOW_importDefinition_in_typeBlockEntry905);
                    importDefinition62=importDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDefinition62.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:297:4: as2IncludeDirective
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(297,4);
                    pushFollow(FOLLOW_as2IncludeDirective_in_typeBlockEntry910);
                    as2IncludeDirective63=as2IncludeDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as2IncludeDirective63.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(299, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeBlockEntry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "typeBlockEntry"

    public static class as2IncludeDirective_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "as2IncludeDirective"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:301:1: as2IncludeDirective : INCLUDE_DIRECTIVE STRING_LITERAL ;
    public final AS3Parser.as2IncludeDirective_return as2IncludeDirective() throws RecognitionException {
        AS3Parser.as2IncludeDirective_return retval = new AS3Parser.as2IncludeDirective_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token INCLUDE_DIRECTIVE64=null;
        Token STRING_LITERAL65=null;

        LinkedListTree INCLUDE_DIRECTIVE64_tree=null;
        LinkedListTree STRING_LITERAL65_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "as2IncludeDirective");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(301, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:302:2: ( INCLUDE_DIRECTIVE STRING_LITERAL )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:302:4: INCLUDE_DIRECTIVE STRING_LITERAL
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(302,4);
            INCLUDE_DIRECTIVE64=(Token)match(input,INCLUDE_DIRECTIVE,FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INCLUDE_DIRECTIVE64_tree = (LinkedListTree)adaptor.create(INCLUDE_DIRECTIVE64);
            adaptor.addChild(root_0, INCLUDE_DIRECTIVE64_tree);
            }
            dbg.location(303,3);
            STRING_LITERAL65=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_as2IncludeDirective926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING_LITERAL65_tree = (LinkedListTree)adaptor.create(STRING_LITERAL65);
            adaptor.addChild(root_0, STRING_LITERAL65_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(304, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "as2IncludeDirective");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "as2IncludeDirective"

    public static class includeDirective_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "includeDirective"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:306:1: includeDirective : 'include' STRING_LITERAL semi ;
    public final AS3Parser.includeDirective_return includeDirective() throws RecognitionException {
        AS3Parser.includeDirective_return retval = new AS3Parser.includeDirective_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token string_literal66=null;
        Token STRING_LITERAL67=null;
        AS3Parser.semi_return semi68 = null;


        LinkedListTree string_literal66_tree=null;
        LinkedListTree STRING_LITERAL67_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "includeDirective");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(306, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:307:2: ( 'include' STRING_LITERAL semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:307:4: 'include' STRING_LITERAL semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(307,4);
            string_literal66=(Token)match(input,187,FOLLOW_187_in_includeDirective937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal66_tree = (LinkedListTree)adaptor.create(string_literal66);
            adaptor.addChild(root_0, string_literal66_tree);
            }
            dbg.location(308,3);
            STRING_LITERAL67=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_includeDirective941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STRING_LITERAL67_tree = (LinkedListTree)adaptor.create(STRING_LITERAL67);
            adaptor.addChild(root_0, STRING_LITERAL67_tree);
            }
            dbg.location(309,3);
            pushFollow(FOLLOW_semi_in_includeDirective945);
            semi68=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi68.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(310, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "includeDirective");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "includeDirective"

    public static class methodDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:313:1: methodDefinition[LinkedListTree annos, Tree mods] : FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi ) -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? ) ;
    public final AS3Parser.methodDefinition_return methodDefinition(LinkedListTree annos, Tree mods) throws RecognitionException {
        AS3Parser.methodDefinition_return retval = new AS3Parser.methodDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token FUNCTION69=null;
        AS3Parser.optionalAccessorRole_return r = null;

        AS3Parser.ident_return ident70 = null;

        AS3Parser.parameterDeclarationList_return parameterDeclarationList71 = null;

        AS3Parser.typeExpression_return typeExpression72 = null;

        AS3Parser.block_return block73 = null;

        AS3Parser.semi_return semi74 = null;


        LinkedListTree FUNCTION69_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeExpression=new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        RewriteRuleSubtreeStream stream_optionalAccessorRole=new RewriteRuleSubtreeStream(adaptor,"rule optionalAccessorRole");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
        try { dbg.enterRule(getGrammarFileName(), "methodDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(313, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:314:2: ( FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi ) -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:314:4: FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi )
            {
            dbg.location(314,4);
            if ( state.backtracking==0 ) {
               retval.start = annos.getStartToken(); 
            }
            dbg.location(315,3);
            FUNCTION69=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDefinition962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION69);

            dbg.location(316,4);
            pushFollow(FOLLOW_optionalAccessorRole_in_methodDefinition968);
            r=optionalAccessorRole();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_optionalAccessorRole.add(r.getTree());
            dbg.location(316,27);
            if ( state.backtracking==0 ) {
               placeholder((r!=null?((LinkedListTree)r.tree):null)); 
            }
            dbg.location(317,3);
            pushFollow(FOLLOW_ident_in_methodDefinition975);
            ident70=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident70.getTree());
            dbg.location(318,3);
            pushFollow(FOLLOW_parameterDeclarationList_in_methodDefinition979);
            parameterDeclarationList71=parameterDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameterDeclarationList.add(parameterDeclarationList71.getTree());
            dbg.location(319,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:319:3: ( typeExpression )?
            int alt17=2;
            try { dbg.enterSubRule(17);
            try { dbg.enterDecision(17);

            int LA17_0 = input.LA(1);

            if ( (LA17_0==COLON) ) {
                alt17=1;
            }
            } finally {dbg.exitDecision(17);}

            switch (alt17) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:319:3: typeExpression
                    {
                    dbg.location(319,3);
                    pushFollow(FOLLOW_typeExpression_in_methodDefinition983);
                    typeExpression72=typeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeExpression.add(typeExpression72.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(17);}

            dbg.location(320,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:320:3: ( block | semi )
            int alt18=2;
            try { dbg.enterSubRule(18);
            try { dbg.enterDecision(18);

            int LA18_0 = input.LA(1);

            if ( (LA18_0==LCURLY) ) {
                alt18=1;
            }
            else if ( (LA18_0==SEMI) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(18);}

            switch (alt18) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:320:4: block
                    {
                    dbg.location(320,4);
                    pushFollow(FOLLOW_block_in_methodDefinition989);
                    block73=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block73.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:320:10: semi
                    {
                    dbg.location(320,10);
                    pushFollow(FOLLOW_semi_in_methodDefinition991);
                    semi74=semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semi.add(semi74.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(18);}



            // AST REWRITE
            // elements: parameterDeclarationList, ident, block, optionalAccessorRole, typeExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 321:3: -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? )
            {
                dbg.location(321,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:321:6: ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(321,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(METHOD_DEF, "METHOD_DEF"), root_1);

                dbg.location(321,19);
                adaptor.addChild(root_1, annos);
                dbg.location(321,28);
                adaptor.addChild(root_1, mods);
                dbg.location(322,19);
                adaptor.addChild(root_1, stream_optionalAccessorRole.nextTree());
                dbg.location(322,40);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(323,5);
                adaptor.addChild(root_1, stream_parameterDeclarationList.nextTree());
                dbg.location(324,5);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:324:5: ( typeExpression )?
                if ( stream_typeExpression.hasNext() ) {
                    dbg.location(324,5);
                    adaptor.addChild(root_1, stream_typeExpression.nextTree());

                }
                stream_typeExpression.reset();
                dbg.location(325,5);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:325:5: ( block )?
                if ( stream_block.hasNext() ) {
                    dbg.location(325,5);
                    adaptor.addChild(root_1, stream_block.nextTree());

                }
                stream_block.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(326, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "methodDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "methodDefinition"

    public static class optionalAccessorRole_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalAccessorRole"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:328:1: optionalAccessorRole : ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) ;
    public final AS3Parser.optionalAccessorRole_return optionalAccessorRole() throws RecognitionException {
        AS3Parser.optionalAccessorRole_return retval = new AS3Parser.optionalAccessorRole_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.accessorRole_return accessorRole75 = null;


        RewriteRuleSubtreeStream stream_accessorRole=new RewriteRuleSubtreeStream(adaptor,"rule accessorRole");
        try { dbg.enterRule(getGrammarFileName(), "optionalAccessorRole");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(328, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:329:2: ( ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:329:4: ( accessorRole )?
            {
            dbg.location(329,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:329:4: ( accessorRole )?
            int alt19=2;
            try { dbg.enterSubRule(19);
            try { dbg.enterDecision(19);

            try {
                isCyclicDecision = true;
                alt19 = dfa19.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(19);}

            switch (alt19) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:329:4: accessorRole
                    {
                    dbg.location(329,4);
                    pushFollow(FOLLOW_accessorRole_in_optionalAccessorRole1057);
                    accessorRole75=accessorRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessorRole.add(accessorRole75.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(19);}



            // AST REWRITE
            // elements: accessorRole
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 330:3: -> ^( ACCESSOR_ROLE ( accessorRole )? )
            {
                dbg.location(330,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:330:6: ^( ACCESSOR_ROLE ( accessorRole )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(330,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ACCESSOR_ROLE, "ACCESSOR_ROLE"), root_1);

                dbg.location(330,22);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:330:22: ( accessorRole )?
                if ( stream_accessorRole.hasNext() ) {
                    dbg.location(330,22);
                    adaptor.addChild(root_1, stream_accessorRole.nextTree());

                }
                stream_accessorRole.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(331, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "optionalAccessorRole");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "optionalAccessorRole"

    public static class accessorRole_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessorRole"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:333:1: accessorRole : ( GET | SET );
    public final AS3Parser.accessorRole_return accessorRole() throws RecognitionException {
        AS3Parser.accessorRole_return retval = new AS3Parser.accessorRole_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set76=null;

        LinkedListTree set76_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "accessorRole");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(333, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:334:2: ( GET | SET )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(334,2);
            set76=(Token)input.LT(1);
            if ( (input.LA(1)>=GET && input.LA(1)<=SET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set76));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(335, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "accessorRole");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "accessorRole"

    public static class namespaceDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespaceDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:337:1: namespaceDefinition[LinkedListTree annos, Tree mods] : NAMESPACE ident -> ^( NAMESPACE_DEF NAMESPACE ident ) ;
    public final AS3Parser.namespaceDefinition_return namespaceDefinition(LinkedListTree annos, Tree mods) throws RecognitionException {
        AS3Parser.namespaceDefinition_return retval = new AS3Parser.namespaceDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token NAMESPACE77=null;
        AS3Parser.ident_return ident78 = null;


        LinkedListTree NAMESPACE77_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try { dbg.enterRule(getGrammarFileName(), "namespaceDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(337, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:338:2: ( NAMESPACE ident -> ^( NAMESPACE_DEF NAMESPACE ident ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:338:4: NAMESPACE ident
            {
            dbg.location(338,4);
            NAMESPACE77=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDefinition1096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE77);

            dbg.location(338,14);
            pushFollow(FOLLOW_ident_in_namespaceDefinition1098);
            ident78=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident78.getTree());


            // AST REWRITE
            // elements: NAMESPACE, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 339:3: -> ^( NAMESPACE_DEF NAMESPACE ident )
            {
                dbg.location(339,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:339:6: ^( NAMESPACE_DEF NAMESPACE ident )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(339,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(NAMESPACE_DEF, "NAMESPACE_DEF"), root_1);

                dbg.location(339,22);
                adaptor.addChild(root_1, annos);
                dbg.location(339,31);
                adaptor.addChild(root_1, mods);
                dbg.location(339,39);
                adaptor.addChild(root_1, stream_NAMESPACE.nextNode());
                dbg.location(339,49);
                adaptor.addChild(root_1, stream_ident.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(340, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaceDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "namespaceDefinition"

    public static class useNamespaceDirective_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "useNamespaceDirective"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:342:1: useNamespaceDirective : USE NAMESPACE ident semi ;
    public final AS3Parser.useNamespaceDirective_return useNamespaceDirective() throws RecognitionException {
        AS3Parser.useNamespaceDirective_return retval = new AS3Parser.useNamespaceDirective_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token USE79=null;
        Token NAMESPACE80=null;
        AS3Parser.ident_return ident81 = null;

        AS3Parser.semi_return semi82 = null;


        LinkedListTree USE79_tree=null;
        LinkedListTree NAMESPACE80_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "useNamespaceDirective");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(342, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:343:2: ( USE NAMESPACE ident semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:343:4: USE NAMESPACE ident semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(343,4);
            USE79=(Token)match(input,USE,FOLLOW_USE_in_useNamespaceDirective1125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USE79_tree = (LinkedListTree)adaptor.create(USE79);
            adaptor.addChild(root_0, USE79_tree);
            }
            dbg.location(343,8);
            NAMESPACE80=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_useNamespaceDirective1127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE80_tree = (LinkedListTree)adaptor.create(NAMESPACE80);
            adaptor.addChild(root_0, NAMESPACE80_tree);
            }
            dbg.location(343,18);
            pushFollow(FOLLOW_ident_in_useNamespaceDirective1129);
            ident81=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident81.getTree());
            dbg.location(343,24);
            pushFollow(FOLLOW_semi_in_useNamespaceDirective1131);
            semi82=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi82.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(344, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "useNamespaceDirective");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "useNamespaceDirective"

    public static class variableDefinition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDefinition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:346:1: variableDefinition[LinkedListTree annos, Tree mods] : decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) ;
    public final AS3Parser.variableDefinition_return variableDefinition(LinkedListTree annos, Tree mods) throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.variableDefinition_return retval = new AS3Parser.variableDefinition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA84=null;
        AS3Parser.varOrConst_return decl = null;

        AS3Parser.variableDeclarator_return variableDeclarator83 = null;

        AS3Parser.variableDeclarator_return variableDeclarator85 = null;

        AS3Parser.semi_return semi86 = null;


        LinkedListTree COMMA84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_varOrConst=new RewriteRuleSubtreeStream(adaptor,"rule varOrConst");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "variableDefinition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(346, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:351:2: (decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:351:4: decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi
            {
            dbg.location(351,8);
            pushFollow(FOLLOW_varOrConst_in_variableDefinition1155);
            decl=varOrConst();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrConst.add(decl.getTree());
            dbg.location(351,20);
            pushFollow(FOLLOW_variableDeclarator_in_variableDefinition1157);
            variableDeclarator83=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator83.getTree());
            dbg.location(352,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:352:3: ( COMMA variableDeclarator )*
            try { dbg.enterSubRule(20);

            loop20:
            do {
                int alt20=2;
                try { dbg.enterDecision(20);

                int LA20_0 = input.LA(1);

                if ( (LA20_0==COMMA) ) {
                    alt20=1;
                }


                } finally {dbg.exitDecision(20);}

                switch (alt20) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:352:4: COMMA variableDeclarator
            	    {
            	    dbg.location(352,4);
            	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_variableDefinition1162); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA84);

            	    dbg.location(352,10);
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDefinition1164);
            	    variableDeclarator85=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator85.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);
            } finally {dbg.exitSubRule(20);}

            dbg.location(353,3);
            pushFollow(FOLLOW_semi_in_variableDefinition1170);
            semi86=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semi.add(semi86.getTree());


            // AST REWRITE
            // elements: decl, variableDeclarator
            // token labels: 
            // rule labels: retval, decl
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_decl=new RewriteRuleSubtreeStream(adaptor,"rule decl",decl!=null?decl.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 354:3: -> ^( VAR_DEF $decl ( variableDeclarator )+ )
            {
                dbg.location(354,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:354:6: ^( VAR_DEF $decl ( variableDeclarator )+ )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(354,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);

                dbg.location(354,16);
                adaptor.addChild(root_1, annos);
                dbg.location(354,25);
                adaptor.addChild(root_1, mods);
                dbg.location(354,33);
                adaptor.addChild(root_1, stream_decl.nextTree());
                dbg.location(354,39);
                if ( !(stream_variableDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variableDeclarator.hasNext() ) {
                    dbg.location(354,39);
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                }
                stream_variableDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(355, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "variableDefinition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "variableDefinition"

    public static class varOrConst_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrConst"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:357:1: varOrConst : ( VAR | CONST );
    public final AS3Parser.varOrConst_return varOrConst() throws RecognitionException {
        AS3Parser.varOrConst_return retval = new AS3Parser.varOrConst_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set87=null;

        LinkedListTree set87_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "varOrConst");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(357, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:358:2: ( VAR | CONST )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(358,2);
            set87=(Token)input.LT(1);
            if ( (input.LA(1)>=VAR && input.LA(1)<=CONST) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set87));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(359, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "varOrConst");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "varOrConst"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:361:1: variableDeclarator : ident ( typeExpression )? ( variableInitializer )? ;
    public final AS3Parser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        AS3Parser.variableDeclarator_return retval = new AS3Parser.variableDeclarator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.ident_return ident88 = null;

        AS3Parser.typeExpression_return typeExpression89 = null;

        AS3Parser.variableInitializer_return variableInitializer90 = null;



        try { dbg.enterRule(getGrammarFileName(), "variableDeclarator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(361, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:2: ( ident ( typeExpression )? ( variableInitializer )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:4: ident ( typeExpression )? ( variableInitializer )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(362,9);
            pushFollow(FOLLOW_ident_in_variableDeclarator1214);
            ident88=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(ident88.getTree(), root_0);
            dbg.location(362,11);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:11: ( typeExpression )?
            int alt21=2;
            try { dbg.enterSubRule(21);
            try { dbg.enterDecision(21);

            int LA21_0 = input.LA(1);

            if ( (LA21_0==COLON) ) {
                alt21=1;
            }
            } finally {dbg.exitDecision(21);}

            switch (alt21) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:11: typeExpression
                    {
                    dbg.location(362,11);
                    pushFollow(FOLLOW_typeExpression_in_variableDeclarator1217);
                    typeExpression89=typeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeExpression89.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(21);}

            dbg.location(362,27);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:27: ( variableInitializer )?
            int alt22=2;
            try { dbg.enterSubRule(22);
            try { dbg.enterDecision(22);

            int LA22_0 = input.LA(1);

            if ( (LA22_0==ASSIGN) ) {
                alt22=1;
            }
            } finally {dbg.exitDecision(22);}

            switch (alt22) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:362:27: variableInitializer
                    {
                    dbg.location(362,27);
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator1220);
                    variableInitializer90=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer90.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(22);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(363, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "variableDeclarator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class declaration_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declaration"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:364:1: declaration : varOrConst variableDeclarator declarationTail ;
    public final AS3Parser.declaration_return declaration() throws RecognitionException {
        AS3Parser.declaration_return retval = new AS3Parser.declaration_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.varOrConst_return varOrConst91 = null;

        AS3Parser.variableDeclarator_return variableDeclarator92 = null;

        AS3Parser.declarationTail_return declarationTail93 = null;



        try { dbg.enterRule(getGrammarFileName(), "declaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(364, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:365:2: ( varOrConst variableDeclarator declarationTail )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:365:4: varOrConst variableDeclarator declarationTail
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(365,14);
            pushFollow(FOLLOW_varOrConst_in_declaration1231);
            varOrConst91=varOrConst();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(varOrConst91.getTree(), root_0);
            dbg.location(365,16);
            pushFollow(FOLLOW_variableDeclarator_in_declaration1234);
            variableDeclarator92=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator92.getTree());
            dbg.location(366,3);
            pushFollow(FOLLOW_declarationTail_in_declaration1238);
            declarationTail93=declarationTail();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, declarationTail93.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(367, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "declaration"

    public static class declarationTail_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarationTail"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:369:1: declarationTail : ( COMMA variableDeclarator )* ;
    public final AS3Parser.declarationTail_return declarationTail() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.declarationTail_return retval = new AS3Parser.declarationTail_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA94=null;
        AS3Parser.variableDeclarator_return variableDeclarator95 = null;


        LinkedListTree COMMA94_tree=null;


        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "declarationTail");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(369, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:374:2: ( ( COMMA variableDeclarator )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:374:4: ( COMMA variableDeclarator )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(374,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:374:4: ( COMMA variableDeclarator )*
            try { dbg.enterSubRule(23);

            loop23:
            do {
                int alt23=2;
                try { dbg.enterDecision(23);

                int LA23_0 = input.LA(1);

                if ( (LA23_0==COMMA) ) {
                    alt23=1;
                }


                } finally {dbg.exitDecision(23);}

                switch (alt23) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:374:5: COMMA variableDeclarator
            	    {
            	    dbg.location(374,10);
            	    COMMA94=(Token)match(input,COMMA,FOLLOW_COMMA_in_declarationTail1260); if (state.failed) return retval;
            	    dbg.location(374,12);
            	    pushFollow(FOLLOW_variableDeclarator_in_declarationTail1263);
            	    variableDeclarator95=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarator95.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);
            } finally {dbg.exitSubRule(23);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(375, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarationTail");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "declarationTail"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:377:1: variableInitializer : ASSIGN assignmentExpression ;
    public final AS3Parser.variableInitializer_return variableInitializer() throws RecognitionException {
        AS3Parser.variableInitializer_return retval = new AS3Parser.variableInitializer_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token ASSIGN96=null;
        AS3Parser.assignmentExpression_return assignmentExpression97 = null;


        LinkedListTree ASSIGN96_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "variableInitializer");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(377, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:378:2: ( ASSIGN assignmentExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:378:4: ASSIGN assignmentExpression
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(378,10);
            ASSIGN96=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_variableInitializer1276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN96_tree = (LinkedListTree)adaptor.create(ASSIGN96);
            root_0 = (LinkedListTree)adaptor.becomeRoot(ASSIGN96_tree, root_0);
            }
            dbg.location(378,12);
            pushFollow(FOLLOW_assignmentExpression_in_variableInitializer1279);
            assignmentExpression97=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression97.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(379, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "variableInitializer");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class parameterDeclarationList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterDeclarationList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:383:1: parameterDeclarationList : LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) ;
    public final AS3Parser.parameterDeclarationList_return parameterDeclarationList() throws RecognitionException {
        AS3Parser.parameterDeclarationList_return retval = new AS3Parser.parameterDeclarationList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LPAREN98=null;
        Token COMMA100=null;
        Token RPAREN102=null;
        AS3Parser.parameterDeclaration_return parameterDeclaration99 = null;

        AS3Parser.parameterDeclaration_return parameterDeclaration101 = null;


        LinkedListTree LPAREN98_tree=null;
        LinkedListTree COMMA100_tree=null;
        LinkedListTree RPAREN102_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_parameterDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclaration");
        try { dbg.enterRule(getGrammarFileName(), "parameterDeclarationList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(383, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:384:2: ( LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:384:4: LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN
            {
            dbg.location(384,4);
            LPAREN98=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameterDeclarationList1292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN98);

            dbg.location(385,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:385:3: ( parameterDeclaration ( COMMA parameterDeclaration )* )?
            int alt25=2;
            try { dbg.enterSubRule(25);
            try { dbg.enterDecision(25);

            try {
                isCyclicDecision = true;
                alt25 = dfa25.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(25);}

            switch (alt25) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:385:5: parameterDeclaration ( COMMA parameterDeclaration )*
                    {
                    dbg.location(385,5);
                    pushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1298);
                    parameterDeclaration99=parameterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterDeclaration.add(parameterDeclaration99.getTree());
                    dbg.location(386,4);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:386:4: ( COMMA parameterDeclaration )*
                    try { dbg.enterSubRule(24);

                    loop24:
                    do {
                        int alt24=2;
                        try { dbg.enterDecision(24);

                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==COMMA) ) {
                            alt24=1;
                        }


                        } finally {dbg.exitDecision(24);}

                        switch (alt24) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:386:5: COMMA parameterDeclaration
                    	    {
                    	    dbg.location(386,5);
                    	    COMMA100=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameterDeclarationList1304); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA100);

                    	    dbg.location(386,11);
                    	    pushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1306);
                    	    parameterDeclaration101=parameterDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameterDeclaration.add(parameterDeclaration101.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(24);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(25);}

            dbg.location(388,3);
            RPAREN102=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameterDeclarationList1317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN102);



            // AST REWRITE
            // elements: parameterDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 389:3: -> ^( PARAMS ( parameterDeclaration )* )
            {
                dbg.location(389,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:389:6: ^( PARAMS ( parameterDeclaration )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(389,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PARAMS, "PARAMS"), root_1);

                dbg.location(389,15);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:389:15: ( parameterDeclaration )*
                while ( stream_parameterDeclaration.hasNext() ) {
                    dbg.location(389,15);
                    adaptor.addChild(root_1, stream_parameterDeclaration.nextTree());

                }
                stream_parameterDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(390, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "parameterDeclarationList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "parameterDeclarationList"

    public static class parameterDeclaration_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterDeclaration"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:393:1: parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );
    public final AS3Parser.parameterDeclaration_return parameterDeclaration() throws RecognitionException {
        AS3Parser.parameterDeclaration_return retval = new AS3Parser.parameterDeclaration_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.basicParameterDeclaration_return basicParameterDeclaration103 = null;

        AS3Parser.parameterRestDeclaration_return parameterRestDeclaration104 = null;



        try { dbg.enterRule(getGrammarFileName(), "parameterDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(393, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:394:2: ( basicParameterDeclaration | parameterRestDeclaration )
            int alt26=2;
            try { dbg.enterDecision(26);

            try {
                isCyclicDecision = true;
                alt26 = dfa26.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(26);}

            switch (alt26) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:394:4: basicParameterDeclaration
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(394,4);
                    pushFollow(FOLLOW_basicParameterDeclaration_in_parameterDeclaration1340);
                    basicParameterDeclaration103=basicParameterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, basicParameterDeclaration103.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:394:32: parameterRestDeclaration
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(394,32);
                    pushFollow(FOLLOW_parameterRestDeclaration_in_parameterDeclaration1344);
                    parameterRestDeclaration104=parameterRestDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterRestDeclaration104.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(395, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "parameterDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "parameterDeclaration"

    public static class basicParameterDeclaration_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "basicParameterDeclaration"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:397:1: basicParameterDeclaration : ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) ;
    public final AS3Parser.basicParameterDeclaration_return basicParameterDeclaration() throws RecognitionException {
        AS3Parser.basicParameterDeclaration_return retval = new AS3Parser.basicParameterDeclaration_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CONST105=null;
        AS3Parser.ident_return ident106 = null;

        AS3Parser.typeExpression_return typeExpression107 = null;

        AS3Parser.parameterDefault_return parameterDefault108 = null;


        LinkedListTree CONST105_tree=null;
        RewriteRuleTokenStream stream_CONST=new RewriteRuleTokenStream(adaptor,"token CONST");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeExpression=new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        RewriteRuleSubtreeStream stream_parameterDefault=new RewriteRuleSubtreeStream(adaptor,"rule parameterDefault");
        try { dbg.enterRule(getGrammarFileName(), "basicParameterDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(397, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:2: ( ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:4: ( CONST )? ident ( typeExpression )? ( parameterDefault )?
            {
            dbg.location(398,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:4: ( CONST )?
            int alt27=2;
            try { dbg.enterSubRule(27);
            try { dbg.enterDecision(27);

            try {
                isCyclicDecision = true;
                alt27 = dfa27.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(27);}

            switch (alt27) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:4: CONST
                    {
                    dbg.location(398,4);
                    CONST105=(Token)match(input,CONST,FOLLOW_CONST_in_basicParameterDeclaration1355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONST.add(CONST105);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(27);}

            dbg.location(398,11);
            pushFollow(FOLLOW_ident_in_basicParameterDeclaration1358);
            ident106=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident106.getTree());
            dbg.location(398,17);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:17: ( typeExpression )?
            int alt28=2;
            try { dbg.enterSubRule(28);
            try { dbg.enterDecision(28);

            int LA28_0 = input.LA(1);

            if ( (LA28_0==COLON) ) {
                alt28=1;
            }
            } finally {dbg.exitDecision(28);}

            switch (alt28) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:17: typeExpression
                    {
                    dbg.location(398,17);
                    pushFollow(FOLLOW_typeExpression_in_basicParameterDeclaration1360);
                    typeExpression107=typeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeExpression.add(typeExpression107.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(28);}

            dbg.location(398,33);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:33: ( parameterDefault )?
            int alt29=2;
            try { dbg.enterSubRule(29);
            try { dbg.enterDecision(29);

            int LA29_0 = input.LA(1);

            if ( (LA29_0==ASSIGN) ) {
                alt29=1;
            }
            } finally {dbg.exitDecision(29);}

            switch (alt29) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:398:33: parameterDefault
                    {
                    dbg.location(398,33);
                    pushFollow(FOLLOW_parameterDefault_in_basicParameterDeclaration1363);
                    parameterDefault108=parameterDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameterDefault.add(parameterDefault108.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(29);}



            // AST REWRITE
            // elements: ident, CONST, typeExpression, parameterDefault
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 399:3: -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
            {
                dbg.location(399,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:399:6: ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(399,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PARAM, "PARAM"), root_1);

                dbg.location(399,14);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:399:14: ( CONST )?
                if ( stream_CONST.hasNext() ) {
                    dbg.location(399,14);
                    adaptor.addChild(root_1, stream_CONST.nextNode());

                }
                stream_CONST.reset();
                dbg.location(399,21);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(399,27);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:399:27: ( typeExpression )?
                if ( stream_typeExpression.hasNext() ) {
                    dbg.location(399,27);
                    adaptor.addChild(root_1, stream_typeExpression.nextTree());

                }
                stream_typeExpression.reset();
                dbg.location(399,43);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:399:43: ( parameterDefault )?
                if ( stream_parameterDefault.hasNext() ) {
                    dbg.location(399,43);
                    adaptor.addChild(root_1, stream_parameterDefault.nextTree());

                }
                stream_parameterDefault.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(400, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "basicParameterDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "basicParameterDeclaration"

    public static class parameterDefault_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterDefault"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:402:1: parameterDefault : ASSIGN assignmentExpression ;
    public final AS3Parser.parameterDefault_return parameterDefault() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.parameterDefault_return retval = new AS3Parser.parameterDefault_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token ASSIGN109=null;
        AS3Parser.assignmentExpression_return assignmentExpression110 = null;


        LinkedListTree ASSIGN109_tree=null;


        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "parameterDefault");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(402, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:408:2: ( ASSIGN assignmentExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:408:4: ASSIGN assignmentExpression
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(408,10);
            ASSIGN109=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_parameterDefault1407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN109_tree = (LinkedListTree)adaptor.create(ASSIGN109);
            root_0 = (LinkedListTree)adaptor.becomeRoot(ASSIGN109_tree, root_0);
            }
            dbg.location(408,12);
            pushFollow(FOLLOW_assignmentExpression_in_parameterDefault1410);
            assignmentExpression110=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression110.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(409, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "parameterDefault");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "parameterDefault"

    public static class parameterRestDeclaration_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameterRestDeclaration"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:411:1: parameterRestDeclaration : REST ( ident )? -> ^( PARAM REST ( ident )? ) ;
    public final AS3Parser.parameterRestDeclaration_return parameterRestDeclaration() throws RecognitionException {
        AS3Parser.parameterRestDeclaration_return retval = new AS3Parser.parameterRestDeclaration_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token REST111=null;
        AS3Parser.ident_return ident112 = null;


        LinkedListTree REST111_tree=null;
        RewriteRuleTokenStream stream_REST=new RewriteRuleTokenStream(adaptor,"token REST");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try { dbg.enterRule(getGrammarFileName(), "parameterRestDeclaration");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(411, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:412:2: ( REST ( ident )? -> ^( PARAM REST ( ident )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:412:4: REST ( ident )?
            {
            dbg.location(412,4);
            REST111=(Token)match(input,REST,FOLLOW_REST_in_parameterRestDeclaration1421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REST.add(REST111);

            dbg.location(412,9);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:412:9: ( ident )?
            int alt30=2;
            try { dbg.enterSubRule(30);
            try { dbg.enterDecision(30);

            try {
                isCyclicDecision = true;
                alt30 = dfa30.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(30);}

            switch (alt30) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:412:9: ident
                    {
                    dbg.location(412,9);
                    pushFollow(FOLLOW_ident_in_parameterRestDeclaration1423);
                    ident112=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident112.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(30);}



            // AST REWRITE
            // elements: REST, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 413:3: -> ^( PARAM REST ( ident )? )
            {
                dbg.location(413,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:413:6: ^( PARAM REST ( ident )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(413,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PARAM, "PARAM"), root_1);

                dbg.location(413,14);
                adaptor.addChild(root_1, stream_REST.nextNode());
                dbg.location(413,19);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:413:19: ( ident )?
                if ( stream_ident.hasNext() ) {
                    dbg.location(413,19);
                    adaptor.addChild(root_1, stream_ident.nextTree());

                }
                stream_ident.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(414, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "parameterRestDeclaration");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "parameterRestDeclaration"

    public static class block_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:415:1: block : LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) ;
    public final AS3Parser.block_return block() throws RecognitionException {
        AS3Parser.block_return retval = new AS3Parser.block_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LCURLY113=null;
        Token RCURLY115=null;
        AS3Parser.blockEntry_return blockEntry114 = null;


        LinkedListTree LCURLY113_tree=null;
        LinkedListTree RCURLY115_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockEntry=new RewriteRuleSubtreeStream(adaptor,"rule blockEntry");
        try { dbg.enterRule(getGrammarFileName(), "block");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(415, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:416:2: ( LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:416:4: LCURLY ( blockEntry )* RCURLY
            {
            dbg.location(416,4);
            LCURLY113=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_block1447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY113);

            dbg.location(416,11);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:416:11: ( blockEntry )*
            try { dbg.enterSubRule(31);

            loop31:
            do {
                int alt31=2;
                try { dbg.enterDecision(31);

                try {
                    isCyclicDecision = true;
                    alt31 = dfa31.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(31);}

                switch (alt31) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:416:11: blockEntry
            	    {
            	    dbg.location(416,11);
            	    pushFollow(FOLLOW_blockEntry_in_block1449);
            	    blockEntry114=blockEntry();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockEntry.add(blockEntry114.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);
            } finally {dbg.exitSubRule(31);}

            dbg.location(416,23);
            RCURLY115=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_block1452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY115);



            // AST REWRITE
            // elements: blockEntry
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 417:3: -> ^( BLOCK ( blockEntry )* )
            {
                dbg.location(417,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:417:6: ^( BLOCK ( blockEntry )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(417,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                dbg.location(417,14);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:417:14: ( blockEntry )*
                while ( stream_blockEntry.hasNext() ) {
                    dbg.location(417,14);
                    adaptor.addChild(root_1, stream_blockEntry.nextTree());

                }
                stream_blockEntry.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(418, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "block");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "block"

    public static class blockEntry_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockEntry"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:420:1: blockEntry : statement ;
    public final AS3Parser.blockEntry_return blockEntry() throws RecognitionException {
        AS3Parser.blockEntry_return retval = new AS3Parser.blockEntry_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.statement_return statement116 = null;



        try { dbg.enterRule(getGrammarFileName(), "blockEntry");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(420, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:421:2: ( statement )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:428:6: statement
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(428,6);
            pushFollow(FOLLOW_statement_in_blockEntry1476);
            statement116=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(429, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "blockEntry");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "blockEntry"

    public static class condition_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:431:1: condition : LPAREN expression RPAREN -> ^( CONDITION expression ) ;
    public final AS3Parser.condition_return condition() throws RecognitionException {
        AS3Parser.condition_return retval = new AS3Parser.condition_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LPAREN117=null;
        Token RPAREN119=null;
        AS3Parser.expression_return expression118 = null;


        LinkedListTree LPAREN117_tree=null;
        LinkedListTree RPAREN119_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try { dbg.enterRule(getGrammarFileName(), "condition");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(431, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:432:2: ( LPAREN expression RPAREN -> ^( CONDITION expression ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:432:4: LPAREN expression RPAREN
            {
            dbg.location(432,4);
            LPAREN117=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition1487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN117);

            dbg.location(432,11);
            pushFollow(FOLLOW_expression_in_condition1489);
            expression118=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression118.getTree());
            dbg.location(432,22);
            RPAREN119=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition1491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN119);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 433:3: -> ^( CONDITION expression )
            {
                dbg.location(433,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:433:6: ^( CONDITION expression )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(433,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                dbg.location(433,18);
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(434, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "condition");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "condition"

    public static class statement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:436:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | SEMI );
    public final AS3Parser.statement_return statement() throws RecognitionException {
        AS3Parser.statement_return retval = new AS3Parser.statement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token SEMI136=null;
        AS3Parser.block_return block120 = null;

        AS3Parser.declarationStatement_return declarationStatement121 = null;

        AS3Parser.expressionStatement_return expressionStatement122 = null;

        AS3Parser.ifStatement_return ifStatement123 = null;

        AS3Parser.forEachStatement_return forEachStatement124 = null;

        AS3Parser.forStatement_return forStatement125 = null;

        AS3Parser.whileStatement_return whileStatement126 = null;

        AS3Parser.doWhileStatement_return doWhileStatement127 = null;

        AS3Parser.withStatement_return withStatement128 = null;

        AS3Parser.switchStatement_return switchStatement129 = null;

        AS3Parser.breakStatement_return breakStatement130 = null;

        AS3Parser.continueStatement_return continueStatement131 = null;

        AS3Parser.returnStatement_return returnStatement132 = null;

        AS3Parser.throwStatement_return throwStatement133 = null;

        AS3Parser.tryStatement_return tryStatement134 = null;

        AS3Parser.defaultXMLNamespaceStatement_return defaultXMLNamespaceStatement135 = null;


        LinkedListTree SEMI136_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "statement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(436, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:437:2: ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | SEMI )
            int alt32=17;
            try { dbg.enterDecision(32);

            try {
                isCyclicDecision = true;
                alt32 = dfa32.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(32);}

            switch (alt32) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:437:4: ( LCURLY )=> block
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(437,15);
                    pushFollow(FOLLOW_block_in_statement1517);
                    block120=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block120.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:438:4: declarationStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(438,4);
                    pushFollow(FOLLOW_declarationStatement_in_statement1522);
                    declarationStatement121=declarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarationStatement121.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:439:4: expressionStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(439,4);
                    pushFollow(FOLLOW_expressionStatement_in_statement1527);
                    expressionStatement122=expressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionStatement122.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:440:4: ifStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(440,4);
                    pushFollow(FOLLOW_ifStatement_in_statement1532);
                    ifStatement123=ifStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement123.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:442:4: forEachStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(442,4);
                    pushFollow(FOLLOW_forEachStatement_in_statement1539);
                    forEachStatement124=forEachStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forEachStatement124.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:443:4: forStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(443,4);
                    pushFollow(FOLLOW_forStatement_in_statement1544);
                    forStatement125=forStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement125.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:446:4: whileStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(446,4);
                    pushFollow(FOLLOW_whileStatement_in_statement1552);
                    whileStatement126=whileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement126.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:449:4: doWhileStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(449,4);
                    pushFollow(FOLLOW_doWhileStatement_in_statement1560);
                    doWhileStatement127=doWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doWhileStatement127.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:452:4: withStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(452,4);
                    pushFollow(FOLLOW_withStatement_in_statement1569);
                    withStatement128=withStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement128.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:455:4: switchStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(455,4);
                    pushFollow(FOLLOW_switchStatement_in_statement1578);
                    switchStatement129=switchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchStatement129.getTree());

                    }
                    break;
                case 11 :
                    dbg.enterAlt(11);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:458:4: breakStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(458,4);
                    pushFollow(FOLLOW_breakStatement_in_statement1587);
                    breakStatement130=breakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakStatement130.getTree());

                    }
                    break;
                case 12 :
                    dbg.enterAlt(12);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:461:4: continueStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(461,4);
                    pushFollow(FOLLOW_continueStatement_in_statement1595);
                    continueStatement131=continueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continueStatement131.getTree());

                    }
                    break;
                case 13 :
                    dbg.enterAlt(13);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:464:4: returnStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(464,4);
                    pushFollow(FOLLOW_returnStatement_in_statement1603);
                    returnStatement132=returnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returnStatement132.getTree());

                    }
                    break;
                case 14 :
                    dbg.enterAlt(14);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:467:4: throwStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(467,4);
                    pushFollow(FOLLOW_throwStatement_in_statement1611);
                    throwStatement133=throwStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throwStatement133.getTree());

                    }
                    break;
                case 15 :
                    dbg.enterAlt(15);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:470:4: tryStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(470,4);
                    pushFollow(FOLLOW_tryStatement_in_statement1620);
                    tryStatement134=tryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement134.getTree());

                    }
                    break;
                case 16 :
                    dbg.enterAlt(16);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:473:4: defaultXMLNamespaceStatement
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(473,4);
                    pushFollow(FOLLOW_defaultXMLNamespaceStatement_in_statement1629);
                    defaultXMLNamespaceStatement135=defaultXMLNamespaceStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultXMLNamespaceStatement135.getTree());

                    }
                    break;
                case 17 :
                    dbg.enterAlt(17);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:476:4: SEMI
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(476,8);
                    SEMI136=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement1637); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(477, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "statement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "statement"

    public static class declarationStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declarationStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:479:1: declarationStatement : declaration semi ;
    public final AS3Parser.declarationStatement_return declarationStatement() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.declarationStatement_return retval = new AS3Parser.declarationStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.declaration_return declaration137 = null;

        AS3Parser.semi_return semi138 = null;




        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "declarationStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(479, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:484:2: ( declaration semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:484:4: declaration semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(484,4);
            pushFollow(FOLLOW_declaration_in_declarationStatement1659);
            declaration137=declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration137.getTree());
            dbg.location(484,16);
            pushFollow(FOLLOW_semi_in_declarationStatement1661);
            semi138=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi138.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(485, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "declarationStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "declarationStatement"

    public static class expressionStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:487:1: expressionStatement : expressionList semi -> ^( EXPR_STMNT expressionList ) ;
    public final AS3Parser.expressionStatement_return expressionStatement() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.expressionStatement_return retval = new AS3Parser.expressionStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.expressionList_return expressionList139 = null;

        AS3Parser.semi_return semi140 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "expressionStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(487, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:492:2: ( expressionList semi -> ^( EXPR_STMNT expressionList ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:492:4: expressionList semi
            {
            dbg.location(492,4);
            pushFollow(FOLLOW_expressionList_in_expressionStatement1682);
            expressionList139=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionList.add(expressionList139.getTree());
            dbg.location(492,19);
            pushFollow(FOLLOW_semi_in_expressionStatement1684);
            semi140=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semi.add(semi140.getTree());


            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 493:3: -> ^( EXPR_STMNT expressionList )
            {
                dbg.location(493,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:493:6: ^( EXPR_STMNT expressionList )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(493,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(EXPR_STMNT, "EXPR_STMNT"), root_1);

                dbg.location(493,19);
                adaptor.addChild(root_1, stream_expressionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(494, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expressionStatement"

    public static class ifStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:496:1: ifStatement : IF condition statement ( ( ELSE )=> elseClause )? ;
    public final AS3Parser.ifStatement_return ifStatement() throws RecognitionException {
        AS3Parser.ifStatement_return retval = new AS3Parser.ifStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IF141=null;
        AS3Parser.condition_return condition142 = null;

        AS3Parser.statement_return statement143 = null;

        AS3Parser.elseClause_return elseClause144 = null;


        LinkedListTree IF141_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "ifStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(496, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:497:2: ( IF condition statement ( ( ELSE )=> elseClause )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:497:4: IF condition statement ( ( ELSE )=> elseClause )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(497,6);
            IF141=(Token)match(input,IF,FOLLOW_IF_in_ifStatement1706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF141_tree = (LinkedListTree)adaptor.create(IF141);
            root_0 = (LinkedListTree)adaptor.becomeRoot(IF141_tree, root_0);
            }
            dbg.location(497,8);
            pushFollow(FOLLOW_condition_in_ifStatement1709);
            condition142=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition142.getTree());
            dbg.location(497,18);
            pushFollow(FOLLOW_statement_in_ifStatement1711);
            statement143=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement143.getTree());
            dbg.location(498,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:498:3: ( ( ELSE )=> elseClause )?
            int alt33=2;
            try { dbg.enterSubRule(33);
            try { dbg.enterDecision(33);

            try {
                isCyclicDecision = true;
                alt33 = dfa33.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(33);}

            switch (alt33) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:498:4: ( ELSE )=> elseClause
                    {
                    dbg.location(498,12);
                    pushFollow(FOLLOW_elseClause_in_ifStatement1720);
                    elseClause144=elseClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause144.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(33);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(499, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ifStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ifStatement"

    public static class elseClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:501:1: elseClause : ELSE statement ;
    public final AS3Parser.elseClause_return elseClause() throws RecognitionException {
        AS3Parser.elseClause_return retval = new AS3Parser.elseClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token ELSE145=null;
        AS3Parser.statement_return statement146 = null;


        LinkedListTree ELSE145_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "elseClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(501, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:502:2: ( ELSE statement )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:502:4: ELSE statement
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(502,8);
            ELSE145=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause1733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSE145_tree = (LinkedListTree)adaptor.create(ELSE145);
            root_0 = (LinkedListTree)adaptor.becomeRoot(ELSE145_tree, root_0);
            }
            dbg.location(502,10);
            pushFollow(FOLLOW_statement_in_elseClause1736);
            statement146=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement146.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(503, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elseClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "elseClause"

    public static class throwStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "throwStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:505:1: throwStatement : THROW expression semi ;
    public final AS3Parser.throwStatement_return throwStatement() throws RecognitionException {
        AS3Parser.throwStatement_return retval = new AS3Parser.throwStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token THROW147=null;
        AS3Parser.expression_return expression148 = null;

        AS3Parser.semi_return semi149 = null;


        LinkedListTree THROW147_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "throwStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(505, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:506:2: ( THROW expression semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:506:4: THROW expression semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(506,9);
            THROW147=(Token)match(input,THROW,FOLLOW_THROW_in_throwStatement1747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THROW147_tree = (LinkedListTree)adaptor.create(THROW147);
            root_0 = (LinkedListTree)adaptor.becomeRoot(THROW147_tree, root_0);
            }
            dbg.location(506,11);
            pushFollow(FOLLOW_expression_in_throwStatement1750);
            expression148=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression148.getTree());
            dbg.location(506,26);
            pushFollow(FOLLOW_semi_in_throwStatement1752);
            semi149=semi();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(507, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "throwStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "throwStatement"

    public static class tryStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tryStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:509:1: tryStatement : TRY block ( finallyBlock | ( catchBlock )+ ( finallyBlock )? ) -> ^( TRY block ( catchBlock )* ( finallyBlock )? ) ;
    public final AS3Parser.tryStatement_return tryStatement() throws RecognitionException {
        AS3Parser.tryStatement_return retval = new AS3Parser.tryStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token TRY150=null;
        AS3Parser.block_return block151 = null;

        AS3Parser.finallyBlock_return finallyBlock152 = null;

        AS3Parser.catchBlock_return catchBlock153 = null;

        AS3Parser.finallyBlock_return finallyBlock154 = null;


        LinkedListTree TRY150_tree=null;
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleSubtreeStream stream_catchBlock=new RewriteRuleSubtreeStream(adaptor,"rule catchBlock");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_finallyBlock=new RewriteRuleSubtreeStream(adaptor,"rule finallyBlock");
        try { dbg.enterRule(getGrammarFileName(), "tryStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(509, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:510:2: ( TRY block ( finallyBlock | ( catchBlock )+ ( finallyBlock )? ) -> ^( TRY block ( catchBlock )* ( finallyBlock )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:510:4: TRY block ( finallyBlock | ( catchBlock )+ ( finallyBlock )? )
            {
            dbg.location(510,4);
            TRY150=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement1764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRY.add(TRY150);

            dbg.location(511,3);
            pushFollow(FOLLOW_block_in_tryStatement1768);
            block151=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block151.getTree());
            dbg.location(512,2);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:512:2: ( finallyBlock | ( catchBlock )+ ( finallyBlock )? )
            int alt36=2;
            try { dbg.enterSubRule(36);
            try { dbg.enterDecision(36);

            int LA36_0 = input.LA(1);

            if ( (LA36_0==FINALLY) ) {
                alt36=1;
            }
            else if ( (LA36_0==CATCH) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(36);}

            switch (alt36) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:512:4: finallyBlock
                    {
                    dbg.location(512,4);
                    pushFollow(FOLLOW_finallyBlock_in_tryStatement1773);
                    finallyBlock152=finallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finallyBlock.add(finallyBlock152.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:513:4: ( catchBlock )+ ( finallyBlock )?
                    {
                    dbg.location(513,4);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:513:4: ( catchBlock )+
                    int cnt34=0;
                    try { dbg.enterSubRule(34);

                    loop34:
                    do {
                        int alt34=2;
                        try { dbg.enterDecision(34);

                        try {
                            isCyclicDecision = true;
                            alt34 = dfa34.predict(input);
                        }
                        catch (NoViableAltException nvae) {
                            dbg.recognitionException(nvae);
                            throw nvae;
                        }
                        } finally {dbg.exitDecision(34);}

                        switch (alt34) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:513:4: catchBlock
                    	    {
                    	    dbg.location(513,4);
                    	    pushFollow(FOLLOW_catchBlock_in_tryStatement1778);
                    	    catchBlock153=catchBlock();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_catchBlock.add(catchBlock153.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt34 >= 1 ) break loop34;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(34, input);
                                dbg.recognitionException(eee);

                                throw eee;
                        }
                        cnt34++;
                    } while (true);
                    } finally {dbg.exitSubRule(34);}

                    dbg.location(514,3);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:514:3: ( finallyBlock )?
                    int alt35=2;
                    try { dbg.enterSubRule(35);
                    try { dbg.enterDecision(35);

                    try {
                        isCyclicDecision = true;
                        alt35 = dfa35.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(35);}

                    switch (alt35) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:514:3: finallyBlock
                            {
                            dbg.location(514,3);
                            pushFollow(FOLLOW_finallyBlock_in_tryStatement1783);
                            finallyBlock154=finallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_finallyBlock.add(finallyBlock154.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(35);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(36);}



            // AST REWRITE
            // elements: TRY, block, catchBlock, finallyBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 516:3: -> ^( TRY block ( catchBlock )* ( finallyBlock )? )
            {
                dbg.location(516,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:516:6: ^( TRY block ( catchBlock )* ( finallyBlock )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(516,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                dbg.location(516,12);
                adaptor.addChild(root_1, stream_block.nextTree());
                dbg.location(516,18);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:516:18: ( catchBlock )*
                while ( stream_catchBlock.hasNext() ) {
                    dbg.location(516,18);
                    adaptor.addChild(root_1, stream_catchBlock.nextTree());

                }
                stream_catchBlock.reset();
                dbg.location(516,30);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:516:30: ( finallyBlock )?
                if ( stream_finallyBlock.hasNext() ) {
                    dbg.location(516,30);
                    adaptor.addChild(root_1, stream_finallyBlock.nextTree());

                }
                stream_finallyBlock.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(517, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "tryStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "tryStatement"

    public static class catchBlock_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchBlock"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:519:1: catchBlock : CATCH LPAREN ident ( typeExpression )? RPAREN block -> ^( CATCH ident ( typeExpression )? block ) ;
    public final AS3Parser.catchBlock_return catchBlock() throws RecognitionException {
        AS3Parser.catchBlock_return retval = new AS3Parser.catchBlock_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CATCH155=null;
        Token LPAREN156=null;
        Token RPAREN159=null;
        AS3Parser.ident_return ident157 = null;

        AS3Parser.typeExpression_return typeExpression158 = null;

        AS3Parser.block_return block160 = null;


        LinkedListTree CATCH155_tree=null;
        LinkedListTree LPAREN156_tree=null;
        LinkedListTree RPAREN159_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CATCH=new RewriteRuleTokenStream(adaptor,"token CATCH");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeExpression=new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try { dbg.enterRule(getGrammarFileName(), "catchBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(519, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:520:2: ( CATCH LPAREN ident ( typeExpression )? RPAREN block -> ^( CATCH ident ( typeExpression )? block ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:520:4: CATCH LPAREN ident ( typeExpression )? RPAREN block
            {
            dbg.location(520,4);
            CATCH155=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchBlock1814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CATCH.add(CATCH155);

            dbg.location(520,10);
            LPAREN156=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchBlock1816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN156);

            dbg.location(520,17);
            pushFollow(FOLLOW_ident_in_catchBlock1818);
            ident157=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident157.getTree());
            dbg.location(520,23);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:520:23: ( typeExpression )?
            int alt37=2;
            try { dbg.enterSubRule(37);
            try { dbg.enterDecision(37);

            int LA37_0 = input.LA(1);

            if ( (LA37_0==COLON) ) {
                alt37=1;
            }
            } finally {dbg.exitDecision(37);}

            switch (alt37) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:520:23: typeExpression
                    {
                    dbg.location(520,23);
                    pushFollow(FOLLOW_typeExpression_in_catchBlock1820);
                    typeExpression158=typeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeExpression.add(typeExpression158.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(37);}

            dbg.location(520,39);
            RPAREN159=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchBlock1823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN159);

            dbg.location(521,3);
            pushFollow(FOLLOW_block_in_catchBlock1827);
            block160=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block160.getTree());


            // AST REWRITE
            // elements: ident, CATCH, typeExpression, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 522:3: -> ^( CATCH ident ( typeExpression )? block )
            {
                dbg.location(522,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:522:6: ^( CATCH ident ( typeExpression )? block )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(522,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot(stream_CATCH.nextNode(), root_1);

                dbg.location(522,14);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(522,20);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:522:20: ( typeExpression )?
                if ( stream_typeExpression.hasNext() ) {
                    dbg.location(522,20);
                    adaptor.addChild(root_1, stream_typeExpression.nextTree());

                }
                stream_typeExpression.reset();
                dbg.location(522,36);
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(523, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "catchBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "catchBlock"

    public static class finallyBlock_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "finallyBlock"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:525:1: finallyBlock : FINALLY block ;
    public final AS3Parser.finallyBlock_return finallyBlock() throws RecognitionException {
        AS3Parser.finallyBlock_return retval = new AS3Parser.finallyBlock_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token FINALLY161=null;
        AS3Parser.block_return block162 = null;


        LinkedListTree FINALLY161_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "finallyBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(525, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:526:2: ( FINALLY block )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:526:4: FINALLY block
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(526,11);
            FINALLY161=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_finallyBlock1853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALLY161_tree = (LinkedListTree)adaptor.create(FINALLY161);
            root_0 = (LinkedListTree)adaptor.becomeRoot(FINALLY161_tree, root_0);
            }
            dbg.location(526,13);
            pushFollow(FOLLOW_block_in_finallyBlock1856);
            block162=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block162.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(527, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "finallyBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "finallyBlock"

    public static class returnStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returnStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:529:1: returnStatement : RETURN ( expression )? semi ;
    public final AS3Parser.returnStatement_return returnStatement() throws RecognitionException {
        AS3Parser.returnStatement_return retval = new AS3Parser.returnStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token RETURN163=null;
        AS3Parser.expression_return expression164 = null;

        AS3Parser.semi_return semi165 = null;


        LinkedListTree RETURN163_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "returnStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(529, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:530:2: ( RETURN ( expression )? semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:530:4: RETURN ( expression )? semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(530,10);
            RETURN163=(Token)match(input,RETURN,FOLLOW_RETURN_in_returnStatement1867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN163_tree = (LinkedListTree)adaptor.create(RETURN163);
            root_0 = (LinkedListTree)adaptor.becomeRoot(RETURN163_tree, root_0);
            }
            dbg.location(530,12);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:530:12: ( expression )?
            int alt38=2;
            try { dbg.enterSubRule(38);
            try { dbg.enterDecision(38);

            try {
                isCyclicDecision = true;
                alt38 = dfa38.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(38);}

            switch (alt38) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:530:12: expression
                    {
                    dbg.location(530,12);
                    pushFollow(FOLLOW_expression_in_returnStatement1870);
                    expression164=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(38);}

            dbg.location(530,24);
            pushFollow(FOLLOW_semi_in_returnStatement1873);
            semi165=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi165.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(531, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "returnStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "returnStatement"

    public static class continueStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continueStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:533:1: continueStatement : CONTINUE semi ;
    public final AS3Parser.continueStatement_return continueStatement() throws RecognitionException {
        AS3Parser.continueStatement_return retval = new AS3Parser.continueStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CONTINUE166=null;
        AS3Parser.semi_return semi167 = null;


        LinkedListTree CONTINUE166_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "continueStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(533, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:534:2: ( CONTINUE semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:534:4: CONTINUE semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(534,12);
            CONTINUE166=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continueStatement1886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE166_tree = (LinkedListTree)adaptor.create(CONTINUE166);
            root_0 = (LinkedListTree)adaptor.becomeRoot(CONTINUE166_tree, root_0);
            }
            dbg.location(534,14);
            pushFollow(FOLLOW_semi_in_continueStatement1889);
            semi167=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi167.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(535, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "continueStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "continueStatement"

    public static class breakStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "breakStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:537:1: breakStatement : BREAK semi ;
    public final AS3Parser.breakStatement_return breakStatement() throws RecognitionException {
        AS3Parser.breakStatement_return retval = new AS3Parser.breakStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token BREAK168=null;
        AS3Parser.semi_return semi169 = null;


        LinkedListTree BREAK168_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "breakStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(537, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:538:2: ( BREAK semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:538:4: BREAK semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(538,9);
            BREAK168=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakStatement1900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BREAK168_tree = (LinkedListTree)adaptor.create(BREAK168);
            root_0 = (LinkedListTree)adaptor.becomeRoot(BREAK168_tree, root_0);
            }
            dbg.location(538,11);
            pushFollow(FOLLOW_semi_in_breakStatement1903);
            semi169=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi169.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(539, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "breakStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "breakStatement"

    public static class switchStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:541:1: switchStatement : SWITCH condition switchBlock ;
    public final AS3Parser.switchStatement_return switchStatement() throws RecognitionException {
        AS3Parser.switchStatement_return retval = new AS3Parser.switchStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token SWITCH170=null;
        AS3Parser.condition_return condition171 = null;

        AS3Parser.switchBlock_return switchBlock172 = null;


        LinkedListTree SWITCH170_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "switchStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(541, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:542:2: ( SWITCH condition switchBlock )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:542:4: SWITCH condition switchBlock
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(542,10);
            SWITCH170=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_switchStatement1914); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SWITCH170_tree = (LinkedListTree)adaptor.create(SWITCH170);
            root_0 = (LinkedListTree)adaptor.becomeRoot(SWITCH170_tree, root_0);
            }
            dbg.location(542,12);
            pushFollow(FOLLOW_condition_in_switchStatement1917);
            condition171=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition171.getTree());
            dbg.location(543,3);
            pushFollow(FOLLOW_switchBlock_in_switchStatement1921);
            switchBlock172=switchBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlock172.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(544, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "switchStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "switchStatement"

    public static class switchBlock_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlock"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:546:1: switchBlock : LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) ;
    public final AS3Parser.switchBlock_return switchBlock() throws RecognitionException {
        AS3Parser.switchBlock_return retval = new AS3Parser.switchBlock_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LCURLY173=null;
        Token RCURLY176=null;
        AS3Parser.caseStatement_return caseStatement174 = null;

        AS3Parser.defaultStatement_return defaultStatement175 = null;


        LinkedListTree LCURLY173_tree=null;
        LinkedListTree RCURLY176_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
        RewriteRuleSubtreeStream stream_defaultStatement=new RewriteRuleSubtreeStream(adaptor,"rule defaultStatement");
        try { dbg.enterRule(getGrammarFileName(), "switchBlock");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(546, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:547:2: ( LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:547:4: LCURLY ( caseStatement )* ( defaultStatement )? RCURLY
            {
            dbg.location(547,4);
            LCURLY173=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_switchBlock1932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY173);

            dbg.location(548,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:548:3: ( caseStatement )*
            try { dbg.enterSubRule(39);

            loop39:
            do {
                int alt39=2;
                try { dbg.enterDecision(39);

                int LA39_0 = input.LA(1);

                if ( (LA39_0==CASE) ) {
                    alt39=1;
                }


                } finally {dbg.exitDecision(39);}

                switch (alt39) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:548:4: caseStatement
            	    {
            	    dbg.location(548,4);
            	    pushFollow(FOLLOW_caseStatement_in_switchBlock1937);
            	    caseStatement174=caseStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_caseStatement.add(caseStatement174.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);
            } finally {dbg.exitSubRule(39);}

            dbg.location(549,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:549:3: ( defaultStatement )?
            int alt40=2;
            try { dbg.enterSubRule(40);
            try { dbg.enterDecision(40);

            int LA40_0 = input.LA(1);

            if ( (LA40_0==DEFAULT) ) {
                alt40=1;
            }
            } finally {dbg.exitDecision(40);}

            switch (alt40) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:549:4: defaultStatement
                    {
                    dbg.location(549,4);
                    pushFollow(FOLLOW_defaultStatement_in_switchBlock1944);
                    defaultStatement175=defaultStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultStatement.add(defaultStatement175.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(40);}

            dbg.location(550,3);
            RCURLY176=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_switchBlock1950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY176);



            // AST REWRITE
            // elements: caseStatement, defaultStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 551:3: -> ^( BLOCK ( caseStatement )* ( defaultStatement )? )
            {
                dbg.location(551,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:551:6: ^( BLOCK ( caseStatement )* ( defaultStatement )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(551,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(BLOCK, "BLOCK"), root_1);

                dbg.location(551,14);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:551:14: ( caseStatement )*
                while ( stream_caseStatement.hasNext() ) {
                    dbg.location(551,14);
                    adaptor.addChild(root_1, stream_caseStatement.nextTree());

                }
                stream_caseStatement.reset();
                dbg.location(551,29);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:551:29: ( defaultStatement )?
                if ( stream_defaultStatement.hasNext() ) {
                    dbg.location(551,29);
                    adaptor.addChild(root_1, stream_defaultStatement.nextTree());

                }
                stream_defaultStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(552, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "switchBlock");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "switchBlock"

    public static class caseStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:554:1: caseStatement : CASE expression COLON l= switchStatementList ;
    public final AS3Parser.caseStatement_return caseStatement() throws RecognitionException {
        AS3Parser.caseStatement_return retval = new AS3Parser.caseStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token CASE177=null;
        Token COLON179=null;
        AS3Parser.switchStatementList_return l = null;

        AS3Parser.expression_return expression178 = null;


        LinkedListTree CASE177_tree=null;
        LinkedListTree COLON179_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "caseStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(554, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:555:2: ( CASE expression COLON l= switchStatementList )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:555:4: CASE expression COLON l= switchStatementList
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(555,8);
            CASE177=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement1975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE177_tree = (LinkedListTree)adaptor.create(CASE177);
            root_0 = (LinkedListTree)adaptor.becomeRoot(CASE177_tree, root_0);
            }
            dbg.location(555,10);
            pushFollow(FOLLOW_expression_in_caseStatement1978);
            expression178=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression178.getTree());
            dbg.location(555,26);
            COLON179=(Token)match(input,COLON,FOLLOW_COLON_in_caseStatement1980); if (state.failed) return retval;
            dbg.location(555,29);
            pushFollow(FOLLOW_switchStatementList_in_caseStatement1985);
            l=switchStatementList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, l.getTree());
            dbg.location(555,50);
            if ( state.backtracking==0 ) {
               placeholder((l!=null?((LinkedListTree)l.tree):null)); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(556, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "caseStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "caseStatement"

    public static class defaultStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:558:1: defaultStatement : DEFAULT COLON l= switchStatementList ;
    public final AS3Parser.defaultStatement_return defaultStatement() throws RecognitionException {
        AS3Parser.defaultStatement_return retval = new AS3Parser.defaultStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DEFAULT180=null;
        Token COLON181=null;
        AS3Parser.switchStatementList_return l = null;


        LinkedListTree DEFAULT180_tree=null;
        LinkedListTree COLON181_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "defaultStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(558, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:559:2: ( DEFAULT COLON l= switchStatementList )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:559:4: DEFAULT COLON l= switchStatementList
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(559,11);
            DEFAULT180=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultStatement1999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT180_tree = (LinkedListTree)adaptor.create(DEFAULT180);
            root_0 = (LinkedListTree)adaptor.becomeRoot(DEFAULT180_tree, root_0);
            }
            dbg.location(559,18);
            COLON181=(Token)match(input,COLON,FOLLOW_COLON_in_defaultStatement2002); if (state.failed) return retval;
            dbg.location(559,21);
            pushFollow(FOLLOW_switchStatementList_in_defaultStatement2007);
            l=switchStatementList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, l.getTree());
            dbg.location(559,42);
            if ( state.backtracking==0 ) {
               placeholder((l!=null?((LinkedListTree)l.tree):null)); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(560, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "defaultStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "defaultStatement"

    public static class switchStatementList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchStatementList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:562:1: switchStatementList : ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) ;
    public final AS3Parser.switchStatementList_return switchStatementList() throws RecognitionException {
        AS3Parser.switchStatementList_return retval = new AS3Parser.switchStatementList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.statement_return statement182 = null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try { dbg.enterRule(getGrammarFileName(), "switchStatementList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(562, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:2: ( ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:4: ( statement )*
            {
            dbg.location(563,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:4: ( statement )*
            try { dbg.enterSubRule(41);

            loop41:
            do {
                int alt41=2;
                try { dbg.enterDecision(41);

                try {
                    isCyclicDecision = true;
                    alt41 = dfa41.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(41);}

                switch (alt41) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:4: statement
            	    {
            	    dbg.location(563,4);
            	    pushFollow(FOLLOW_statement_in_switchStatementList2020);
            	    statement182=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement182.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);
            } finally {dbg.exitSubRule(41);}



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 563:15: -> ^( SWITCH_STATEMENT_LIST ( statement )* )
            {
                dbg.location(563,18);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:18: ^( SWITCH_STATEMENT_LIST ( statement )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(563,20);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(SWITCH_STATEMENT_LIST, "SWITCH_STATEMENT_LIST"), root_1);

                dbg.location(563,42);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:563:42: ( statement )*
                while ( stream_statement.hasNext() ) {
                    dbg.location(563,42);
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(564, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "switchStatementList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "switchStatementList"

    public static class forEachStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forEachStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:566:1: forEachStatement : f= FOR EACH LPAREN forInClause RPAREN statement -> ^( FOR_EACH[$f] forInClause statement ) ;
    public final AS3Parser.forEachStatement_return forEachStatement() throws RecognitionException {
        AS3Parser.forEachStatement_return retval = new AS3Parser.forEachStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token f=null;
        Token EACH183=null;
        Token LPAREN184=null;
        Token RPAREN186=null;
        AS3Parser.forInClause_return forInClause185 = null;

        AS3Parser.statement_return statement187 = null;


        LinkedListTree f_tree=null;
        LinkedListTree EACH183_tree=null;
        LinkedListTree LPAREN184_tree=null;
        LinkedListTree RPAREN186_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EACH=new RewriteRuleTokenStream(adaptor,"token EACH");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_forInClause=new RewriteRuleSubtreeStream(adaptor,"rule forInClause");
        try { dbg.enterRule(getGrammarFileName(), "forEachStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(566, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:567:2: (f= FOR EACH LPAREN forInClause RPAREN statement -> ^( FOR_EACH[$f] forInClause statement ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:567:4: f= FOR EACH LPAREN forInClause RPAREN statement
            {
            dbg.location(567,5);
            f=(Token)match(input,FOR,FOLLOW_FOR_in_forEachStatement2043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(f);

            dbg.location(567,10);
            EACH183=(Token)match(input,EACH,FOLLOW_EACH_in_forEachStatement2045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EACH.add(EACH183);

            dbg.location(568,3);
            LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forEachStatement2049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);

            dbg.location(569,3);
            pushFollow(FOLLOW_forInClause_in_forEachStatement2053);
            forInClause185=forInClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forInClause.add(forInClause185.getTree());
            dbg.location(570,3);
            RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forEachStatement2057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);

            dbg.location(571,3);
            pushFollow(FOLLOW_statement_in_forEachStatement2061);
            statement187=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement187.getTree());


            // AST REWRITE
            // elements: statement, forInClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 572:3: -> ^( FOR_EACH[$f] forInClause statement )
            {
                dbg.location(572,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:572:6: ^( FOR_EACH[$f] forInClause statement )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(572,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FOR_EACH, f), root_1);

                dbg.location(572,21);
                adaptor.addChild(root_1, stream_forInClause.nextTree());
                dbg.location(572,33);
                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(573, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forEachStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forEachStatement"

    public static class forStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:575:1: forStatement : f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) ;
    public final AS3Parser.forStatement_return forStatement() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forStatement_return retval = new AS3Parser.forStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token f=null;
        Token LPAREN188=null;
        Token RPAREN190=null;
        Token RPAREN193=null;
        AS3Parser.forInClause_return forInClause189 = null;

        AS3Parser.statement_return statement191 = null;

        AS3Parser.traditionalForClause_return traditionalForClause192 = null;

        AS3Parser.statement_return statement194 = null;


        LinkedListTree f_tree=null;
        LinkedListTree LPAREN188_tree=null;
        LinkedListTree RPAREN190_tree=null;
        LinkedListTree RPAREN193_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_traditionalForClause=new RewriteRuleSubtreeStream(adaptor,"rule traditionalForClause");
        RewriteRuleSubtreeStream stream_forInClause=new RewriteRuleSubtreeStream(adaptor,"rule forInClause");

        	((InOperator_scope)InOperator_stack.peek()).allowed = false;

        try { dbg.enterRule(getGrammarFileName(), "forStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(575, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:580:2: (f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:580:4: f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
            {
            dbg.location(580,5);
            f=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement2097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(f);

            dbg.location(581,3);
            LPAREN188=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forStatement2101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN188);

            dbg.location(582,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:582:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
            int alt42=2;
            try { dbg.enterSubRule(42);
            try { dbg.enterDecision(42);

            try {
                isCyclicDecision = true;
                alt42 = dfa42.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(42);}

            switch (alt42) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:582:5: ( forInClauseDecl IN )=> forInClause RPAREN statement
                    {
                    dbg.location(582,27);
                    pushFollow(FOLLOW_forInClause_in_forStatement2113);
                    forInClause189=forInClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forInClause.add(forInClause189.getTree());
                    dbg.location(582,39);
                    RPAREN190=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forStatement2115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN190);

                    dbg.location(582,46);
                    pushFollow(FOLLOW_statement_in_forStatement2117);
                    statement191=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement191.getTree());


                    // AST REWRITE
                    // elements: forInClause, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 583:4: -> ^( FOR_IN[$f] forInClause statement )
                    {
                        dbg.location(583,7);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:583:7: ^( FOR_IN[$f] forInClause statement )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(583,9);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FOR_IN, f), root_1);

                        dbg.location(583,20);
                        adaptor.addChild(root_1, stream_forInClause.nextTree());
                        dbg.location(583,32);
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:585:5: traditionalForClause RPAREN statement
                    {
                    dbg.location(585,5);
                    pushFollow(FOLLOW_traditionalForClause_in_forStatement2138);
                    traditionalForClause192=traditionalForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_traditionalForClause.add(traditionalForClause192.getTree());
                    dbg.location(585,26);
                    RPAREN193=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forStatement2140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN193);

                    dbg.location(585,33);
                    pushFollow(FOLLOW_statement_in_forStatement2142);
                    statement194=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement194.getTree());


                    // AST REWRITE
                    // elements: statement, f, traditionalForClause
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 586:4: -> ^( $f traditionalForClause statement )
                    {
                        dbg.location(586,7);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:586:7: ^( $f traditionalForClause statement )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(586,9);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_f.nextNode(), root_1);

                        dbg.location(586,12);
                        adaptor.addChild(root_1, stream_traditionalForClause.nextTree());
                        dbg.location(586,33);
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            } finally {dbg.exitSubRule(42);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(588, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forStatement"

    public static class traditionalForClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "traditionalForClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:590:1: traditionalForClause : a= forInit SEMI b= forCond SEMI c= forIter ;
    public final AS3Parser.traditionalForClause_return traditionalForClause() throws RecognitionException {
        AS3Parser.traditionalForClause_return retval = new AS3Parser.traditionalForClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token SEMI195=null;
        Token SEMI196=null;
        AS3Parser.forInit_return a = null;

        AS3Parser.forCond_return b = null;

        AS3Parser.forIter_return c = null;


        LinkedListTree SEMI195_tree=null;
        LinkedListTree SEMI196_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "traditionalForClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(590, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:591:2: (a= forInit SEMI b= forCond SEMI c= forIter )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:591:4: a= forInit SEMI b= forCond SEMI c= forIter
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(591,5);
            pushFollow(FOLLOW_forInit_in_traditionalForClause2173);
            a=forInit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            dbg.location(591,14);
            if ( state.backtracking==0 ) {
              placeholder((a!=null?((LinkedListTree)a.tree):null));
            }
            dbg.location(591,42);
            SEMI195=(Token)match(input,SEMI,FOLLOW_SEMI_in_traditionalForClause2177); if (state.failed) return retval;
            dbg.location(592,4);
            pushFollow(FOLLOW_forCond_in_traditionalForClause2185);
            b=forCond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());
            dbg.location(592,13);
            if ( state.backtracking==0 ) {
              placeholder((b!=null?((LinkedListTree)b.tree):null));
            }
            dbg.location(592,41);
            SEMI196=(Token)match(input,SEMI,FOLLOW_SEMI_in_traditionalForClause2189); if (state.failed) return retval;
            dbg.location(593,4);
            pushFollow(FOLLOW_forIter_in_traditionalForClause2197);
            c=forIter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            dbg.location(593,13);
            if ( state.backtracking==0 ) {
              placeholder((c!=null?((LinkedListTree)c.tree):null));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(594, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "traditionalForClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "traditionalForClause"

    public static class forInClause_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInClause"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:596:1: forInClause : forInClauseDecl IN forInClauseTail ;
    public final AS3Parser.forInClause_return forInClause() throws RecognitionException {
        AS3Parser.forInClause_return retval = new AS3Parser.forInClause_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IN198=null;
        AS3Parser.forInClauseDecl_return forInClauseDecl197 = null;

        AS3Parser.forInClauseTail_return forInClauseTail199 = null;


        LinkedListTree IN198_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "forInClause");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(596, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:597:2: ( forInClauseDecl IN forInClauseTail )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:597:4: forInClauseDecl IN forInClauseTail
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(597,4);
            pushFollow(FOLLOW_forInClauseDecl_in_forInClause2212);
            forInClauseDecl197=forInClauseDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInClauseDecl197.getTree());
            dbg.location(597,22);
            IN198=(Token)match(input,IN,FOLLOW_IN_in_forInClause2214); if (state.failed) return retval;
            dbg.location(597,24);
            pushFollow(FOLLOW_forInClauseTail_in_forInClause2217);
            forInClauseTail199=forInClauseTail();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, forInClauseTail199.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(598, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forInClause");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forInClause"

    public static class forInClauseDecl_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInClauseDecl"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:600:1: forInClauseDecl : ( declaration | ident );
    public final AS3Parser.forInClauseDecl_return forInClauseDecl() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forInClauseDecl_return retval = new AS3Parser.forInClauseDecl_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.declaration_return declaration200 = null;

        AS3Parser.ident_return ident201 = null;




        	((InOperator_scope)InOperator_stack.peek()).allowed = false;

        try { dbg.enterRule(getGrammarFileName(), "forInClauseDecl");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(600, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:605:2: ( declaration | ident )
            int alt43=2;
            try { dbg.enterDecision(43);

            try {
                isCyclicDecision = true;
                alt43 = dfa43.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(43);}

            switch (alt43) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:605:4: declaration
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(605,4);
                    pushFollow(FOLLOW_declaration_in_forInClauseDecl2238);
                    declaration200=declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, declaration200.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:605:18: ident
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(605,18);
                    pushFollow(FOLLOW_ident_in_forInClauseDecl2242);
                    ident201=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident201.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(606, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forInClauseDecl");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forInClauseDecl"

    public static class forInClauseTail_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInClauseTail"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:609:1: forInClauseTail : expressionList ;
    public final AS3Parser.forInClauseTail_return forInClauseTail() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forInClauseTail_return retval = new AS3Parser.forInClauseTail_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.expressionList_return expressionList202 = null;




        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "forInClauseTail");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(609, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:614:2: ( expressionList )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:614:4: expressionList
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(614,4);
            pushFollow(FOLLOW_expressionList_in_forInClauseTail2264);
            expressionList202=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList202.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(615, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forInClauseTail");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forInClauseTail"

    public static class forInit_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:618:1: forInit : ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) ;
    public final AS3Parser.forInit_return forInit() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forInit_return retval = new AS3Parser.forInit_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.declaration_return declaration203 = null;

        AS3Parser.expressionList_return expressionList204 = null;


        RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

        	((InOperator_scope)InOperator_stack.peek()).allowed = false;

        try { dbg.enterRule(getGrammarFileName(), "forInit");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(618, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:623:2: ( ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:623:4: ( declaration | expressionList )?
            {
            dbg.location(623,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:623:4: ( declaration | expressionList )?
            int alt44=3;
            try { dbg.enterSubRule(44);
            try { dbg.enterDecision(44);

            try {
                isCyclicDecision = true;
                alt44 = dfa44.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(44);}

            switch (alt44) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:623:5: declaration
                    {
                    dbg.location(623,5);
                    pushFollow(FOLLOW_declaration_in_forInit2288);
                    declaration203=declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declaration.add(declaration203.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:623:19: expressionList
                    {
                    dbg.location(623,19);
                    pushFollow(FOLLOW_expressionList_in_forInit2292);
                    expressionList204=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList204.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(44);}



            // AST REWRITE
            // elements: declaration, expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 624:3: -> ^( FOR_INIT ( declaration )? ( expressionList )? )
            {
                dbg.location(624,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:624:6: ^( FOR_INIT ( declaration )? ( expressionList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(624,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_1);

                dbg.location(624,17);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:624:17: ( declaration )?
                if ( stream_declaration.hasNext() ) {
                    dbg.location(624,17);
                    adaptor.addChild(root_1, stream_declaration.nextTree());

                }
                stream_declaration.reset();
                dbg.location(624,30);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:624:30: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    dbg.location(624,30);
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(625, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forInit");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forInit"

    public static class forCond_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forCond"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:627:1: forCond : ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) ;
    public final AS3Parser.forCond_return forCond() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forCond_return retval = new AS3Parser.forCond_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.expressionList_return expressionList205 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "forCond");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(627, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:632:2: ( ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:632:4: ( expressionList )?
            {
            dbg.location(632,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:632:4: ( expressionList )?
            int alt45=2;
            try { dbg.enterSubRule(45);
            try { dbg.enterDecision(45);

            try {
                isCyclicDecision = true;
                alt45 = dfa45.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(45);}

            switch (alt45) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:632:4: expressionList
                    {
                    dbg.location(632,4);
                    pushFollow(FOLLOW_expressionList_in_forCond2330);
                    expressionList205=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList205.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(45);}



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 633:3: -> ^( FOR_CONDITION ( expressionList )? )
            {
                dbg.location(633,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:633:6: ^( FOR_CONDITION ( expressionList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(633,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                dbg.location(633,22);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:633:22: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    dbg.location(633,22);
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(634, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forCond");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forCond"

    public static class forIter_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forIter"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:636:1: forIter : ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) ;
    public final AS3Parser.forIter_return forIter() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.forIter_return retval = new AS3Parser.forIter_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.expressionList_return expressionList206 = null;


        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "forIter");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(636, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:641:2: ( ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:641:4: ( expressionList )?
            {
            dbg.location(641,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:641:4: ( expressionList )?
            int alt46=2;
            try { dbg.enterSubRule(46);
            try { dbg.enterDecision(46);

            try {
                isCyclicDecision = true;
                alt46 = dfa46.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(46);}

            switch (alt46) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:641:4: expressionList
                    {
                    dbg.location(641,4);
                    pushFollow(FOLLOW_expressionList_in_forIter2363);
                    expressionList206=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList206.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(46);}



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 642:3: -> ^( FOR_ITERATOR ( expressionList )? )
            {
                dbg.location(642,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:642:6: ^( FOR_ITERATOR ( expressionList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(642,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FOR_ITERATOR, "FOR_ITERATOR"), root_1);

                dbg.location(642,21);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:642:21: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    dbg.location(642,21);
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(643, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "forIter");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "forIter"

    public static class whileStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whileStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:645:1: whileStatement : WHILE condition statement ;
    public final AS3Parser.whileStatement_return whileStatement() throws RecognitionException {
        AS3Parser.whileStatement_return retval = new AS3Parser.whileStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token WHILE207=null;
        AS3Parser.condition_return condition208 = null;

        AS3Parser.statement_return statement209 = null;


        LinkedListTree WHILE207_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "whileStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(645, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:646:2: ( WHILE condition statement )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:646:4: WHILE condition statement
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(646,9);
            WHILE207=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement2386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE207_tree = (LinkedListTree)adaptor.create(WHILE207);
            root_0 = (LinkedListTree)adaptor.becomeRoot(WHILE207_tree, root_0);
            }
            dbg.location(646,11);
            pushFollow(FOLLOW_condition_in_whileStatement2389);
            condition208=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition208.getTree());
            dbg.location(646,21);
            pushFollow(FOLLOW_statement_in_whileStatement2391);
            statement209=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement209.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(647, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "whileStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "whileStatement"

    public static class doWhileStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doWhileStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:649:1: doWhileStatement : DO statement WHILE condition semi ;
    public final AS3Parser.doWhileStatement_return doWhileStatement() throws RecognitionException {
        AS3Parser.doWhileStatement_return retval = new AS3Parser.doWhileStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DO210=null;
        Token WHILE212=null;
        AS3Parser.statement_return statement211 = null;

        AS3Parser.condition_return condition213 = null;

        AS3Parser.semi_return semi214 = null;


        LinkedListTree DO210_tree=null;
        LinkedListTree WHILE212_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "doWhileStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(649, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:650:2: ( DO statement WHILE condition semi )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:650:4: DO statement WHILE condition semi
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(650,6);
            DO210=(Token)match(input,DO,FOLLOW_DO_in_doWhileStatement2402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DO210_tree = (LinkedListTree)adaptor.create(DO210);
            root_0 = (LinkedListTree)adaptor.becomeRoot(DO210_tree, root_0);
            }
            dbg.location(650,8);
            pushFollow(FOLLOW_statement_in_doWhileStatement2405);
            statement211=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement211.getTree());
            dbg.location(650,23);
            WHILE212=(Token)match(input,WHILE,FOLLOW_WHILE_in_doWhileStatement2407); if (state.failed) return retval;
            dbg.location(650,25);
            pushFollow(FOLLOW_condition_in_doWhileStatement2410);
            condition213=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition213.getTree());
            dbg.location(650,35);
            pushFollow(FOLLOW_semi_in_doWhileStatement2412);
            semi214=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, semi214.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(651, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "doWhileStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "doWhileStatement"

    public static class withStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "withStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:653:1: withStatement : WITH condition statement ;
    public final AS3Parser.withStatement_return withStatement() throws RecognitionException {
        AS3Parser.withStatement_return retval = new AS3Parser.withStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token WITH215=null;
        AS3Parser.condition_return condition216 = null;

        AS3Parser.statement_return statement217 = null;


        LinkedListTree WITH215_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "withStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(653, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:654:2: ( WITH condition statement )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:654:4: WITH condition statement
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(654,8);
            WITH215=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement2423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WITH215_tree = (LinkedListTree)adaptor.create(WITH215);
            root_0 = (LinkedListTree)adaptor.becomeRoot(WITH215_tree, root_0);
            }
            dbg.location(654,10);
            pushFollow(FOLLOW_condition_in_withStatement2426);
            condition216=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition216.getTree());
            dbg.location(654,20);
            pushFollow(FOLLOW_statement_in_withStatement2428);
            statement217=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement217.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(655, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "withStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "withStatement"

    public static class defaultXMLNamespaceStatement_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultXMLNamespaceStatement"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:657:1: defaultXMLNamespaceStatement : DEFAULT XML NAMESPACE ASSIGN expression semi -> ^( DEFAULT_XML_NAMESPACE expression ) ;
    public final AS3Parser.defaultXMLNamespaceStatement_return defaultXMLNamespaceStatement() throws RecognitionException {
        AS3Parser.defaultXMLNamespaceStatement_return retval = new AS3Parser.defaultXMLNamespaceStatement_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DEFAULT218=null;
        Token XML219=null;
        Token NAMESPACE220=null;
        Token ASSIGN221=null;
        AS3Parser.expression_return expression222 = null;

        AS3Parser.semi_return semi223 = null;


        LinkedListTree DEFAULT218_tree=null;
        LinkedListTree XML219_tree=null;
        LinkedListTree NAMESPACE220_tree=null;
        LinkedListTree ASSIGN221_tree=null;
        RewriteRuleTokenStream stream_XML=new RewriteRuleTokenStream(adaptor,"token XML");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_semi=new RewriteRuleSubtreeStream(adaptor,"rule semi");
        try { dbg.enterRule(getGrammarFileName(), "defaultXMLNamespaceStatement");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(657, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:658:2: ( DEFAULT XML NAMESPACE ASSIGN expression semi -> ^( DEFAULT_XML_NAMESPACE expression ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:658:4: DEFAULT XML NAMESPACE ASSIGN expression semi
            {
            dbg.location(658,4);
            DEFAULT218=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultXMLNamespaceStatement2439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFAULT.add(DEFAULT218);

            dbg.location(658,12);
            XML219=(Token)match(input,XML,FOLLOW_XML_in_defaultXMLNamespaceStatement2441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XML.add(XML219);

            dbg.location(658,16);
            NAMESPACE220=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultXMLNamespaceStatement2443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(NAMESPACE220);

            dbg.location(658,26);
            ASSIGN221=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_defaultXMLNamespaceStatement2445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN221);

            dbg.location(658,33);
            pushFollow(FOLLOW_expression_in_defaultXMLNamespaceStatement2447);
            expression222=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression222.getTree());
            dbg.location(658,44);
            pushFollow(FOLLOW_semi_in_defaultXMLNamespaceStatement2449);
            semi223=semi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semi.add(semi223.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 659:3: -> ^( DEFAULT_XML_NAMESPACE expression )
            {
                dbg.location(659,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:659:6: ^( DEFAULT_XML_NAMESPACE expression )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(659,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(DEFAULT_XML_NAMESPACE, "DEFAULT_XML_NAMESPACE"), root_1);

                dbg.location(659,30);
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(660, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "defaultXMLNamespaceStatement");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "defaultXMLNamespaceStatement"

    public static class typeExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:662:1: typeExpression : c= COLON typeIdent -> typeIdent ;
    public final AS3Parser.typeExpression_return typeExpression() throws RecognitionException {
        AS3Parser.typeExpression_return retval = new AS3Parser.typeExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token c=null;
        AS3Parser.typeIdent_return typeIdent224 = null;


        LinkedListTree c_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        try { dbg.enterRule(getGrammarFileName(), "typeExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(662, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:663:2: (c= COLON typeIdent -> typeIdent )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:663:4: c= COLON typeIdent
            {
            dbg.location(663,5);
            c=(Token)match(input,COLON,FOLLOW_COLON_in_typeExpression2472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(c);

            dbg.location(665,3);
            pushFollow(FOLLOW_typeIdent_in_typeExpression2479);
            typeIdent224=typeIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeIdent.add(typeIdent224.getTree());


            // AST REWRITE
            // elements: typeIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 665:13: -> typeIdent
            {
                dbg.location(665,16);
                adaptor.addChild(root_0, stream_typeIdent.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(666, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "typeExpression"

    public static class typeIdent_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeIdent"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:668:1: typeIdent : (i= identifier ( DOT LT t= typeIdent GT )? -> ^( TYPE_SPEC $i ( $t)? ) | ( VOID | STAR | FUNCTION ) -> ^( TYPE_SPEC ( VOID )? ( STAR )? ( FUNCTION )? ) );
    public final AS3Parser.typeIdent_return typeIdent() throws RecognitionException {
        AS3Parser.typeIdent_return retval = new AS3Parser.typeIdent_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DOT225=null;
        Token LT226=null;
        Token GT227=null;
        Token VOID228=null;
        Token STAR229=null;
        Token FUNCTION230=null;
        AS3Parser.identifier_return i = null;

        AS3Parser.typeIdent_return t = null;


        LinkedListTree DOT225_tree=null;
        LinkedListTree LT226_tree=null;
        LinkedListTree GT227_tree=null;
        LinkedListTree VOID228_tree=null;
        LinkedListTree STAR229_tree=null;
        LinkedListTree FUNCTION230_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_typeIdent=new RewriteRuleSubtreeStream(adaptor,"rule typeIdent");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try { dbg.enterRule(getGrammarFileName(), "typeIdent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(668, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:669:2: (i= identifier ( DOT LT t= typeIdent GT )? -> ^( TYPE_SPEC $i ( $t)? ) | ( VOID | STAR | FUNCTION ) -> ^( TYPE_SPEC ( VOID )? ( STAR )? ( FUNCTION )? ) )
            int alt49=2;
            try { dbg.enterDecision(49);

            try {
                isCyclicDecision = true;
                alt49 = dfa49.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(49);}

            switch (alt49) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:670:3: i= identifier ( DOT LT t= typeIdent GT )?
                    {
                    dbg.location(670,4);
                    pushFollow(FOLLOW_identifier_in_typeIdent2499);
                    i=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(i.getTree());
                    dbg.location(670,16);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:670:16: ( DOT LT t= typeIdent GT )?
                    int alt47=2;
                    try { dbg.enterSubRule(47);
                    try { dbg.enterDecision(47);

                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==DOT) ) {
                        alt47=1;
                    }
                    } finally {dbg.exitDecision(47);}

                    switch (alt47) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:670:17: DOT LT t= typeIdent GT
                            {
                            dbg.location(670,17);
                            DOT225=(Token)match(input,DOT,FOLLOW_DOT_in_typeIdent2502); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT225);

                            dbg.location(670,21);
                            LT226=(Token)match(input,LT,FOLLOW_LT_in_typeIdent2504); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LT.add(LT226);

                            dbg.location(670,25);
                            pushFollow(FOLLOW_typeIdent_in_typeIdent2508);
                            t=typeIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeIdent.add(t.getTree());
                            dbg.location(670,36);
                            GT227=(Token)match(input,GT,FOLLOW_GT_in_typeIdent2510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GT.add(GT227);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(47);}



                    // AST REWRITE
                    // elements: i, t
                    // token labels: 
                    // rule labels: retval, t, i
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 670:41: -> ^( TYPE_SPEC $i ( $t)? )
                    {
                        dbg.location(670,44);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:670:44: ^( TYPE_SPEC $i ( $t)? )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(670,46);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(TYPE_SPEC, "TYPE_SPEC"), root_1);

                        dbg.location(670,56);
                        adaptor.addChild(root_1, stream_i.nextTree());
                        dbg.location(670,59);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:670:59: ( $t)?
                        if ( stream_t.hasNext() ) {
                            dbg.location(670,59);
                            adaptor.addChild(root_1, stream_t.nextTree());

                        }
                        stream_t.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:3: ( VOID | STAR | FUNCTION )
                    {
                    dbg.location(672,3);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:3: ( VOID | STAR | FUNCTION )
                    int alt48=3;
                    try { dbg.enterSubRule(48);
                    try { dbg.enterDecision(48);

                    switch ( input.LA(1) ) {
                    case VOID:
                        {
                        alt48=1;
                        }
                        break;
                    case STAR:
                        {
                        alt48=2;
                        }
                        break;
                    case FUNCTION:
                        {
                        alt48=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 48, 0, input);

                        dbg.recognitionException(nvae);
                        throw nvae;
                    }

                    } finally {dbg.exitDecision(48);}

                    switch (alt48) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:4: VOID
                            {
                            dbg.location(672,4);
                            VOID228=(Token)match(input,VOID,FOLLOW_VOID_in_typeIdent2534); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_VOID.add(VOID228);


                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:11: STAR
                            {
                            dbg.location(672,11);
                            STAR229=(Token)match(input,STAR,FOLLOW_STAR_in_typeIdent2538); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(STAR229);


                            }
                            break;
                        case 3 :
                            dbg.enterAlt(3);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:18: FUNCTION
                            {
                            dbg.location(672,18);
                            FUNCTION230=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_typeIdent2542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION230);


                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(48);}



                    // AST REWRITE
                    // elements: VOID, FUNCTION, STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 672:28: -> ^( TYPE_SPEC ( VOID )? ( STAR )? ( FUNCTION )? )
                    {
                        dbg.location(672,31);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:31: ^( TYPE_SPEC ( VOID )? ( STAR )? ( FUNCTION )? )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(672,33);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(TYPE_SPEC, "TYPE_SPEC"), root_1);

                        dbg.location(672,43);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:43: ( VOID )?
                        if ( stream_VOID.hasNext() ) {
                            dbg.location(672,43);
                            adaptor.addChild(root_1, stream_VOID.nextNode());

                        }
                        stream_VOID.reset();
                        dbg.location(672,49);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:49: ( STAR )?
                        if ( stream_STAR.hasNext() ) {
                            dbg.location(672,49);
                            adaptor.addChild(root_1, stream_STAR.nextNode());

                        }
                        stream_STAR.reset();
                        dbg.location(672,55);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:672:55: ( FUNCTION )?
                        if ( stream_FUNCTION.hasNext() ) {
                            dbg.location(672,55);
                            adaptor.addChild(root_1, stream_FUNCTION.nextNode());

                        }
                        stream_FUNCTION.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(673, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "typeIdent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "typeIdent"

    public static class identifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:675:1: identifier : ( qualifiedIdent -> qualifiedIdent ) ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)* -> ^( IDENTIFIER $identifier) ;
    public final AS3Parser.identifier_return identifier() throws RecognitionException {
        AS3Parser.identifier_return retval = new AS3Parser.identifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.propOrIdent_return poi = null;

        AS3Parser.qualifiedIdent_return qualifiedIdent231 = null;


        RewriteRuleSubtreeStream stream_propOrIdent=new RewriteRuleSubtreeStream(adaptor,"rule propOrIdent");
        RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try { dbg.enterRule(getGrammarFileName(), "identifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(675, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:676:2: ( ( qualifiedIdent -> qualifiedIdent ) ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)* -> ^( IDENTIFIER $identifier) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:676:4: ( qualifiedIdent -> qualifiedIdent ) ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)*
            {
            dbg.location(676,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:676:4: ( qualifiedIdent -> qualifiedIdent )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:676:7: qualifiedIdent
            {
            dbg.location(676,7);
            pushFollow(FOLLOW_qualifiedIdent_in_identifier2573);
            qualifiedIdent231=qualifiedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent231.getTree());


            // AST REWRITE
            // elements: qualifiedIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 676:22: -> qualifiedIdent
            {
                dbg.location(676,25);
                adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());

            }

            retval.tree = root_0;}
            }

            dbg.location(678,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:678:3: ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)*
            try { dbg.enterSubRule(50);

            loop50:
            do {
                int alt50=2;
                try { dbg.enterDecision(50);

                try {
                    isCyclicDecision = true;
                    alt50 = dfa50.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(50);}

                switch (alt50) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:679:6: poi= propOrIdent[root_0, retval.start]
            	    {
            	    dbg.location(679,9);
            	    pushFollow(FOLLOW_propOrIdent_in_identifier2601);
            	    poi=propOrIdent(root_0, retval.start);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propOrIdent.add(poi.getTree());


            	    // AST REWRITE
            	    // elements: poi
            	    // token labels: 
            	    // rule labels: poi, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_poi=new RewriteRuleSubtreeStream(adaptor,"rule poi",poi!=null?poi.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 679:44: -> $poi
            	    {
            	        dbg.location(679,47);
            	        adaptor.addChild(root_0, stream_poi.nextTree());

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);
            } finally {dbg.exitSubRule(50);}



            // AST REWRITE
            // elements: identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 681:3: -> ^( IDENTIFIER $identifier)
            {
                dbg.location(681,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:681:6: ^( IDENTIFIER $identifier)
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(681,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(IDENTIFIER, "IDENTIFIER"), root_1);

                dbg.location(681,19);
                adaptor.addChild(root_1, stream_retval.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(682, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "identifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "identifier"

    public static class propertyIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:684:1: propertyIdentifier : ( STAR | ident );
    public final AS3Parser.propertyIdentifier_return propertyIdentifier() throws RecognitionException {
        AS3Parser.propertyIdentifier_return retval = new AS3Parser.propertyIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token STAR232=null;
        AS3Parser.ident_return ident233 = null;


        LinkedListTree STAR232_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "propertyIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(684, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:685:2: ( STAR | ident )
            int alt51=2;
            try { dbg.enterDecision(51);

            try {
                isCyclicDecision = true;
                alt51 = dfa51.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(51);}

            switch (alt51) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:685:4: STAR
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(685,4);
                    STAR232=(Token)match(input,STAR,FOLLOW_STAR_in_propertyIdentifier2634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR232_tree = (LinkedListTree)adaptor.create(STAR232);
                    adaptor.addChild(root_0, STAR232_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:686:4: ident
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(686,4);
                    pushFollow(FOLLOW_ident_in_propertyIdentifier2639);
                    ident233=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident233.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(687, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propertyIdentifier"

    public static class qualifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:689:1: qualifier : ( propertyIdentifier | reservedNamespace ) ;
    public final AS3Parser.qualifier_return qualifier() throws RecognitionException {
        AS3Parser.qualifier_return retval = new AS3Parser.qualifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.propertyIdentifier_return propertyIdentifier234 = null;

        AS3Parser.reservedNamespace_return reservedNamespace235 = null;



        try { dbg.enterRule(getGrammarFileName(), "qualifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(689, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:690:2: ( ( propertyIdentifier | reservedNamespace ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:690:4: ( propertyIdentifier | reservedNamespace )
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(690,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:690:4: ( propertyIdentifier | reservedNamespace )
            int alt52=2;
            try { dbg.enterSubRule(52);
            try { dbg.enterDecision(52);

            try {
                isCyclicDecision = true;
                alt52 = dfa52.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(52);}

            switch (alt52) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:690:6: propertyIdentifier
                    {
                    dbg.location(690,6);
                    pushFollow(FOLLOW_propertyIdentifier_in_qualifier2652);
                    propertyIdentifier234=propertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyIdentifier234.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:690:27: reservedNamespace
                    {
                    dbg.location(690,27);
                    pushFollow(FOLLOW_reservedNamespace_in_qualifier2656);
                    reservedNamespace235=reservedNamespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reservedNamespace235.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(52);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(691, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qualifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qualifier"

    public static class simpleQualifiedIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleQualifiedIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:693:1: simpleQualifiedIdentifier : ( propertyIdentifier | qualifier DBL_COLON ( propertyIdentifier | brackets ) );
    public final AS3Parser.simpleQualifiedIdentifier_return simpleQualifiedIdentifier() throws RecognitionException {
        AS3Parser.simpleQualifiedIdentifier_return retval = new AS3Parser.simpleQualifiedIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DBL_COLON238=null;
        AS3Parser.propertyIdentifier_return propertyIdentifier236 = null;

        AS3Parser.qualifier_return qualifier237 = null;

        AS3Parser.propertyIdentifier_return propertyIdentifier239 = null;

        AS3Parser.brackets_return brackets240 = null;


        LinkedListTree DBL_COLON238_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "simpleQualifiedIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(693, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:694:2: ( propertyIdentifier | qualifier DBL_COLON ( propertyIdentifier | brackets ) )
            int alt54=2;
            try { dbg.enterDecision(54);

            try {
                isCyclicDecision = true;
                alt54 = dfa54.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(54);}

            switch (alt54) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:694:4: propertyIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(694,4);
                    pushFollow(FOLLOW_propertyIdentifier_in_simpleQualifiedIdentifier2669);
                    propertyIdentifier236=propertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyIdentifier236.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:695:4: qualifier DBL_COLON ( propertyIdentifier | brackets )
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(695,4);
                    pushFollow(FOLLOW_qualifier_in_simpleQualifiedIdentifier2674);
                    qualifier237=qualifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifier237.getTree());
                    dbg.location(695,23);
                    DBL_COLON238=(Token)match(input,DBL_COLON,FOLLOW_DBL_COLON_in_simpleQualifiedIdentifier2676); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBL_COLON238_tree = (LinkedListTree)adaptor.create(DBL_COLON238);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(DBL_COLON238_tree, root_0);
                    }
                    dbg.location(696,3);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:696:3: ( propertyIdentifier | brackets )
                    int alt53=2;
                    try { dbg.enterSubRule(53);
                    try { dbg.enterDecision(53);

                    try {
                        isCyclicDecision = true;
                        alt53 = dfa53.predict(input);
                    }
                    catch (NoViableAltException nvae) {
                        dbg.recognitionException(nvae);
                        throw nvae;
                    }
                    } finally {dbg.exitDecision(53);}

                    switch (alt53) {
                        case 1 :
                            dbg.enterAlt(1);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:696:5: propertyIdentifier
                            {
                            dbg.location(696,5);
                            pushFollow(FOLLOW_propertyIdentifier_in_simpleQualifiedIdentifier2683);
                            propertyIdentifier239=propertyIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyIdentifier239.getTree());

                            }
                            break;
                        case 2 :
                            dbg.enterAlt(2);

                            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:697:6: brackets
                            {
                            dbg.location(697,6);
                            pushFollow(FOLLOW_brackets_in_simpleQualifiedIdentifier2690);
                            brackets240=brackets();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets240.getTree());

                            }
                            break;

                    }
                    } finally {dbg.exitSubRule(53);}


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(699, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "simpleQualifiedIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "simpleQualifiedIdentifier"

    public static class expressionQualifiedIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifiedIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:701:1: expressionQualifiedIdentifier : encapsulatedExpression DBL_COLON ( propertyIdentifier | brackets ) ;
    public final AS3Parser.expressionQualifiedIdentifier_return expressionQualifiedIdentifier() throws RecognitionException {
        AS3Parser.expressionQualifiedIdentifier_return retval = new AS3Parser.expressionQualifiedIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DBL_COLON242=null;
        AS3Parser.encapsulatedExpression_return encapsulatedExpression241 = null;

        AS3Parser.propertyIdentifier_return propertyIdentifier243 = null;

        AS3Parser.brackets_return brackets244 = null;


        LinkedListTree DBL_COLON242_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "expressionQualifiedIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(701, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:702:2: ( encapsulatedExpression DBL_COLON ( propertyIdentifier | brackets ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:702:4: encapsulatedExpression DBL_COLON ( propertyIdentifier | brackets )
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(702,4);
            pushFollow(FOLLOW_encapsulatedExpression_in_expressionQualifiedIdentifier2705);
            encapsulatedExpression241=encapsulatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, encapsulatedExpression241.getTree());
            dbg.location(702,36);
            DBL_COLON242=(Token)match(input,DBL_COLON,FOLLOW_DBL_COLON_in_expressionQualifiedIdentifier2707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DBL_COLON242_tree = (LinkedListTree)adaptor.create(DBL_COLON242);
            root_0 = (LinkedListTree)adaptor.becomeRoot(DBL_COLON242_tree, root_0);
            }
            dbg.location(703,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:703:3: ( propertyIdentifier | brackets )
            int alt55=2;
            try { dbg.enterSubRule(55);
            try { dbg.enterDecision(55);

            try {
                isCyclicDecision = true;
                alt55 = dfa55.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(55);}

            switch (alt55) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:703:5: propertyIdentifier
                    {
                    dbg.location(703,5);
                    pushFollow(FOLLOW_propertyIdentifier_in_expressionQualifiedIdentifier2714);
                    propertyIdentifier243=propertyIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyIdentifier243.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:704:5: brackets
                    {
                    dbg.location(704,5);
                    pushFollow(FOLLOW_brackets_in_expressionQualifiedIdentifier2720);
                    brackets244=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets244.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(55);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(706, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionQualifiedIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expressionQualifiedIdentifier"

    public static class nonAttributeQualifiedIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonAttributeQualifiedIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:708:1: nonAttributeQualifiedIdentifier : ( simpleQualifiedIdentifier | expressionQualifiedIdentifier );
    public final AS3Parser.nonAttributeQualifiedIdentifier_return nonAttributeQualifiedIdentifier() throws RecognitionException {
        AS3Parser.nonAttributeQualifiedIdentifier_return retval = new AS3Parser.nonAttributeQualifiedIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.simpleQualifiedIdentifier_return simpleQualifiedIdentifier245 = null;

        AS3Parser.expressionQualifiedIdentifier_return expressionQualifiedIdentifier246 = null;



        try { dbg.enterRule(getGrammarFileName(), "nonAttributeQualifiedIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(708, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:709:2: ( simpleQualifiedIdentifier | expressionQualifiedIdentifier )
            int alt56=2;
            try { dbg.enterDecision(56);

            try {
                isCyclicDecision = true;
                alt56 = dfa56.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(56);}

            switch (alt56) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:709:4: simpleQualifiedIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(709,4);
                    pushFollow(FOLLOW_simpleQualifiedIdentifier_in_nonAttributeQualifiedIdentifier2735);
                    simpleQualifiedIdentifier245=simpleQualifiedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleQualifiedIdentifier245.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:710:4: expressionQualifiedIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(710,4);
                    pushFollow(FOLLOW_expressionQualifiedIdentifier_in_nonAttributeQualifiedIdentifier2740);
                    expressionQualifiedIdentifier246=expressionQualifiedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifiedIdentifier246.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(711, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nonAttributeQualifiedIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nonAttributeQualifiedIdentifier"

    public static class qualifiedIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:713:1: qualifiedIdentifier : ( e4xAttributeIdentifier | nonAttributeQualifiedIdentifier );
    public final AS3Parser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        AS3Parser.qualifiedIdentifier_return retval = new AS3Parser.qualifiedIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.e4xAttributeIdentifier_return e4xAttributeIdentifier247 = null;

        AS3Parser.nonAttributeQualifiedIdentifier_return nonAttributeQualifiedIdentifier248 = null;



        try { dbg.enterRule(getGrammarFileName(), "qualifiedIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(713, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:714:2: ( e4xAttributeIdentifier | nonAttributeQualifiedIdentifier )
            int alt57=2;
            try { dbg.enterDecision(57);

            try {
                isCyclicDecision = true;
                alt57 = dfa57.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(57);}

            switch (alt57) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:714:4: e4xAttributeIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(714,4);
                    pushFollow(FOLLOW_e4xAttributeIdentifier_in_qualifiedIdentifier2751);
                    e4xAttributeIdentifier247=e4xAttributeIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e4xAttributeIdentifier247.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:715:4: nonAttributeQualifiedIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(715,4);
                    pushFollow(FOLLOW_nonAttributeQualifiedIdentifier_in_qualifiedIdentifier2756);
                    nonAttributeQualifiedIdentifier248=nonAttributeQualifiedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonAttributeQualifiedIdentifier248.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(716, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qualifiedIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

    public static class qualifiedIdent_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedIdent"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:718:1: qualifiedIdent : ( namespaceName DBL_COLON )? ident ;
    public final AS3Parser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
        AS3Parser.qualifiedIdent_return retval = new AS3Parser.qualifiedIdent_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DBL_COLON250=null;
        AS3Parser.namespaceName_return namespaceName249 = null;

        AS3Parser.ident_return ident251 = null;


        LinkedListTree DBL_COLON250_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "qualifiedIdent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(718, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:719:2: ( ( namespaceName DBL_COLON )? ident )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:719:4: ( namespaceName DBL_COLON )? ident
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(719,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:719:4: ( namespaceName DBL_COLON )?
            int alt58=2;
            try { dbg.enterSubRule(58);
            try { dbg.enterDecision(58);

            try {
                isCyclicDecision = true;
                alt58 = dfa58.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(58);}

            switch (alt58) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:719:5: namespaceName DBL_COLON
                    {
                    dbg.location(719,5);
                    pushFollow(FOLLOW_namespaceName_in_qualifiedIdent2768);
                    namespaceName249=namespaceName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName249.getTree());
                    dbg.location(719,28);
                    DBL_COLON250=(Token)match(input,DBL_COLON,FOLLOW_DBL_COLON_in_qualifiedIdent2770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBL_COLON250_tree = (LinkedListTree)adaptor.create(DBL_COLON250);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(DBL_COLON250_tree, root_0);
                    }

                    }
                    break;

            }
            } finally {dbg.exitSubRule(58);}

            dbg.location(719,32);
            pushFollow(FOLLOW_ident_in_qualifiedIdent2775);
            ident251=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident251.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(720, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "qualifiedIdent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "qualifiedIdent"

    public static class namespaceName_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namespaceName"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:722:1: namespaceName : ( IDENT | reservedNamespace );
    public final AS3Parser.namespaceName_return namespaceName() throws RecognitionException {
        AS3Parser.namespaceName_return retval = new AS3Parser.namespaceName_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IDENT252=null;
        AS3Parser.reservedNamespace_return reservedNamespace253 = null;


        LinkedListTree IDENT252_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "namespaceName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(722, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:723:2: ( IDENT | reservedNamespace )
            int alt59=2;
            try { dbg.enterDecision(59);

            int LA59_0 = input.LA(1);

            if ( (LA59_0==IDENT) ) {
                alt59=1;
            }
            else if ( ((LA59_0>=PUBLIC && LA59_0<=INTERNAL)) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(59);}

            switch (alt59) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:723:4: IDENT
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(723,4);
                    IDENT252=(Token)match(input,IDENT,FOLLOW_IDENT_in_namespaceName2787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT252_tree = (LinkedListTree)adaptor.create(IDENT252);
                    adaptor.addChild(root_0, IDENT252_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:723:12: reservedNamespace
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(723,12);
                    pushFollow(FOLLOW_reservedNamespace_in_namespaceName2791);
                    reservedNamespace253=reservedNamespace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reservedNamespace253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(724, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "namespaceName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "namespaceName"

    public static class reservedNamespace_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reservedNamespace"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:726:1: reservedNamespace : ( PUBLIC | PRIVATE | PROTECTED | INTERNAL );
    public final AS3Parser.reservedNamespace_return reservedNamespace() throws RecognitionException {
        AS3Parser.reservedNamespace_return retval = new AS3Parser.reservedNamespace_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set254=null;

        LinkedListTree set254_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "reservedNamespace");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(726, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:727:2: ( PUBLIC | PRIVATE | PROTECTED | INTERNAL )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(727,2);
            set254=(Token)input.LT(1);
            if ( (input.LA(1)>=PUBLIC && input.LA(1)<=INTERNAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set254));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(731, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "reservedNamespace");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "reservedNamespace"

    public static class identifierStar_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierStar"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:733:1: identifierStar : ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )? -> ^( IDENTIFIER_STAR ( ident )+ ( STAR )? ) ;
    public final AS3Parser.identifierStar_return identifierStar() throws RecognitionException {
        AS3Parser.identifierStar_return retval = new AS3Parser.identifierStar_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DOT256=null;
        Token DOT258=null;
        Token STAR259=null;
        AS3Parser.ident_return ident255 = null;

        AS3Parser.ident_return ident257 = null;


        LinkedListTree DOT256_tree=null;
        LinkedListTree DOT258_tree=null;
        LinkedListTree STAR259_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try { dbg.enterRule(getGrammarFileName(), "identifierStar");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(733, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:734:2: ( ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )? -> ^( IDENTIFIER_STAR ( ident )+ ( STAR )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:734:4: ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )?
            {
            dbg.location(734,4);
            pushFollow(FOLLOW_ident_in_identifierStar2828);
            ident255=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident255.getTree());
            dbg.location(735,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:735:3: ( options {greedy=true; } : DOT ident )*
            try { dbg.enterSubRule(60);

            loop60:
            do {
                int alt60=2;
                try { dbg.enterDecision(60);

                try {
                    isCyclicDecision = true;
                    alt60 = dfa60.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(60);}

                switch (alt60) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:736:5: DOT ident
            	    {
            	    dbg.location(736,5);
            	    DOT256=(Token)match(input,DOT,FOLLOW_DOT_in_identifierStar2845); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT256);

            	    dbg.location(736,9);
            	    pushFollow(FOLLOW_ident_in_identifierStar2847);
            	    ident257=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_ident.add(ident257.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);
            } finally {dbg.exitSubRule(60);}

            dbg.location(738,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:738:3: ( DOT STAR )?
            int alt61=2;
            try { dbg.enterSubRule(61);
            try { dbg.enterDecision(61);

            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT) ) {
                alt61=1;
            }
            } finally {dbg.exitDecision(61);}

            switch (alt61) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:738:5: DOT STAR
                    {
                    dbg.location(738,5);
                    DOT258=(Token)match(input,DOT,FOLLOW_DOT_in_identifierStar2859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT258);

                    dbg.location(738,9);
                    STAR259=(Token)match(input,STAR,FOLLOW_STAR_in_identifierStar2861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR259);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(61);}



            // AST REWRITE
            // elements: STAR, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 740:3: -> ^( IDENTIFIER_STAR ( ident )+ ( STAR )? )
            {
                dbg.location(740,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:740:6: ^( IDENTIFIER_STAR ( ident )+ ( STAR )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(740,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(IDENTIFIER_STAR, "IDENTIFIER_STAR"), root_1);

                dbg.location(740,24);
                if ( !(stream_ident.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_ident.hasNext() ) {
                    dbg.location(740,24);
                    adaptor.addChild(root_1, stream_ident.nextTree());

                }
                stream_ident.reset();
                dbg.location(740,31);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:740:31: ( STAR )?
                if ( stream_STAR.hasNext() ) {
                    dbg.location(740,31);
                    adaptor.addChild(root_1, stream_STAR.nextNode());

                }
                stream_STAR.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(741, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "identifierStar");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "identifierStar"

    public static class annotations_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:743:1: annotations : ( annotation | includeDirective )* -> ^( ANNOTATIONS ( annotation )* ) ;
    public final AS3Parser.annotations_return annotations() throws RecognitionException {
        AS3Parser.annotations_return retval = new AS3Parser.annotations_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.annotation_return annotation260 = null;

        AS3Parser.includeDirective_return includeDirective261 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        RewriteRuleSubtreeStream stream_includeDirective=new RewriteRuleSubtreeStream(adaptor,"rule includeDirective");
        try { dbg.enterRule(getGrammarFileName(), "annotations");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(743, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:744:2: ( ( annotation | includeDirective )* -> ^( ANNOTATIONS ( annotation )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:744:4: ( annotation | includeDirective )*
            {
            dbg.location(744,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:744:4: ( annotation | includeDirective )*
            try { dbg.enterSubRule(62);

            loop62:
            do {
                int alt62=3;
                try { dbg.enterDecision(62);

                try {
                    isCyclicDecision = true;
                    alt62 = dfa62.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(62);}

                switch (alt62) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:744:6: annotation
            	    {
            	    dbg.location(744,6);
            	    pushFollow(FOLLOW_annotation_in_annotations2893);
            	    annotation260=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation260.getTree());

            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:745:5: includeDirective
            	    {
            	    dbg.location(745,5);
            	    pushFollow(FOLLOW_includeDirective_in_annotations2899);
            	    includeDirective261=includeDirective();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_includeDirective.add(includeDirective261.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);
            } finally {dbg.exitSubRule(62);}



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 747:3: -> ^( ANNOTATIONS ( annotation )* )
            {
                dbg.location(747,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:747:6: ^( ANNOTATIONS ( annotation )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(747,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ANNOTATIONS, "ANNOTATIONS"), root_1);

                dbg.location(747,20);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:747:20: ( annotation )*
                while ( stream_annotation.hasNext() ) {
                    dbg.location(747,20);
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(748, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "annotations");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:750:1: annotation : LBRACK ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) ;
    public final AS3Parser.annotation_return annotation() throws RecognitionException {
        AS3Parser.annotation_return retval = new AS3Parser.annotation_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LBRACK262=null;
        Token RBRACK265=null;
        AS3Parser.ident_return ident263 = null;

        AS3Parser.annotationParamList_return annotationParamList264 = null;


        LinkedListTree LBRACK262_tree=null;
        LinkedListTree RBRACK265_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_annotationParamList=new RewriteRuleSubtreeStream(adaptor,"rule annotationParamList");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try { dbg.enterRule(getGrammarFileName(), "annotation");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(750, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:751:2: ( LBRACK ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:751:4: LBRACK ident ( annotationParamList )? RBRACK
            {
            dbg.location(751,4);
            LBRACK262=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_annotation2926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK262);

            dbg.location(752,3);
            pushFollow(FOLLOW_ident_in_annotation2930);
            ident263=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident263.getTree());
            dbg.location(753,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:753:3: ( annotationParamList )?
            int alt63=2;
            try { dbg.enterSubRule(63);
            try { dbg.enterDecision(63);

            int LA63_0 = input.LA(1);

            if ( (LA63_0==LPAREN) ) {
                alt63=1;
            }
            } finally {dbg.exitDecision(63);}

            switch (alt63) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:753:3: annotationParamList
                    {
                    dbg.location(753,3);
                    pushFollow(FOLLOW_annotationParamList_in_annotation2934);
                    annotationParamList264=annotationParamList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationParamList.add(annotationParamList264.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(63);}

            dbg.location(754,3);
            RBRACK265=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_annotation2939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK265);



            // AST REWRITE
            // elements: annotationParamList, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 755:3: -> ^( ANNOTATION ident ( annotationParamList )? )
            {
                dbg.location(755,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:755:6: ^( ANNOTATION ident ( annotationParamList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(755,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                dbg.location(755,19);
                adaptor.addChild(root_1, stream_ident.nextTree());
                dbg.location(755,25);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:755:25: ( annotationParamList )?
                if ( stream_annotationParamList.hasNext() ) {
                    dbg.location(755,25);
                    adaptor.addChild(root_1, stream_annotationParamList.nextTree());

                }
                stream_annotationParamList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(756, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "annotation");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationParamList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationParamList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:758:1: annotationParamList : LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) ;
    public final AS3Parser.annotationParamList_return annotationParamList() throws RecognitionException {
        AS3Parser.annotationParamList_return retval = new AS3Parser.annotationParamList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LPAREN266=null;
        Token COMMA268=null;
        Token RPAREN270=null;
        AS3Parser.annotationParam_return annotationParam267 = null;

        AS3Parser.annotationParam_return annotationParam269 = null;


        LinkedListTree LPAREN266_tree=null;
        LinkedListTree COMMA268_tree=null;
        LinkedListTree RPAREN270_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationParam=new RewriteRuleSubtreeStream(adaptor,"rule annotationParam");
        try { dbg.enterRule(getGrammarFileName(), "annotationParamList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(758, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:759:2: ( LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:760:3: LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN
            {
            dbg.location(760,3);
            LPAREN266=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationParamList2965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN266);

            dbg.location(761,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:761:3: ( annotationParam ( COMMA annotationParam )* )?
            int alt65=2;
            try { dbg.enterSubRule(65);
            try { dbg.enterDecision(65);

            try {
                isCyclicDecision = true;
                alt65 = dfa65.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(65);}

            switch (alt65) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:761:5: annotationParam ( COMMA annotationParam )*
                    {
                    dbg.location(761,5);
                    pushFollow(FOLLOW_annotationParam_in_annotationParamList2971);
                    annotationParam267=annotationParam();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationParam.add(annotationParam267.getTree());
                    dbg.location(762,4);
                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:762:4: ( COMMA annotationParam )*
                    try { dbg.enterSubRule(64);

                    loop64:
                    do {
                        int alt64=2;
                        try { dbg.enterDecision(64);

                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==COMMA) ) {
                            alt64=1;
                        }


                        } finally {dbg.exitDecision(64);}

                        switch (alt64) {
                    	case 1 :
                    	    dbg.enterAlt(1);

                    	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:762:5: COMMA annotationParam
                    	    {
                    	    dbg.location(762,5);
                    	    COMMA268=(Token)match(input,COMMA,FOLLOW_COMMA_in_annotationParamList2977); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA268);

                    	    dbg.location(762,11);
                    	    pushFollow(FOLLOW_annotationParam_in_annotationParamList2979);
                    	    annotationParam269=annotationParam();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_annotationParam.add(annotationParam269.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);
                    } finally {dbg.exitSubRule(64);}


                    }
                    break;

            }
            } finally {dbg.exitSubRule(65);}

            dbg.location(764,3);
            RPAREN270=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationParamList2990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN270);



            // AST REWRITE
            // elements: annotationParam
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 765:3: -> ^( ANNOTATION_PARAMS ( annotationParam )* )
            {
                dbg.location(765,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:765:6: ^( ANNOTATION_PARAMS ( annotationParam )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(765,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ANNOTATION_PARAMS, "ANNOTATION_PARAMS"), root_1);

                dbg.location(765,26);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:765:26: ( annotationParam )*
                while ( stream_annotationParam.hasNext() ) {
                    dbg.location(765,26);
                    adaptor.addChild(root_1, stream_annotationParam.nextTree());

                }
                stream_annotationParam.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(766, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "annotationParamList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "annotationParamList"

    public static class annotationParam_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationParam"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:779:1: annotationParam : ( ident ASSIGN constant -> ^( ASSIGN ident constant ) | constant -> constant | ident -> ident );
    public final AS3Parser.annotationParam_return annotationParam() throws RecognitionException {
        AS3Parser.annotationParam_return retval = new AS3Parser.annotationParam_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token ASSIGN272=null;
        AS3Parser.ident_return ident271 = null;

        AS3Parser.constant_return constant273 = null;

        AS3Parser.constant_return constant274 = null;

        AS3Parser.ident_return ident275 = null;


        LinkedListTree ASSIGN272_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try { dbg.enterRule(getGrammarFileName(), "annotationParam");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(779, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:780:2: ( ident ASSIGN constant -> ^( ASSIGN ident constant ) | constant -> constant | ident -> ident )
            int alt66=3;
            try { dbg.enterDecision(66);

            try {
                isCyclicDecision = true;
                alt66 = dfa66.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(66);}

            switch (alt66) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:781:3: ident ASSIGN constant
                    {
                    dbg.location(781,3);
                    pushFollow(FOLLOW_ident_in_annotationParam3017);
                    ident271=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident271.getTree());
                    dbg.location(781,9);
                    ASSIGN272=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationParam3019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN.add(ASSIGN272);

                    dbg.location(781,16);
                    pushFollow(FOLLOW_constant_in_annotationParam3021);
                    constant273=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant273.getTree());


                    // AST REWRITE
                    // elements: constant, ident, ASSIGN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 781:25: -> ^( ASSIGN ident constant )
                    {
                        dbg.location(781,28);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:781:28: ^( ASSIGN ident constant )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(781,30);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_ASSIGN.nextNode(), root_1);

                        dbg.location(781,37);
                        adaptor.addChild(root_1, stream_ident.nextTree());
                        dbg.location(781,43);
                        adaptor.addChild(root_1, stream_constant.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:782:4: constant
                    {
                    dbg.location(782,4);
                    pushFollow(FOLLOW_constant_in_annotationParam3036);
                    constant274=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant274.getTree());


                    // AST REWRITE
                    // elements: constant
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 782:13: -> constant
                    {
                        dbg.location(782,16);
                        adaptor.addChild(root_0, stream_constant.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:783:4: ident
                    {
                    dbg.location(783,4);
                    pushFollow(FOLLOW_ident_in_annotationParam3045);
                    ident275=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident275.getTree());


                    // AST REWRITE
                    // elements: ident
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 783:10: -> ident
                    {
                        dbg.location(783,13);
                        adaptor.addChild(root_0, stream_ident.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(784, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "annotationParam");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "annotationParam"

    public static class modifiers_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:786:1: modifiers : ( modifier )* -> ^( MODIFIERS ( modifier )* ) ;
    public final AS3Parser.modifiers_return modifiers() throws RecognitionException {
        AS3Parser.modifiers_return retval = new AS3Parser.modifiers_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.modifier_return modifier276 = null;


        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try { dbg.enterRule(getGrammarFileName(), "modifiers");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(786, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:787:2: ( ( modifier )* -> ^( MODIFIERS ( modifier )* ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:787:4: ( modifier )*
            {
            dbg.location(787,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:787:4: ( modifier )*
            try { dbg.enterSubRule(67);

            loop67:
            do {
                int alt67=2;
                try { dbg.enterDecision(67);

                try {
                    isCyclicDecision = true;
                    alt67 = dfa67.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(67);}

                switch (alt67) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:787:4: modifier
            	    {
            	    dbg.location(787,4);
            	    pushFollow(FOLLOW_modifier_in_modifiers3060);
            	    modifier276=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier276.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);
            } finally {dbg.exitSubRule(67);}



            // AST REWRITE
            // elements: modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 788:3: -> ^( MODIFIERS ( modifier )* )
            {
                dbg.location(788,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:788:6: ^( MODIFIERS ( modifier )* )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(788,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(MODIFIERS, "MODIFIERS"), root_1);

                dbg.location(788,18);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:788:18: ( modifier )*
                while ( stream_modifier.hasNext() ) {
                    dbg.location(788,18);
                    adaptor.addChild(root_1, stream_modifier.nextTree());

                }
                stream_modifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(789, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "modifiers");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "modifiers"

    public static class modifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:791:1: modifier : ( namespaceName | STATIC | FINAL | 'enumerable' | 'explicit' | OVERRIDE | DYNAMIC | 'intrinsic' );
    public final AS3Parser.modifier_return modifier() throws RecognitionException {
        AS3Parser.modifier_return retval = new AS3Parser.modifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token STATIC278=null;
        Token FINAL279=null;
        Token string_literal280=null;
        Token string_literal281=null;
        Token OVERRIDE282=null;
        Token DYNAMIC283=null;
        Token string_literal284=null;
        AS3Parser.namespaceName_return namespaceName277 = null;


        LinkedListTree STATIC278_tree=null;
        LinkedListTree FINAL279_tree=null;
        LinkedListTree string_literal280_tree=null;
        LinkedListTree string_literal281_tree=null;
        LinkedListTree OVERRIDE282_tree=null;
        LinkedListTree DYNAMIC283_tree=null;
        LinkedListTree string_literal284_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "modifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(791, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:792:2: ( namespaceName | STATIC | FINAL | 'enumerable' | 'explicit' | OVERRIDE | DYNAMIC | 'intrinsic' )
            int alt68=8;
            try { dbg.enterDecision(68);

            try {
                isCyclicDecision = true;
                alt68 = dfa68.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(68);}

            switch (alt68) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:792:4: namespaceName
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(792,4);
                    pushFollow(FOLLOW_namespaceName_in_modifier3083);
                    namespaceName277=namespaceName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName277.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:793:4: STATIC
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(793,4);
                    STATIC278=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifier3088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STATIC278_tree = (LinkedListTree)adaptor.create(STATIC278);
                    adaptor.addChild(root_0, STATIC278_tree);
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:794:4: FINAL
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(794,4);
                    FINAL279=(Token)match(input,FINAL,FOLLOW_FINAL_in_modifier3093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINAL279_tree = (LinkedListTree)adaptor.create(FINAL279);
                    adaptor.addChild(root_0, FINAL279_tree);
                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:795:4: 'enumerable'
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(795,4);
                    string_literal280=(Token)match(input,188,FOLLOW_188_in_modifier3098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal280_tree = (LinkedListTree)adaptor.create(string_literal280);
                    adaptor.addChild(root_0, string_literal280_tree);
                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:796:4: 'explicit'
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(796,4);
                    string_literal281=(Token)match(input,189,FOLLOW_189_in_modifier3103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal281_tree = (LinkedListTree)adaptor.create(string_literal281);
                    adaptor.addChild(root_0, string_literal281_tree);
                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:797:4: OVERRIDE
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(797,4);
                    OVERRIDE282=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_modifier3108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OVERRIDE282_tree = (LinkedListTree)adaptor.create(OVERRIDE282);
                    adaptor.addChild(root_0, OVERRIDE282_tree);
                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:798:4: DYNAMIC
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(798,4);
                    DYNAMIC283=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_modifier3113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DYNAMIC283_tree = (LinkedListTree)adaptor.create(DYNAMIC283);
                    adaptor.addChild(root_0, DYNAMIC283_tree);
                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:799:4: 'intrinsic'
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(799,4);
                    string_literal284=(Token)match(input,190,FOLLOW_190_in_modifier3118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal284_tree = (LinkedListTree)adaptor.create(string_literal284);
                    adaptor.addChild(root_0, string_literal284_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(800, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "modifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "modifier"

    public static class arguments_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:802:1: arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );
    public final AS3Parser.arguments_return arguments() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.arguments_return retval = new AS3Parser.arguments_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LPAREN285=null;
        Token RPAREN287=null;
        Token LPAREN288=null;
        Token RPAREN289=null;
        AS3Parser.expressionList_return expressionList286 = null;


        LinkedListTree LPAREN285_tree=null;
        LinkedListTree RPAREN287_tree=null;
        LinkedListTree LPAREN288_tree=null;
        LinkedListTree RPAREN289_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "arguments");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(802, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:807:2: ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS )
            int alt69=2;
            try { dbg.enterDecision(69);

            try {
                isCyclicDecision = true;
                alt69 = dfa69.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(69);}

            switch (alt69) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:807:4: LPAREN expressionList RPAREN
                    {
                    dbg.location(807,4);
                    LPAREN285=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments3139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN285);

                    dbg.location(807,11);
                    pushFollow(FOLLOW_expressionList_in_arguments3141);
                    expressionList286=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList286.getTree());
                    dbg.location(807,26);
                    RPAREN287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments3143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN287);



                    // AST REWRITE
                    // elements: expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 808:3: -> ^( ARGUMENTS expressionList )
                    {
                        dbg.location(808,6);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:808:6: ^( ARGUMENTS expressionList )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(808,8);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ARGUMENTS, "ARGUMENTS"), root_1);

                        dbg.location(808,18);
                        adaptor.addChild(root_1, stream_expressionList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:809:4: LPAREN RPAREN
                    {
                    dbg.location(809,4);
                    LPAREN288=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments3158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN288);

                    dbg.location(809,11);
                    RPAREN289=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments3160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN289);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 810:3: -> ARGUMENTS
                    {
                        dbg.location(810,6);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(ARGUMENTS, "ARGUMENTS"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(811, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "arguments");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "arguments"

    public static class arrayLiteral_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayLiteral"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:813:1: arrayLiteral : LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) ;
    public final AS3Parser.arrayLiteral_return arrayLiteral() throws RecognitionException {
        AS3Parser.arrayLiteral_return retval = new AS3Parser.arrayLiteral_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LBRACK290=null;
        Token RBRACK292=null;
        AS3Parser.elementList_return elementList291 = null;


        LinkedListTree LBRACK290_tree=null;
        LinkedListTree RBRACK292_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_elementList=new RewriteRuleSubtreeStream(adaptor,"rule elementList");
        try { dbg.enterRule(getGrammarFileName(), "arrayLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(813, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:814:2: ( LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:814:4: LBRACK ( elementList )? RBRACK
            {
            dbg.location(814,4);
            LBRACK290=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayLiteral3177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK290);

            dbg.location(814,11);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:814:11: ( elementList )?
            int alt70=2;
            try { dbg.enterSubRule(70);
            try { dbg.enterDecision(70);

            try {
                isCyclicDecision = true;
                alt70 = dfa70.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(70);}

            switch (alt70) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:814:11: elementList
                    {
                    dbg.location(814,11);
                    pushFollow(FOLLOW_elementList_in_arrayLiteral3179);
                    elementList291=elementList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementList.add(elementList291.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(70);}

            dbg.location(814,24);
            RBRACK292=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayLiteral3182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK292);



            // AST REWRITE
            // elements: elementList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 815:3: -> ^( ARRAY_LITERAL ( elementList )? )
            {
                dbg.location(815,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:815:6: ^( ARRAY_LITERAL ( elementList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(815,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

                dbg.location(815,22);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:815:22: ( elementList )?
                if ( stream_elementList.hasNext() ) {
                    dbg.location(815,22);
                    adaptor.addChild(root_1, stream_elementList.nextTree());

                }
                stream_elementList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(816, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "arrayLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "arrayLiteral"

    public static class elementList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:818:1: elementList : ( COMMA | nonemptyElementList );
    public final AS3Parser.elementList_return elementList() throws RecognitionException {
        AS3Parser.elementList_return retval = new AS3Parser.elementList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA293=null;
        AS3Parser.nonemptyElementList_return nonemptyElementList294 = null;


        LinkedListTree COMMA293_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "elementList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(818, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:819:2: ( COMMA | nonemptyElementList )
            int alt71=2;
            try { dbg.enterDecision(71);

            try {
                isCyclicDecision = true;
                alt71 = dfa71.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(71);}

            switch (alt71) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:819:4: COMMA
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(819,9);
                    COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementList3206); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:820:4: nonemptyElementList
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(820,4);
                    pushFollow(FOLLOW_nonemptyElementList_in_elementList3212);
                    nonemptyElementList294=nonemptyElementList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonemptyElementList294.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(821, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "elementList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "elementList"

    public static class nonemptyElementList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonemptyElementList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:822:1: nonemptyElementList : assignmentExpression ( COMMA assignmentExpression )* ;
    public final AS3Parser.nonemptyElementList_return nonemptyElementList() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.nonemptyElementList_return retval = new AS3Parser.nonemptyElementList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA296=null;
        AS3Parser.assignmentExpression_return assignmentExpression295 = null;

        AS3Parser.assignmentExpression_return assignmentExpression297 = null;


        LinkedListTree COMMA296_tree=null;


        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "nonemptyElementList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(822, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:827:2: ( assignmentExpression ( COMMA assignmentExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:827:4: assignmentExpression ( COMMA assignmentExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(827,4);
            pushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3232);
            assignmentExpression295=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression295.getTree());
            dbg.location(827,25);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:827:25: ( COMMA assignmentExpression )*
            try { dbg.enterSubRule(72);

            loop72:
            do {
                int alt72=2;
                try { dbg.enterDecision(72);

                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                } finally {dbg.exitDecision(72);}

                switch (alt72) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:827:26: COMMA assignmentExpression
            	    {
            	    dbg.location(827,31);
            	    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_nonemptyElementList3235); if (state.failed) return retval;
            	    dbg.location(827,33);
            	    pushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3238);
            	    assignmentExpression297=assignmentExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression297.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);
            } finally {dbg.exitSubRule(72);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(828, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "nonemptyElementList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "nonemptyElementList"

    public static class element_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "element"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:830:1: element : assignmentExpression ;
    public final AS3Parser.element_return element() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.element_return retval = new AS3Parser.element_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.assignmentExpression_return assignmentExpression298 = null;




        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "element");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(830, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:835:2: ( assignmentExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:835:4: assignmentExpression
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(835,4);
            pushFollow(FOLLOW_assignmentExpression_in_element3261);
            assignmentExpression298=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression298.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(836, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "element");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "element"

    public static class objectLiteral_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectLiteral"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:839:1: objectLiteral : LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) ;
    public final AS3Parser.objectLiteral_return objectLiteral() throws RecognitionException {
        AS3Parser.objectLiteral_return retval = new AS3Parser.objectLiteral_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LCURLY299=null;
        Token RCURLY301=null;
        AS3Parser.fieldList_return fieldList300 = null;


        LinkedListTree LCURLY299_tree=null;
        LinkedListTree RCURLY301_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_fieldList=new RewriteRuleSubtreeStream(adaptor,"rule fieldList");
        try { dbg.enterRule(getGrammarFileName(), "objectLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(839, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:840:2: ( LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:840:4: LCURLY ( fieldList )? RCURLY
            {
            dbg.location(840,4);
            LCURLY299=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_objectLiteral3273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY299);

            dbg.location(840,11);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:840:11: ( fieldList )?
            int alt73=2;
            try { dbg.enterSubRule(73);
            try { dbg.enterDecision(73);

            try {
                isCyclicDecision = true;
                alt73 = dfa73.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(73);}

            switch (alt73) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:840:11: fieldList
                    {
                    dbg.location(840,11);
                    pushFollow(FOLLOW_fieldList_in_objectLiteral3275);
                    fieldList300=fieldList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fieldList.add(fieldList300.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(73);}

            dbg.location(840,22);
            RCURLY301=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_objectLiteral3278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY301);



            // AST REWRITE
            // elements: fieldList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 841:3: -> ^( OBJECT_LITERAL ( fieldList )? )
            {
                dbg.location(841,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:841:6: ^( OBJECT_LITERAL ( fieldList )? )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(841,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

                dbg.location(841,23);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:841:23: ( fieldList )?
                if ( stream_fieldList.hasNext() ) {
                    dbg.location(841,23);
                    adaptor.addChild(root_1, stream_fieldList.nextTree());

                }
                stream_fieldList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(842, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "objectLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "objectLiteral"

    public static class fieldList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:844:1: fieldList : literalField ( COMMA ( literalField )? )* ;
    public final AS3Parser.fieldList_return fieldList() throws RecognitionException {
        AS3Parser.fieldList_return retval = new AS3Parser.fieldList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA303=null;
        AS3Parser.literalField_return literalField302 = null;

        AS3Parser.literalField_return literalField304 = null;


        LinkedListTree COMMA303_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "fieldList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(844, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:2: ( literalField ( COMMA ( literalField )? )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:4: literalField ( COMMA ( literalField )? )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(845,4);
            pushFollow(FOLLOW_literalField_in_fieldList3301);
            literalField302=literalField();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literalField302.getTree());
            dbg.location(845,17);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:17: ( COMMA ( literalField )? )*
            try { dbg.enterSubRule(75);

            loop75:
            do {
                int alt75=2;
                try { dbg.enterDecision(75);

                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                } finally {dbg.exitDecision(75);}

                switch (alt75) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:18: COMMA ( literalField )?
            	    {
            	    dbg.location(845,23);
            	    COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_fieldList3304); if (state.failed) return retval;
            	    dbg.location(845,25);
            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:25: ( literalField )?
            	    int alt74=2;
            	    try { dbg.enterSubRule(74);
            	    try { dbg.enterDecision(74);

            	    try {
            	        isCyclicDecision = true;
            	        alt74 = dfa74.predict(input);
            	    }
            	    catch (NoViableAltException nvae) {
            	        dbg.recognitionException(nvae);
            	        throw nvae;
            	    }
            	    } finally {dbg.exitDecision(74);}

            	    switch (alt74) {
            	        case 1 :
            	            dbg.enterAlt(1);

            	            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:845:25: literalField
            	            {
            	            dbg.location(845,25);
            	            pushFollow(FOLLOW_literalField_in_fieldList3307);
            	            literalField304=literalField();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, literalField304.getTree());

            	            }
            	            break;

            	    }
            	    } finally {dbg.exitSubRule(74);}


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);
            } finally {dbg.exitSubRule(75);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(846, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fieldList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fieldList"

    public static class literalField_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literalField"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:848:1: literalField : fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) ;
    public final AS3Parser.literalField_return literalField() throws RecognitionException {
        AS3Parser.literalField_return retval = new AS3Parser.literalField_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COLON306=null;
        AS3Parser.fieldName_return fieldName305 = null;

        AS3Parser.element_return element307 = null;


        LinkedListTree COLON306_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_element=new RewriteRuleSubtreeStream(adaptor,"rule element");
        RewriteRuleSubtreeStream stream_fieldName=new RewriteRuleSubtreeStream(adaptor,"rule fieldName");
        try { dbg.enterRule(getGrammarFileName(), "literalField");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(848, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:849:2: ( fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:849:5: fieldName COLON element
            {
            dbg.location(849,5);
            pushFollow(FOLLOW_fieldName_in_literalField3324);
            fieldName305=fieldName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fieldName.add(fieldName305.getTree());
            dbg.location(849,15);
            COLON306=(Token)match(input,COLON,FOLLOW_COLON_in_literalField3326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON306);

            dbg.location(849,21);
            pushFollow(FOLLOW_element_in_literalField3328);
            element307=element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element.add(element307.getTree());


            // AST REWRITE
            // elements: fieldName, element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 850:3: -> ^( OBJECT_FIELD fieldName element )
            {
                dbg.location(850,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:850:6: ^( OBJECT_FIELD fieldName element )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(850,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(OBJECT_FIELD, "OBJECT_FIELD"), root_1);

                dbg.location(850,21);
                adaptor.addChild(root_1, stream_fieldName.nextTree());
                dbg.location(850,31);
                adaptor.addChild(root_1, stream_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(851, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "literalField");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "literalField"

    public static class fieldName_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldName"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:853:1: fieldName : ( ident | number );
    public final AS3Parser.fieldName_return fieldName() throws RecognitionException {
        AS3Parser.fieldName_return retval = new AS3Parser.fieldName_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.ident_return ident308 = null;

        AS3Parser.number_return number309 = null;



        try { dbg.enterRule(getGrammarFileName(), "fieldName");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(853, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:854:2: ( ident | number )
            int alt76=2;
            try { dbg.enterDecision(76);

            try {
                isCyclicDecision = true;
                alt76 = dfa76.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(76);}

            switch (alt76) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:854:4: ident
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(854,4);
                    pushFollow(FOLLOW_ident_in_fieldName3352);
                    ident308=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident308.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:855:4: number
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(855,4);
                    pushFollow(FOLLOW_number_in_fieldName3357);
                    number309=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(856, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fieldName");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fieldName"

    public static class expression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:860:1: expression : assignmentExpression ;
    public final AS3Parser.expression_return expression() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.expression_return retval = new AS3Parser.expression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.assignmentExpression_return assignmentExpression310 = null;




        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "expression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(860, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:865:2: ( assignmentExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:865:4: assignmentExpression
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(865,4);
            pushFollow(FOLLOW_assignmentExpression_in_expression3380);
            assignmentExpression310=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression310.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(866, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expression"

    public static class expressionList_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:869:1: expressionList : assignmentExpression ( COMMA assignmentExpression )* -> ( assignmentExpression )+ ;
    public final AS3Parser.expressionList_return expressionList() throws RecognitionException {
        AS3Parser.expressionList_return retval = new AS3Parser.expressionList_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COMMA312=null;
        AS3Parser.assignmentExpression_return assignmentExpression311 = null;

        AS3Parser.assignmentExpression_return assignmentExpression313 = null;


        LinkedListTree COMMA312_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try { dbg.enterRule(getGrammarFileName(), "expressionList");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(869, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:870:2: ( assignmentExpression ( COMMA assignmentExpression )* -> ( assignmentExpression )+ )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:870:4: assignmentExpression ( COMMA assignmentExpression )*
            {
            dbg.location(870,4);
            pushFollow(FOLLOW_assignmentExpression_in_expressionList3392);
            assignmentExpression311=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression311.getTree());
            dbg.location(870,25);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:870:25: ( COMMA assignmentExpression )*
            try { dbg.enterSubRule(77);

            loop77:
            do {
                int alt77=2;
                try { dbg.enterDecision(77);

                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                } finally {dbg.exitDecision(77);}

                switch (alt77) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:870:26: COMMA assignmentExpression
            	    {
            	    dbg.location(870,26);
            	    COMMA312=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList3395); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA312);

            	    dbg.location(870,32);
            	    pushFollow(FOLLOW_assignmentExpression_in_expressionList3397);
            	    assignmentExpression313=assignmentExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression313.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);
            } finally {dbg.exitSubRule(77);}



            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 871:3: -> ( assignmentExpression )+
            {
                dbg.location(871,6);
                if ( !(stream_assignmentExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_assignmentExpression.hasNext() ) {
                    dbg.location(871,6);
                    adaptor.addChild(root_0, stream_assignmentExpression.nextTree());

                }
                stream_assignmentExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(872, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "expressionList");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "expressionList"

    public static class assignmentExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:875:1: assignmentExpression : conditionalExpression ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )* ;
    public final AS3Parser.assignmentExpression_return assignmentExpression() throws RecognitionException {
        AS3Parser.assignmentExpression_return retval = new AS3Parser.assignmentExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.assignmentOperator_return o = null;

        AS3Parser.conditionalExpression_return conditionalExpression314 = null;

        AS3Parser.assignmentExpression_return assignmentExpression315 = null;



        try { dbg.enterRule(getGrammarFileName(), "assignmentExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(875, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:876:2: ( conditionalExpression ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:876:4: conditionalExpression ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(876,4);
            pushFollow(FOLLOW_conditionalExpression_in_assignmentExpression3418);
            conditionalExpression314=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression314.getTree());
            dbg.location(877,2);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:877:2: ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )*
            try { dbg.enterSubRule(78);

            loop78:
            do {
                int alt78=2;
                try { dbg.enterDecision(78);

                try {
                    isCyclicDecision = true;
                    alt78 = dfa78.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(78);}

                switch (alt78) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:877:4: ( assignmentOperator )=>o= assignmentOperator assignmentExpression
            	    {
            	    dbg.location(877,28);
            	    pushFollow(FOLLOW_assignmentOperator_in_assignmentExpression3430);
            	    o=assignmentOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(878,3);
            	    pushFollow(FOLLOW_assignmentExpression_in_assignmentExpression3435);
            	    assignmentExpression315=assignmentExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression315.getTree());
            	    dbg.location(879,3);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);
            } finally {dbg.exitSubRule(78);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(881, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "assignmentExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "assignmentExpression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:883:1: assignmentOperator : ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN );
    public final AS3Parser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        AS3Parser.assignmentOperator_return retval = new AS3Parser.assignmentOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set316=null;

        LinkedListTree set316_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "assignmentOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(883, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:884:2: ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(884,2);
            set316=(Token)input.LT(1);
            if ( input.LA(1)==ASSIGN||(input.LA(1)>=STAR_ASSIGN && input.LA(1)<=LOR_ASSIGN) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set316));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(898, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "assignmentOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:901:1: conditionalExpression : ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? ;
    public final AS3Parser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        AS3Parser.conditionalExpression_return retval = new AS3Parser.conditionalExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token QUESTION318=null;
        AS3Parser.logicalOrExpression_return logicalOrExpression317 = null;

        AS3Parser.conditionalSubExpression_return conditionalSubExpression319 = null;


        LinkedListTree QUESTION318_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_logicalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule logicalOrExpression");
        RewriteRuleSubtreeStream stream_conditionalSubExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalSubExpression");
        try { dbg.enterRule(getGrammarFileName(), "conditionalExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(901, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:902:2: ( ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:902:4: ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
            {
            dbg.location(902,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:902:4: ( logicalOrExpression -> logicalOrExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:902:5: logicalOrExpression
            {
            dbg.location(902,5);
            pushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression3533);
            logicalOrExpression317=logicalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_logicalOrExpression.add(logicalOrExpression317.getTree());


            // AST REWRITE
            // elements: logicalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 902:25: -> logicalOrExpression
            {
                dbg.location(902,28);
                adaptor.addChild(root_0, stream_logicalOrExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            dbg.location(903,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:903:3: ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
            int alt79=2;
            try { dbg.enterSubRule(79);
            try { dbg.enterDecision(79);

            try {
                isCyclicDecision = true;
                alt79 = dfa79.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(79);}

            switch (alt79) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:904:4: QUESTION conditionalSubExpression
                    {
                    dbg.location(904,4);
                    QUESTION318=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression3547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(QUESTION318);

                    dbg.location(905,4);
                    pushFollow(FOLLOW_conditionalSubExpression_in_conditionalExpression3552);
                    conditionalSubExpression319=conditionalSubExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalSubExpression.add(conditionalSubExpression319.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, QUESTION, conditionalSubExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 906:4: -> ^( QUESTION $conditionalExpression conditionalSubExpression )
                    {
                        dbg.location(906,7);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:906:7: ^( QUESTION $conditionalExpression conditionalSubExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(906,9);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                        dbg.location(906,18);
                        adaptor.addChild(root_1, stream_retval.nextTree());
                        dbg.location(906,41);
                        adaptor.addChild(root_1, stream_conditionalSubExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            } finally {dbg.exitSubRule(79);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(908, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conditionalExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalSubExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalSubExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:909:1: conditionalSubExpression : assignmentExpression COLON assignmentExpression ;
    public final AS3Parser.conditionalSubExpression_return conditionalSubExpression() throws RecognitionException {
        AS3Parser.conditionalSubExpression_return retval = new AS3Parser.conditionalSubExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token COLON321=null;
        AS3Parser.assignmentExpression_return assignmentExpression320 = null;

        AS3Parser.assignmentExpression_return assignmentExpression322 = null;


        LinkedListTree COLON321_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "conditionalSubExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(909, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:910:2: ( assignmentExpression COLON assignmentExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:910:4: assignmentExpression COLON assignmentExpression
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(910,4);
            pushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression3581);
            assignmentExpression320=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression320.getTree());
            dbg.location(910,30);
            COLON321=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalSubExpression3583); if (state.failed) return retval;
            dbg.location(910,32);
            pushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression3586);
            assignmentExpression322=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentExpression322.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(911, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "conditionalSubExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "conditionalSubExpression"

    public static class logicalOrExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:916:1: logicalOrExpression : logicalAndExpression (o= logicalOrOperator logicalAndExpression )* ;
    public final AS3Parser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        AS3Parser.logicalOrExpression_return retval = new AS3Parser.logicalOrExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.logicalOrOperator_return o = null;

        AS3Parser.logicalAndExpression_return logicalAndExpression323 = null;

        AS3Parser.logicalAndExpression_return logicalAndExpression324 = null;



        try { dbg.enterRule(getGrammarFileName(), "logicalOrExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(916, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:917:2: ( logicalAndExpression (o= logicalOrOperator logicalAndExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:917:4: logicalAndExpression (o= logicalOrOperator logicalAndExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(917,4);
            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression3600);
            logicalAndExpression323=logicalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression323.getTree());
            dbg.location(918,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:918:3: (o= logicalOrOperator logicalAndExpression )*
            try { dbg.enterSubRule(80);

            loop80:
            do {
                int alt80=2;
                try { dbg.enterDecision(80);

                try {
                    isCyclicDecision = true;
                    alt80 = dfa80.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(80);}

                switch (alt80) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:918:4: o= logicalOrOperator logicalAndExpression
            	    {
            	    dbg.location(918,5);
            	    pushFollow(FOLLOW_logicalOrOperator_in_logicalOrExpression3607);
            	    o=logicalOrOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(918,25);
            	    pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression3610);
            	    logicalAndExpression324=logicalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAndExpression324.getTree());
            	    dbg.location(918,46);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);
            } finally {dbg.exitSubRule(80);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(919, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "logicalOrExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "logicalOrExpression"

    public static class logicalOrOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalOrOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:921:1: logicalOrOperator : ( LOR | 'or' );
    public final AS3Parser.logicalOrOperator_return logicalOrOperator() throws RecognitionException {
        AS3Parser.logicalOrOperator_return retval = new AS3Parser.logicalOrOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set325=null;

        LinkedListTree set325_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "logicalOrOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(921, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:922:2: ( LOR | 'or' )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(922,2);
            set325=(Token)input.LT(1);
            if ( input.LA(1)==LOR||input.LA(1)==191 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set325));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(923, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "logicalOrOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "logicalOrOperator"

    public static class logicalAndExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:926:1: logicalAndExpression : bitwiseOrExpression (o= logicalAndOperator bitwiseOrExpression )* ;
    public final AS3Parser.logicalAndExpression_return logicalAndExpression() throws RecognitionException {
        AS3Parser.logicalAndExpression_return retval = new AS3Parser.logicalAndExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.logicalAndOperator_return o = null;

        AS3Parser.bitwiseOrExpression_return bitwiseOrExpression326 = null;

        AS3Parser.bitwiseOrExpression_return bitwiseOrExpression327 = null;



        try { dbg.enterRule(getGrammarFileName(), "logicalAndExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(926, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:927:2: ( bitwiseOrExpression (o= logicalAndOperator bitwiseOrExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:927:4: bitwiseOrExpression (o= logicalAndOperator bitwiseOrExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(927,4);
            pushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression3641);
            bitwiseOrExpression326=bitwiseOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseOrExpression326.getTree());
            dbg.location(928,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:928:3: (o= logicalAndOperator bitwiseOrExpression )*
            try { dbg.enterSubRule(81);

            loop81:
            do {
                int alt81=2;
                try { dbg.enterDecision(81);

                try {
                    isCyclicDecision = true;
                    alt81 = dfa81.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(81);}

                switch (alt81) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:928:4: o= logicalAndOperator bitwiseOrExpression
            	    {
            	    dbg.location(928,5);
            	    pushFollow(FOLLOW_logicalAndOperator_in_logicalAndExpression3648);
            	    o=logicalAndOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(928,26);
            	    pushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression3651);
            	    bitwiseOrExpression327=bitwiseOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseOrExpression327.getTree());
            	    dbg.location(928,46);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);
            } finally {dbg.exitSubRule(81);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(929, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "logicalAndExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "logicalAndExpression"

    public static class logicalAndOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicalAndOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:931:1: logicalAndOperator : ( LAND | 'and' );
    public final AS3Parser.logicalAndOperator_return logicalAndOperator() throws RecognitionException {
        AS3Parser.logicalAndOperator_return retval = new AS3Parser.logicalAndOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set328=null;

        LinkedListTree set328_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "logicalAndOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(931, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:932:2: ( LAND | 'and' )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(932,2);
            set328=(Token)input.LT(1);
            if ( input.LA(1)==LAND||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set328));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(933, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "logicalAndOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "logicalAndOperator"

    public static class bitwiseOrExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseOrExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:936:1: bitwiseOrExpression : bitwiseXorExpression (o= BOR bitwiseXorExpression )* ;
    public final AS3Parser.bitwiseOrExpression_return bitwiseOrExpression() throws RecognitionException {
        AS3Parser.bitwiseOrExpression_return retval = new AS3Parser.bitwiseOrExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token o=null;
        AS3Parser.bitwiseXorExpression_return bitwiseXorExpression329 = null;

        AS3Parser.bitwiseXorExpression_return bitwiseXorExpression330 = null;


        LinkedListTree o_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bitwiseOrExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(936, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:937:2: ( bitwiseXorExpression (o= BOR bitwiseXorExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:937:4: bitwiseXorExpression (o= BOR bitwiseXorExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(937,4);
            pushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3682);
            bitwiseXorExpression329=bitwiseXorExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXorExpression329.getTree());
            dbg.location(938,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:938:3: (o= BOR bitwiseXorExpression )*
            try { dbg.enterSubRule(82);

            loop82:
            do {
                int alt82=2;
                try { dbg.enterDecision(82);

                try {
                    isCyclicDecision = true;
                    alt82 = dfa82.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(82);}

                switch (alt82) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:938:4: o= BOR bitwiseXorExpression
            	    {
            	    dbg.location(938,5);
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_bitwiseOrExpression3689); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    o_tree = (LinkedListTree)adaptor.create(o);
            	    root_0 = (LinkedListTree)adaptor.becomeRoot(o_tree, root_0);
            	    }
            	    dbg.location(938,11);
            	    pushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3692);
            	    bitwiseXorExpression330=bitwiseXorExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseXorExpression330.getTree());
            	    dbg.location(938,32);
            	    if ( state.backtracking==0 ) {
            	      demarcate(o_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);
            } finally {dbg.exitSubRule(82);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(939, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bitwiseOrExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bitwiseOrExpression"

    public static class bitwiseXorExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseXorExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:942:1: bitwiseXorExpression : bitwiseAndExpression (o= BXOR bitwiseAndExpression )* ;
    public final AS3Parser.bitwiseXorExpression_return bitwiseXorExpression() throws RecognitionException {
        AS3Parser.bitwiseXorExpression_return retval = new AS3Parser.bitwiseXorExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token o=null;
        AS3Parser.bitwiseAndExpression_return bitwiseAndExpression331 = null;

        AS3Parser.bitwiseAndExpression_return bitwiseAndExpression332 = null;


        LinkedListTree o_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bitwiseXorExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(942, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:943:2: ( bitwiseAndExpression (o= BXOR bitwiseAndExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:943:4: bitwiseAndExpression (o= BXOR bitwiseAndExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(943,4);
            pushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3708);
            bitwiseAndExpression331=bitwiseAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseAndExpression331.getTree());
            dbg.location(944,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:944:3: (o= BXOR bitwiseAndExpression )*
            try { dbg.enterSubRule(83);

            loop83:
            do {
                int alt83=2;
                try { dbg.enterDecision(83);

                try {
                    isCyclicDecision = true;
                    alt83 = dfa83.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(83);}

                switch (alt83) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:944:4: o= BXOR bitwiseAndExpression
            	    {
            	    dbg.location(944,5);
            	    o=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitwiseXorExpression3715); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    o_tree = (LinkedListTree)adaptor.create(o);
            	    root_0 = (LinkedListTree)adaptor.becomeRoot(o_tree, root_0);
            	    }
            	    dbg.location(944,12);
            	    pushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3718);
            	    bitwiseAndExpression332=bitwiseAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseAndExpression332.getTree());
            	    dbg.location(944,33);
            	    if ( state.backtracking==0 ) {
            	      demarcate(o_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);
            } finally {dbg.exitSubRule(83);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(945, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bitwiseXorExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bitwiseXorExpression"

    public static class bitwiseAndExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseAndExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:948:1: bitwiseAndExpression : equalityExpression (o= BAND equalityExpression )* ;
    public final AS3Parser.bitwiseAndExpression_return bitwiseAndExpression() throws RecognitionException {
        AS3Parser.bitwiseAndExpression_return retval = new AS3Parser.bitwiseAndExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token o=null;
        AS3Parser.equalityExpression_return equalityExpression333 = null;

        AS3Parser.equalityExpression_return equalityExpression334 = null;


        LinkedListTree o_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "bitwiseAndExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(948, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:949:2: ( equalityExpression (o= BAND equalityExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:949:4: equalityExpression (o= BAND equalityExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(949,4);
            pushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression3734);
            equalityExpression333=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression333.getTree());
            dbg.location(950,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:950:3: (o= BAND equalityExpression )*
            try { dbg.enterSubRule(84);

            loop84:
            do {
                int alt84=2;
                try { dbg.enterDecision(84);

                try {
                    isCyclicDecision = true;
                    alt84 = dfa84.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(84);}

                switch (alt84) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:950:4: o= BAND equalityExpression
            	    {
            	    dbg.location(950,5);
            	    o=(Token)match(input,BAND,FOLLOW_BAND_in_bitwiseAndExpression3741); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    o_tree = (LinkedListTree)adaptor.create(o);
            	    root_0 = (LinkedListTree)adaptor.becomeRoot(o_tree, root_0);
            	    }
            	    dbg.location(950,12);
            	    pushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression3744);
            	    equalityExpression334=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression334.getTree());
            	    dbg.location(950,31);
            	    if ( state.backtracking==0 ) {
            	      demarcate(o_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);
            } finally {dbg.exitSubRule(84);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(951, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "bitwiseAndExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "bitwiseAndExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:954:1: equalityExpression : relationalExpression (o= equalityOperator relationalExpression )* ;
    public final AS3Parser.equalityExpression_return equalityExpression() throws RecognitionException {
        AS3Parser.equalityExpression_return retval = new AS3Parser.equalityExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.equalityOperator_return o = null;

        AS3Parser.relationalExpression_return relationalExpression335 = null;

        AS3Parser.relationalExpression_return relationalExpression336 = null;



        try { dbg.enterRule(getGrammarFileName(), "equalityExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(954, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:955:2: ( relationalExpression (o= equalityOperator relationalExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:955:4: relationalExpression (o= equalityOperator relationalExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(955,4);
            pushFollow(FOLLOW_relationalExpression_in_equalityExpression3760);
            relationalExpression335=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression335.getTree());
            dbg.location(956,2);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:956:2: (o= equalityOperator relationalExpression )*
            try { dbg.enterSubRule(85);

            loop85:
            do {
                int alt85=2;
                try { dbg.enterDecision(85);

                try {
                    isCyclicDecision = true;
                    alt85 = dfa85.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(85);}

                switch (alt85) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:956:4: o= equalityOperator relationalExpression
            	    {
            	    dbg.location(956,5);
            	    pushFollow(FOLLOW_equalityOperator_in_equalityExpression3767);
            	    o=equalityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(957,3);
            	    pushFollow(FOLLOW_relationalExpression_in_equalityExpression3772);
            	    relationalExpression336=relationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression336.getTree());
            	    dbg.location(958,3);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);
            } finally {dbg.exitSubRule(85);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(960, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "equalityExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class equalityOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:962:1: equalityOperator : ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL );
    public final AS3Parser.equalityOperator_return equalityOperator() throws RecognitionException {
        AS3Parser.equalityOperator_return retval = new AS3Parser.equalityOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set337=null;

        LinkedListTree set337_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "equalityOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(962, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:963:2: ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(963,2);
            set337=(Token)input.LT(1);
            if ( (input.LA(1)>=STRICT_EQUAL && input.LA(1)<=EQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set337));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(964, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "equalityOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "equalityOperator"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:967:1: relationalExpression : shiftExpression ( ( relationalOperator )=>o= relationalOperator shiftExpression )* ;
    public final AS3Parser.relationalExpression_return relationalExpression() throws RecognitionException {
        AS3Parser.relationalExpression_return retval = new AS3Parser.relationalExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.relationalOperator_return o = null;

        AS3Parser.shiftExpression_return shiftExpression338 = null;

        AS3Parser.shiftExpression_return shiftExpression339 = null;



        try { dbg.enterRule(getGrammarFileName(), "relationalExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(967, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:968:2: ( shiftExpression ( ( relationalOperator )=>o= relationalOperator shiftExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:968:4: shiftExpression ( ( relationalOperator )=>o= relationalOperator shiftExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(968,4);
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression3816);
            shiftExpression338=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression338.getTree());
            dbg.location(969,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:969:3: ( ( relationalOperator )=>o= relationalOperator shiftExpression )*
            try { dbg.enterSubRule(86);

            loop86:
            do {
                int alt86=2;
                try { dbg.enterDecision(86);

                try {
                    isCyclicDecision = true;
                    alt86 = dfa86.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(86);}

                switch (alt86) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:969:4: ( relationalOperator )=>o= relationalOperator shiftExpression
            	    {
            	    dbg.location(969,28);
            	    pushFollow(FOLLOW_relationalOperator_in_relationalExpression3828);
            	    o=relationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(969,49);
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression3831);
            	    shiftExpression339=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression339.getTree());
            	    dbg.location(969,65);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);
            } finally {dbg.exitSubRule(86);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(970, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relationalExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:972:1: relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );
    public final AS3Parser.relationalOperator_return relationalOperator() throws RecognitionException {
        AS3Parser.relationalOperator_return retval = new AS3Parser.relationalOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token IN340=null;
        Token LT341=null;
        Token GT342=null;
        Token LE343=null;
        Token GE344=null;
        Token IS345=null;
        Token AS346=null;
        Token INSTANCEOF347=null;

        LinkedListTree IN340_tree=null;
        LinkedListTree LT341_tree=null;
        LinkedListTree GT342_tree=null;
        LinkedListTree LE343_tree=null;
        LinkedListTree GE344_tree=null;
        LinkedListTree IS345_tree=null;
        LinkedListTree AS346_tree=null;
        LinkedListTree INSTANCEOF347_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "relationalOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(972, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:973:2: ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF )
            int alt87=8;
            try { dbg.enterDecision(87);

            switch ( input.LA(1) ) {
            case IN:
                {
                alt87=1;
                }
                break;
            case LT:
                {
                alt87=2;
                }
                break;
            case GT:
                {
                alt87=3;
                }
                break;
            case LE:
                {
                alt87=4;
                }
                break;
            case GE:
                {
                alt87=5;
                }
                break;
            case IS:
                {
                alt87=6;
                }
                break;
            case AS:
                {
                alt87=7;
                }
                break;
            case INSTANCEOF:
                {
                alt87=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(87);}

            switch (alt87) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:973:4: {...}? IN
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(973,4);
                    if ( !(evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed")) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOperator", "$InOperator::allowed");
                    }
                    dbg.location(973,28);
                    IN340=(Token)match(input,IN,FOLLOW_IN_in_relationalOperator3848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN340_tree = (LinkedListTree)adaptor.create(IN340);
                    adaptor.addChild(root_0, IN340_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:4: LT
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,4);
                    LT341=(Token)match(input,LT,FOLLOW_LT_in_relationalOperator3853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT341_tree = (LinkedListTree)adaptor.create(LT341);
                    adaptor.addChild(root_0, LT341_tree);
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:9: GT
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,9);
                    GT342=(Token)match(input,GT,FOLLOW_GT_in_relationalOperator3857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GT342_tree = (LinkedListTree)adaptor.create(GT342);
                    adaptor.addChild(root_0, GT342_tree);
                    }

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:14: LE
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,14);
                    LE343=(Token)match(input,LE,FOLLOW_LE_in_relationalOperator3861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LE343_tree = (LinkedListTree)adaptor.create(LE343);
                    adaptor.addChild(root_0, LE343_tree);
                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:19: GE
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,19);
                    GE344=(Token)match(input,GE,FOLLOW_GE_in_relationalOperator3865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GE344_tree = (LinkedListTree)adaptor.create(GE344);
                    adaptor.addChild(root_0, GE344_tree);
                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:24: IS
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,24);
                    IS345=(Token)match(input,IS,FOLLOW_IS_in_relationalOperator3869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS345_tree = (LinkedListTree)adaptor.create(IS345);
                    adaptor.addChild(root_0, IS345_tree);
                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:29: AS
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,29);
                    AS346=(Token)match(input,AS,FOLLOW_AS_in_relationalOperator3873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS346_tree = (LinkedListTree)adaptor.create(AS346);
                    adaptor.addChild(root_0, AS346_tree);
                    }

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:974:34: INSTANCEOF
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(974,34);
                    INSTANCEOF347=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_relationalOperator3877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF347_tree = (LinkedListTree)adaptor.create(INSTANCEOF347);
                    adaptor.addChild(root_0, INSTANCEOF347_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(975, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "relationalOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "relationalOperator"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:978:1: shiftExpression : additiveExpression (o= shiftOperator additiveExpression )* ;
    public final AS3Parser.shiftExpression_return shiftExpression() throws RecognitionException {
        AS3Parser.shiftExpression_return retval = new AS3Parser.shiftExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.shiftOperator_return o = null;

        AS3Parser.additiveExpression_return additiveExpression348 = null;

        AS3Parser.additiveExpression_return additiveExpression349 = null;



        try { dbg.enterRule(getGrammarFileName(), "shiftExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(978, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:979:2: ( additiveExpression (o= shiftOperator additiveExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:979:4: additiveExpression (o= shiftOperator additiveExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(979,4);
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression3889);
            additiveExpression348=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression348.getTree());
            dbg.location(980,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:980:3: (o= shiftOperator additiveExpression )*
            try { dbg.enterSubRule(88);

            loop88:
            do {
                int alt88=2;
                try { dbg.enterDecision(88);

                try {
                    isCyclicDecision = true;
                    alt88 = dfa88.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(88);}

                switch (alt88) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:980:4: o= shiftOperator additiveExpression
            	    {
            	    dbg.location(980,5);
            	    pushFollow(FOLLOW_shiftOperator_in_shiftExpression3896);
            	    o=shiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(980,21);
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression3899);
            	    additiveExpression349=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression349.getTree());
            	    dbg.location(980,40);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);
            } finally {dbg.exitSubRule(88);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(981, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "shiftExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:983:1: shiftOperator : ( SL | SR | BSR );
    public final AS3Parser.shiftOperator_return shiftOperator() throws RecognitionException {
        AS3Parser.shiftOperator_return retval = new AS3Parser.shiftOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set350=null;

        LinkedListTree set350_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "shiftOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(983, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:984:2: ( SL | SR | BSR )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(984,2);
            set350=(Token)input.LT(1);
            if ( (input.LA(1)>=SL && input.LA(1)<=BSR) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set350));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(985, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "shiftOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "shiftOperator"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:988:1: additiveExpression : multiplicativeExpression (o= additiveOperator multiplicativeExpression )* ;
    public final AS3Parser.additiveExpression_return additiveExpression() throws RecognitionException {
        AS3Parser.additiveExpression_return retval = new AS3Parser.additiveExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.additiveOperator_return o = null;

        AS3Parser.multiplicativeExpression_return multiplicativeExpression351 = null;

        AS3Parser.multiplicativeExpression_return multiplicativeExpression352 = null;



        try { dbg.enterRule(getGrammarFileName(), "additiveExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(988, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:989:2: ( multiplicativeExpression (o= additiveOperator multiplicativeExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:989:4: multiplicativeExpression (o= additiveOperator multiplicativeExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(989,4);
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3934);
            multiplicativeExpression351=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression351.getTree());
            dbg.location(990,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:990:3: (o= additiveOperator multiplicativeExpression )*
            try { dbg.enterSubRule(89);

            loop89:
            do {
                int alt89=2;
                try { dbg.enterDecision(89);

                try {
                    isCyclicDecision = true;
                    alt89 = dfa89.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(89);}

                switch (alt89) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:990:4: o= additiveOperator multiplicativeExpression
            	    {
            	    dbg.location(990,5);
            	    pushFollow(FOLLOW_additiveOperator_in_additiveExpression3941);
            	    o=additiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(990,24);
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3944);
            	    multiplicativeExpression352=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression352.getTree());
            	    dbg.location(990,49);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);
            } finally {dbg.exitSubRule(89);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(991, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "additiveExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class additiveOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:993:1: additiveOperator : ( PLUS | MINUS );
    public final AS3Parser.additiveOperator_return additiveOperator() throws RecognitionException {
        AS3Parser.additiveOperator_return retval = new AS3Parser.additiveOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set353=null;

        LinkedListTree set353_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "additiveOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(993, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:994:2: ( PLUS | MINUS )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(994,2);
            set353=(Token)input.LT(1);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set353));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(995, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "additiveOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "additiveOperator"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:998:1: multiplicativeExpression : unaryExpression (o= multiplicativeOperator unaryExpression )* ;
    public final AS3Parser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        AS3Parser.multiplicativeExpression_return retval = new AS3Parser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.multiplicativeOperator_return o = null;

        AS3Parser.unaryExpression_return unaryExpression354 = null;

        AS3Parser.unaryExpression_return unaryExpression355 = null;



        try { dbg.enterRule(getGrammarFileName(), "multiplicativeExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(998, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:999:2: ( unaryExpression (o= multiplicativeOperator unaryExpression )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:999:4: unaryExpression (o= multiplicativeOperator unaryExpression )*
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(999,4);
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression3975);
            unaryExpression354=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression354.getTree());
            dbg.location(1000,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1000:3: (o= multiplicativeOperator unaryExpression )*
            try { dbg.enterSubRule(90);

            loop90:
            do {
                int alt90=2;
                try { dbg.enterDecision(90);

                try {
                    isCyclicDecision = true;
                    alt90 = dfa90.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(90);}

                switch (alt90) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1000:5: o= multiplicativeOperator unaryExpression
            	    {
            	    dbg.location(1000,6);
            	    pushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression3983);
            	    o=multiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (LinkedListTree)adaptor.becomeRoot(o.getTree(), root_0);
            	    dbg.location(1001,4);
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression3989);
            	    unaryExpression355=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression355.getTree());
            	    dbg.location(1002,4);
            	    if ( state.backtracking==0 ) {
            	      demarcate((o!=null?((LinkedListTree)o.tree):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);
            } finally {dbg.exitSubRule(90);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1004, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "multiplicativeExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class multiplicativeOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1006:1: multiplicativeOperator : (s= STAR -> MULT[$s] | DIV | MOD );
    public final AS3Parser.multiplicativeOperator_return multiplicativeOperator() throws RecognitionException {
        AS3Parser.multiplicativeOperator_return retval = new AS3Parser.multiplicativeOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token s=null;
        Token DIV356=null;
        Token MOD357=null;

        LinkedListTree s_tree=null;
        LinkedListTree DIV356_tree=null;
        LinkedListTree MOD357_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try { dbg.enterRule(getGrammarFileName(), "multiplicativeOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1006, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1007:2: (s= STAR -> MULT[$s] | DIV | MOD )
            int alt91=3;
            try { dbg.enterDecision(91);

            switch ( input.LA(1) ) {
            case STAR:
                {
                alt91=1;
                }
                break;
            case DIV:
                {
                alt91=2;
                }
                break;
            case MOD:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(91);}

            switch (alt91) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1007:4: s= STAR
                    {
                    dbg.location(1007,5);
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_multiplicativeOperator4012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1007:11: -> MULT[$s]
                    {
                        dbg.location(1007,14);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(MULT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1008:4: DIV
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1008,4);
                    DIV356=(Token)match(input,DIV,FOLLOW_DIV_in_multiplicativeOperator4022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV356_tree = (LinkedListTree)adaptor.create(DIV356);
                    adaptor.addChild(root_0, DIV356_tree);
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1009:4: MOD
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1009,4);
                    MOD357=(Token)match(input,MOD,FOLLOW_MOD_in_multiplicativeOperator4027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MOD357_tree = (LinkedListTree)adaptor.create(MOD357);
                    adaptor.addChild(root_0, MOD357_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1010, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "multiplicativeOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "multiplicativeOperator"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1013:1: unaryExpression : (in= INC unaryExpression -> ^( PRE_INC[$in] unaryExpression ) | de= DEC unaryExpression -> ^( PRE_DEC[$de] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );
    public final AS3Parser.unaryExpression_return unaryExpression() throws RecognitionException {
        AS3Parser.unaryExpression_return retval = new AS3Parser.unaryExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token in=null;
        Token de=null;
        Token MINUS360=null;
        Token PLUS362=null;
        AS3Parser.unaryExpression_return unaryExpression358 = null;

        AS3Parser.unaryExpression_return unaryExpression359 = null;

        AS3Parser.unaryExpression_return unaryExpression361 = null;

        AS3Parser.unaryExpression_return unaryExpression363 = null;

        AS3Parser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus364 = null;


        LinkedListTree in_tree=null;
        LinkedListTree de_tree=null;
        LinkedListTree MINUS360_tree=null;
        LinkedListTree PLUS362_tree=null;
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try { dbg.enterRule(getGrammarFileName(), "unaryExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1013, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1014:2: (in= INC unaryExpression -> ^( PRE_INC[$in] unaryExpression ) | de= DEC unaryExpression -> ^( PRE_DEC[$de] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus )
            int alt92=5;
            try { dbg.enterDecision(92);

            try {
                isCyclicDecision = true;
                alt92 = dfa92.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(92);}

            switch (alt92) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1014:4: in= INC unaryExpression
                    {
                    dbg.location(1014,6);
                    in=(Token)match(input,INC,FOLLOW_INC_in_unaryExpression4041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(in);

                    dbg.location(1014,11);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression4043);
                    unaryExpression358=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression358.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1014:27: -> ^( PRE_INC[$in] unaryExpression )
                    {
                        dbg.location(1014,30);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1014:30: ^( PRE_INC[$in] unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1014,32);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PRE_INC, in), root_1);

                        dbg.location(1014,45);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1015:4: de= DEC unaryExpression
                    {
                    dbg.location(1015,6);
                    de=(Token)match(input,DEC,FOLLOW_DEC_in_unaryExpression4059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(de);

                    dbg.location(1015,11);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression4061);
                    unaryExpression359=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression359.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1015:27: -> ^( PRE_DEC[$de] unaryExpression )
                    {
                        dbg.location(1015,30);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1015:30: ^( PRE_DEC[$de] unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1015,32);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PRE_DEC, de), root_1);

                        dbg.location(1015,45);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1016:4: MINUS unaryExpression
                    {
                    dbg.location(1016,4);
                    MINUS360=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression4075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS360);

                    dbg.location(1016,10);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression4077);
                    unaryExpression361=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression361.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1016:26: -> ^( UNARY_MINUS unaryExpression )
                    {
                        dbg.location(1016,29);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1016:29: ^( UNARY_MINUS unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1016,31);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        dbg.location(1016,43);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1017:4: PLUS unaryExpression
                    {
                    dbg.location(1017,4);
                    PLUS362=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression4090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS362);

                    dbg.location(1017,9);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression4092);
                    unaryExpression363=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression363.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1017:25: -> ^( UNARY_PLUS unaryExpression )
                    {
                        dbg.location(1017,28);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1017:28: ^( UNARY_PLUS unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1017,30);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(UNARY_PLUS, "UNARY_PLUS"), root_1);

                        dbg.location(1017,41);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1018:4: unaryExpressionNotPlusMinus
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1018,4);
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression4105);
                    unaryExpressionNotPlusMinus364=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus364.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1019, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1021:1: unaryExpressionNotPlusMinus : ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | VOID unaryExpression -> ^( VOID unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );
    public final AS3Parser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        AS3Parser.unaryExpressionNotPlusMinus_return retval = new AS3Parser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DELETE365=null;
        Token VOID367=null;
        Token TYPEOF369=null;
        Token LNOT371=null;
        Token BNOT373=null;
        AS3Parser.postfixExpression_return postfixExpression366 = null;

        AS3Parser.unaryExpression_return unaryExpression368 = null;

        AS3Parser.unaryExpression_return unaryExpression370 = null;

        AS3Parser.unaryExpression_return unaryExpression372 = null;

        AS3Parser.unaryExpression_return unaryExpression374 = null;

        AS3Parser.postfixExpression_return postfixExpression375 = null;


        LinkedListTree DELETE365_tree=null;
        LinkedListTree VOID367_tree=null;
        LinkedListTree TYPEOF369_tree=null;
        LinkedListTree LNOT371_tree=null;
        LinkedListTree BNOT373_tree=null;
        RewriteRuleTokenStream stream_LNOT=new RewriteRuleTokenStream(adaptor,"token LNOT");
        RewriteRuleTokenStream stream_BNOT=new RewriteRuleTokenStream(adaptor,"token BNOT");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_TYPEOF=new RewriteRuleTokenStream(adaptor,"token TYPEOF");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_postfixExpression=new RewriteRuleSubtreeStream(adaptor,"rule postfixExpression");
        try { dbg.enterRule(getGrammarFileName(), "unaryExpressionNotPlusMinus");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1021, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1022:2: ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | VOID unaryExpression -> ^( VOID unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression )
            int alt93=6;
            try { dbg.enterDecision(93);

            try {
                isCyclicDecision = true;
                alt93 = dfa93.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(93);}

            switch (alt93) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1022:4: DELETE postfixExpression
                    {
                    dbg.location(1022,4);
                    DELETE365=(Token)match(input,DELETE,FOLLOW_DELETE_in_unaryExpressionNotPlusMinus4116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(DELETE365);

                    dbg.location(1022,11);
                    pushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4118);
                    postfixExpression366=postfixExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_postfixExpression.add(postfixExpression366.getTree());


                    // AST REWRITE
                    // elements: DELETE, postfixExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1022:29: -> ^( DELETE postfixExpression )
                    {
                        dbg.location(1022,32);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1022:32: ^( DELETE postfixExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1022,34);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_DELETE.nextNode(), root_1);

                        dbg.location(1022,41);
                        adaptor.addChild(root_1, stream_postfixExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1023:4: VOID unaryExpression
                    {
                    dbg.location(1023,4);
                    VOID367=(Token)match(input,VOID,FOLLOW_VOID_in_unaryExpressionNotPlusMinus4131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID367);

                    dbg.location(1023,9);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4133);
                    unaryExpression368=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression368.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, VOID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1023:25: -> ^( VOID unaryExpression )
                    {
                        dbg.location(1023,28);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1023:28: ^( VOID unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1023,30);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_VOID.nextNode(), root_1);

                        dbg.location(1023,35);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1024:4: TYPEOF unaryExpression
                    {
                    dbg.location(1024,4);
                    TYPEOF369=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus4146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPEOF.add(TYPEOF369);

                    dbg.location(1024,11);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4148);
                    unaryExpression370=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression370.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, TYPEOF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1024:27: -> ^( TYPEOF unaryExpression )
                    {
                        dbg.location(1024,30);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1024:30: ^( TYPEOF unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1024,32);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_TYPEOF.nextNode(), root_1);

                        dbg.location(1024,39);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1025:4: LNOT unaryExpression
                    {
                    dbg.location(1025,4);
                    LNOT371=(Token)match(input,LNOT,FOLLOW_LNOT_in_unaryExpressionNotPlusMinus4161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LNOT.add(LNOT371);

                    dbg.location(1025,9);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4163);
                    unaryExpression372=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression372.getTree());


                    // AST REWRITE
                    // elements: LNOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1025:25: -> ^( LNOT unaryExpression )
                    {
                        dbg.location(1025,28);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1025:28: ^( LNOT unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1025,30);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_LNOT.nextNode(), root_1);

                        dbg.location(1025,35);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1026:4: BNOT unaryExpression
                    {
                    dbg.location(1026,4);
                    BNOT373=(Token)match(input,BNOT,FOLLOW_BNOT_in_unaryExpressionNotPlusMinus4176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BNOT.add(BNOT373);

                    dbg.location(1026,9);
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4178);
                    unaryExpression374=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression374.getTree());


                    // AST REWRITE
                    // elements: BNOT, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1026:25: -> ^( BNOT unaryExpression )
                    {
                        dbg.location(1026,28);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1026:28: ^( BNOT unaryExpression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1026,30);
                        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_BNOT.nextNode(), root_1);

                        dbg.location(1026,35);
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1027:4: postfixExpression
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1027,4);
                    pushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4191);
                    postfixExpression375=postfixExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, postfixExpression375.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1028, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "unaryExpressionNotPlusMinus");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postfixExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postfixExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1031:1: postfixExpression : ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )* (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )? ;
    public final AS3Parser.postfixExpression_return postfixExpression() throws RecognitionException {
        AS3Parser.postfixExpression_return retval = new AS3Parser.postfixExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token rb=null;
        Token d=null;
        Token in=null;
        Token de=null;
        Token LBRACK377=null;
        Token E4X_DESC379=null;
        Token DOT381=null;
        Token LPAREN382=null;
        Token RPAREN384=null;
        Token STAR386=null;
        AS3Parser.propOrIdent_return poi = null;

        AS3Parser.primaryExpression_return primaryExpression376 = null;

        AS3Parser.expression_return expression378 = null;

        AS3Parser.qualifiedIdentifier_return qualifiedIdentifier380 = null;

        AS3Parser.expression_return expression383 = null;

        AS3Parser.e4xAttributeIdentifier_return e4xAttributeIdentifier385 = null;

        AS3Parser.arguments_return arguments387 = null;


        LinkedListTree rb_tree=null;
        LinkedListTree d_tree=null;
        LinkedListTree in_tree=null;
        LinkedListTree de_tree=null;
        LinkedListTree LBRACK377_tree=null;
        LinkedListTree E4X_DESC379_tree=null;
        LinkedListTree DOT381_tree=null;
        LinkedListTree LPAREN382_tree=null;
        LinkedListTree RPAREN384_tree=null;
        LinkedListTree STAR386_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleTokenStream stream_E4X_DESC=new RewriteRuleTokenStream(adaptor,"token E4X_DESC");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_propOrIdent=new RewriteRuleSubtreeStream(adaptor,"rule propOrIdent");
        RewriteRuleSubtreeStream stream_e4xAttributeIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule e4xAttributeIdentifier");
        RewriteRuleSubtreeStream stream_qualifiedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdentifier");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        try { dbg.enterRule(getGrammarFileName(), "postfixExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1031, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1032:2: ( ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )* (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1032:4: ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )* (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )?
            {
            dbg.location(1032,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1032:4: ( primaryExpression -> primaryExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1035:3: primaryExpression
            {
            dbg.location(1035,3);
            pushFollow(FOLLOW_primaryExpression_in_postfixExpression4212);
            primaryExpression376=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression376.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1035:21: -> primaryExpression
            {
                dbg.location(1035,24);
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            dbg.location(1036,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1036:4: (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )*
            try { dbg.enterSubRule(94);

            loop94:
            do {
                int alt94=8;
                try { dbg.enterDecision(94);

                try {
                    isCyclicDecision = true;
                    alt94 = dfa94.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(94);}

                switch (alt94) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1036:6: poi= propOrIdent[root_0, retval.start]
            	    {
            	    dbg.location(1036,9);
            	    pushFollow(FOLLOW_propOrIdent_in_postfixExpression4226);
            	    poi=propOrIdent(root_0, retval.start);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propOrIdent.add(poi.getTree());


            	    // AST REWRITE
            	    // elements: poi
            	    // token labels: 
            	    // rule labels: poi, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_poi=new RewriteRuleSubtreeStream(adaptor,"rule poi",poi!=null?poi.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1036:44: -> $poi
            	    {
            	        dbg.location(1036,47);
            	        adaptor.addChild(root_0, stream_poi.nextTree());

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1037:6: ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) )
            	    {
            	    dbg.location(1037,6);
            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1037:6: ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) )
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1037:7: LBRACK expression rb= RBRACK
            	    {
            	    dbg.location(1037,7);
            	    LBRACK377=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_postfixExpression4240); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK377);

            	    dbg.location(1037,14);
            	    pushFollow(FOLLOW_expression_in_postfixExpression4242);
            	    expression378=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression378.getTree());
            	    dbg.location(1037,27);
            	    rb=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_postfixExpression4246); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACK.add(rb);



            	    // AST REWRITE
            	    // elements: expression, postfixExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1037:35: -> ^( ARRAY_ACC $postfixExpression expression )
            	    {
            	        dbg.location(1037,38);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1037:38: ^( ARRAY_ACC $postfixExpression expression )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1037,40);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ARRAY_ACC, "ARRAY_ACC"), root_1);

            	        dbg.location(1037,50);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1037,69);
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }

            	    dbg.location(1037,82);
            	    if ( state.backtracking==0 ) {
            	      demarcate(root_0.getFirstChild()); root_0.getFirstChild().setStopToken((LinkedListToken)rb);
            	    }

            	    }
            	    break;
            	case 3 :
            	    dbg.enterAlt(3);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1038:6: E4X_DESC qualifiedIdentifier
            	    {
            	    dbg.location(1038,6);
            	    E4X_DESC379=(Token)match(input,E4X_DESC,FOLLOW_E4X_DESC_in_postfixExpression4267); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_E4X_DESC.add(E4X_DESC379);

            	    dbg.location(1038,15);
            	    pushFollow(FOLLOW_qualifiedIdentifier_in_postfixExpression4269);
            	    qualifiedIdentifier380=qualifiedIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualifiedIdentifier.add(qualifiedIdentifier380.getTree());


            	    // AST REWRITE
            	    // elements: E4X_DESC, qualifiedIdentifier, postfixExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1038:35: -> ^( E4X_DESC $postfixExpression qualifiedIdentifier )
            	    {
            	        dbg.location(1038,38);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1038:38: ^( E4X_DESC $postfixExpression qualifiedIdentifier )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1038,40);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot(stream_E4X_DESC.nextNode(), root_1);

            	        dbg.location(1038,49);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1038,68);
            	        adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 4 :
            	    dbg.enterAlt(4);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1039:6: DOT LPAREN expression RPAREN
            	    {
            	    dbg.location(1039,6);
            	    DOT381=(Token)match(input,DOT,FOLLOW_DOT_in_postfixExpression4287); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT381);

            	    dbg.location(1039,10);
            	    LPAREN382=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_postfixExpression4289); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN382);

            	    dbg.location(1039,17);
            	    pushFollow(FOLLOW_expression_in_postfixExpression4291);
            	    expression383=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression383.getTree());
            	    dbg.location(1039,28);
            	    RPAREN384=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_postfixExpression4293); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN384);



            	    // AST REWRITE
            	    // elements: postfixExpression, expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1039:35: -> ^( E4X_FILTER $postfixExpression expression )
            	    {
            	        dbg.location(1039,38);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1039:38: ^( E4X_FILTER $postfixExpression expression )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1039,40);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(E4X_FILTER, "E4X_FILTER"), root_1);

            	        dbg.location(1039,51);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1039,70);
            	        adaptor.addChild(root_1, stream_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 5 :
            	    dbg.enterAlt(5);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1040:6: d= DOT e4xAttributeIdentifier
            	    {
            	    dbg.location(1040,7);
            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_postfixExpression4313); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(d);

            	    dbg.location(1040,12);
            	    pushFollow(FOLLOW_e4xAttributeIdentifier_in_postfixExpression4315);
            	    e4xAttributeIdentifier385=e4xAttributeIdentifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_e4xAttributeIdentifier.add(e4xAttributeIdentifier385.getTree());


            	    // AST REWRITE
            	    // elements: postfixExpression, e4xAttributeIdentifier
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1040:35: -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier )
            	    {
            	        dbg.location(1040,38);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1040:38: ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1040,40);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PROPERTY_OR_IDENTIFIER, d), root_1);

            	        dbg.location(1040,67);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1040,86);
            	        adaptor.addChild(root_1, stream_e4xAttributeIdentifier.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 6 :
            	    dbg.enterAlt(6);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1041:6: d= DOT STAR
            	    {
            	    dbg.location(1041,7);
            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_postfixExpression4336); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(d);

            	    dbg.location(1041,12);
            	    STAR386=(Token)match(input,STAR,FOLLOW_STAR_in_postfixExpression4338); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_STAR.add(STAR386);



            	    // AST REWRITE
            	    // elements: STAR, postfixExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1041:17: -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR )
            	    {
            	        dbg.location(1041,20);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1041:20: ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1041,22);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PROPERTY_OR_IDENTIFIER, d), root_1);

            	        dbg.location(1041,49);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1041,68);
            	        adaptor.addChild(root_1, stream_STAR.nextNode());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 7 :
            	    dbg.enterAlt(7);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1042:6: ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) )
            	    {
            	    dbg.location(1042,6);
            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1042:6: ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) )
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1042:7: arguments
            	    {
            	    dbg.location(1042,7);
            	    pushFollow(FOLLOW_arguments_in_postfixExpression4358);
            	    arguments387=arguments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arguments.add(arguments387.getTree());


            	    // AST REWRITE
            	    // elements: postfixExpression, arguments
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1042:17: -> ^( METHOD_CALL $postfixExpression arguments )
            	    {
            	        dbg.location(1042,20);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1042:20: ^( METHOD_CALL $postfixExpression arguments )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1042,22);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

            	        dbg.location(1042,34);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1042,53);
            	        adaptor.addChild(root_1, stream_arguments.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }

            	    dbg.location(1042,65);
            	    if ( state.backtracking==0 ) {
            	      demarcate(root_0.getFirstChild());
            	    }

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);
            } finally {dbg.exitSubRule(94);}

            dbg.location(1047,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1047:3: (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )?
            int alt95=3;
            try { dbg.enterSubRule(95);
            try { dbg.enterDecision(95);

            try {
                isCyclicDecision = true;
                alt95 = dfa95.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(95);}

            switch (alt95) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1047:6: in= INC
                    {
                    dbg.location(1047,8);
                    in=(Token)match(input,INC,FOLLOW_INC_in_postfixExpression4394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INC.add(in);



                    // AST REWRITE
                    // elements: postfixExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1047:13: -> ^( POST_INC[$in] $postfixExpression)
                    {
                        dbg.location(1047,16);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1047:16: ^( POST_INC[$in] $postfixExpression)
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1047,18);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(POST_INC, in), root_1);

                        dbg.location(1047,32);
                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1048:6: de= DEC
                    {
                    dbg.location(1048,8);
                    de=(Token)match(input,DEC,FOLLOW_DEC_in_postfixExpression4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEC.add(de);



                    // AST REWRITE
                    // elements: postfixExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1048:13: -> ^( POST_DEC[$de] $postfixExpression)
                    {
                        dbg.location(1048,16);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1048:16: ^( POST_DEC[$de] $postfixExpression)
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1048,18);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(POST_DEC, de), root_1);

                        dbg.location(1048,32);
                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            } finally {dbg.exitSubRule(95);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1050, 3);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "postfixExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "postfixExpression"

    public static class e4xAttributeIdentifier_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "e4xAttributeIdentifier"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1053:1: e4xAttributeIdentifier : E4X_ATTRI ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) ) ;
    public final AS3Parser.e4xAttributeIdentifier_return e4xAttributeIdentifier() throws RecognitionException {
        AS3Parser.e4xAttributeIdentifier_return retval = new AS3Parser.e4xAttributeIdentifier_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token E4X_ATTRI388=null;
        Token STAR390=null;
        Token LBRACK391=null;
        Token RBRACK393=null;
        AS3Parser.qualifiedIdent_return qualifiedIdent389 = null;

        AS3Parser.expression_return expression392 = null;


        LinkedListTree E4X_ATTRI388_tree=null;
        LinkedListTree STAR390_tree=null;
        LinkedListTree LBRACK391_tree=null;
        LinkedListTree RBRACK393_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_E4X_ATTRI=new RewriteRuleTokenStream(adaptor,"token E4X_ATTRI");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try { dbg.enterRule(getGrammarFileName(), "e4xAttributeIdentifier");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1053, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1054:2: ( E4X_ATTRI ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1054:4: E4X_ATTRI ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) )
            {
            dbg.location(1054,4);
            E4X_ATTRI388=(Token)match(input,E4X_ATTRI,FOLLOW_E4X_ATTRI_in_e4xAttributeIdentifier4441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_E4X_ATTRI.add(E4X_ATTRI388);

            dbg.location(1055,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1055:3: ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) )
            int alt96=3;
            try { dbg.enterSubRule(96);
            try { dbg.enterDecision(96);

            try {
                isCyclicDecision = true;
                alt96 = dfa96.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(96);}

            switch (alt96) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1055:5: qualifiedIdent
                    {
                    dbg.location(1055,5);
                    pushFollow(FOLLOW_qualifiedIdent_in_e4xAttributeIdentifier4447);
                    qualifiedIdent389=qualifiedIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent389.getTree());


                    // AST REWRITE
                    // elements: qualifiedIdent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1055:20: -> ^( E4X_ATTRI_PROPERTY qualifiedIdent )
                    {
                        dbg.location(1055,23);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1055:23: ^( E4X_ATTRI_PROPERTY qualifiedIdent )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1055,25);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(E4X_ATTRI_PROPERTY, "E4X_ATTRI_PROPERTY"), root_1);

                        dbg.location(1055,44);
                        adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1056:5: STAR
                    {
                    dbg.location(1056,5);
                    STAR390=(Token)match(input,STAR,FOLLOW_STAR_in_e4xAttributeIdentifier4461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(STAR390);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1056:10: -> ^( E4X_ATTRI_STAR )
                    {
                        dbg.location(1056,13);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1056:13: ^( E4X_ATTRI_STAR )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1056,15);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(E4X_ATTRI_STAR, "E4X_ATTRI_STAR"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1057:5: LBRACK expression RBRACK
                    {
                    dbg.location(1057,5);
                    LBRACK391=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_e4xAttributeIdentifier4473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK391);

                    dbg.location(1057,12);
                    pushFollow(FOLLOW_expression_in_e4xAttributeIdentifier4475);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());
                    dbg.location(1057,23);
                    RBRACK393=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_e4xAttributeIdentifier4477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK393);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1057:30: -> ^( E4X_ATTRI_EXPR expression )
                    {
                        dbg.location(1057,33);
                        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1057:33: ^( E4X_ATTRI_EXPR expression )
                        {
                        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                        dbg.location(1057,35);
                        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(E4X_ATTRI_EXPR, "E4X_ATTRI_EXPR"), root_1);

                        dbg.location(1057,50);
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            } finally {dbg.exitSubRule(96);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1059, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "e4xAttributeIdentifier");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "e4xAttributeIdentifier"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1061:1: primaryExpression : ( UNDEFINED | SUPER | constant | arrayLiteral | objectLiteral | functionExpression | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );
    public final AS3Parser.primaryExpression_return primaryExpression() throws RecognitionException {
        AS3Parser.primaryExpression_return retval = new AS3Parser.primaryExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token UNDEFINED394=null;
        Token SUPER395=null;
        AS3Parser.constant_return constant396 = null;

        AS3Parser.arrayLiteral_return arrayLiteral397 = null;

        AS3Parser.objectLiteral_return objectLiteral398 = null;

        AS3Parser.functionExpression_return functionExpression399 = null;

        AS3Parser.newExpression_return newExpression400 = null;

        AS3Parser.encapsulatedExpression_return encapsulatedExpression401 = null;

        AS3Parser.e4xAttributeIdentifier_return e4xAttributeIdentifier402 = null;

        AS3Parser.qualifiedIdent_return qualifiedIdent403 = null;


        LinkedListTree UNDEFINED394_tree=null;
        LinkedListTree SUPER395_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "primaryExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1061, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1062:2: ( UNDEFINED | SUPER | constant | arrayLiteral | objectLiteral | functionExpression | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent )
            int alt97=10;
            try { dbg.enterDecision(97);

            try {
                isCyclicDecision = true;
                alt97 = dfa97.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(97);}

            switch (alt97) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1062:4: UNDEFINED
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1062,4);
                    UNDEFINED394=(Token)match(input,UNDEFINED,FOLLOW_UNDEFINED_in_primaryExpression4500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEFINED394_tree = (LinkedListTree)adaptor.create(UNDEFINED394);
                    adaptor.addChild(root_0, UNDEFINED394_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1063:4: SUPER
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1063,4);
                    SUPER395=(Token)match(input,SUPER,FOLLOW_SUPER_in_primaryExpression4505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUPER395_tree = (LinkedListTree)adaptor.create(SUPER395);
                    adaptor.addChild(root_0, SUPER395_tree);
                    }

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1064:4: constant
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1064,4);
                    pushFollow(FOLLOW_constant_in_primaryExpression4510);
                    constant396=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant396.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1065:4: arrayLiteral
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1065,4);
                    pushFollow(FOLLOW_arrayLiteral_in_primaryExpression4515);
                    arrayLiteral397=arrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayLiteral397.getTree());

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1066:4: objectLiteral
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1066,4);
                    pushFollow(FOLLOW_objectLiteral_in_primaryExpression4520);
                    objectLiteral398=objectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, objectLiteral398.getTree());

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1067:4: functionExpression
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1067,4);
                    pushFollow(FOLLOW_functionExpression_in_primaryExpression4525);
                    functionExpression399=functionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionExpression399.getTree());

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1068:4: newExpression
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1068,4);
                    pushFollow(FOLLOW_newExpression_in_primaryExpression4530);
                    newExpression400=newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newExpression400.getTree());

                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1069:4: encapsulatedExpression
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1069,4);
                    pushFollow(FOLLOW_encapsulatedExpression_in_primaryExpression4535);
                    encapsulatedExpression401=encapsulatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, encapsulatedExpression401.getTree());

                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1070:4: e4xAttributeIdentifier
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1070,4);
                    pushFollow(FOLLOW_e4xAttributeIdentifier_in_primaryExpression4540);
                    e4xAttributeIdentifier402=e4xAttributeIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e4xAttributeIdentifier402.getTree());

                    }
                    break;
                case 10 :
                    dbg.enterAlt(10);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1071:4: qualifiedIdent
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1071,4);
                    pushFollow(FOLLOW_qualifiedIdent_in_primaryExpression4545);
                    qualifiedIdent403=qualifiedIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent403.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1072, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "primaryExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class propOrIdent_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propOrIdent"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1092:1: propOrIdent[LinkedListTree identPrimary, Token startToken] : d= DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $propId) ;
    public final AS3Parser.propOrIdent_return propOrIdent(LinkedListTree identPrimary, Token startToken) throws RecognitionException {
        AS3Parser.propOrIdent_return retval = new AS3Parser.propOrIdent_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token d=null;
        AS3Parser.qualifiedIdent_return propId = null;


        LinkedListTree d_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try { dbg.enterRule(getGrammarFileName(), "propOrIdent");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1092, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1093:2: (d= DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $propId) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1094:3: d= DOT propId= qualifiedIdent
            {
            dbg.location(1094,3);
            if ( state.backtracking==0 ) {
               retval.start = startToken; 
            }
            dbg.location(1095,4);
            d=(Token)match(input,DOT,FOLLOW_DOT_in_propOrIdent4584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(d);

            dbg.location(1095,15);
            pushFollow(FOLLOW_qualifiedIdent_in_propOrIdent4588);
            propId=qualifiedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedIdent.add(propId.getTree());


            // AST REWRITE
            // elements: propId
            // token labels: 
            // rule labels: retval, propId
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_propId=new RewriteRuleSubtreeStream(adaptor,"rule propId",propId!=null?propId.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1101:3: -> ^( PROPERTY_OR_IDENTIFIER[$d] $propId)
            {
                dbg.location(1101,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1101:6: ^( PROPERTY_OR_IDENTIFIER[$d] $propId)
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(1101,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PROPERTY_OR_IDENTIFIER, d), root_1);

                dbg.location(1101,35);
                adaptor.addChild(root_1, identPrimary);
                dbg.location(1101,51);
                adaptor.addChild(root_1, stream_propId.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1102, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propOrIdent");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propOrIdent"

    public static class constant_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1104:1: constant : ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL );
    public final AS3Parser.constant_return constant() throws RecognitionException {
        AS3Parser.constant_return retval = new AS3Parser.constant_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token STRING_LITERAL407=null;
        Token TRUE408=null;
        Token FALSE409=null;
        Token NULL410=null;
        AS3Parser.xmlLiteral_return xmlLiteral404 = null;

        AS3Parser.regexpLiteral_return regexpLiteral405 = null;

        AS3Parser.number_return number406 = null;


        LinkedListTree STRING_LITERAL407_tree=null;
        LinkedListTree TRUE408_tree=null;
        LinkedListTree FALSE409_tree=null;
        LinkedListTree NULL410_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "constant");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1104, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1105:2: ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL )
            int alt98=7;
            try { dbg.enterDecision(98);

            switch ( input.LA(1) ) {
            case LT:
                {
                alt98=1;
                }
                break;
            case DIV:
                {
                alt98=2;
                }
                break;
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
                {
                alt98=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt98=4;
                }
                break;
            case TRUE:
                {
                alt98=5;
                }
                break;
            case FALSE:
                {
                alt98=6;
                }
                break;
            case NULL:
                {
                alt98=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }

            } finally {dbg.exitDecision(98);}

            switch (alt98) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1105:4: xmlLiteral
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1105,4);
                    pushFollow(FOLLOW_xmlLiteral_in_constant4617);
                    xmlLiteral404=xmlLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlLiteral404.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1106:4: regexpLiteral
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1106,4);
                    pushFollow(FOLLOW_regexpLiteral_in_constant4622);
                    regexpLiteral405=regexpLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regexpLiteral405.getTree());

                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1107:4: number
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1107,4);
                    pushFollow(FOLLOW_number_in_constant4627);
                    number406=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number406.getTree());

                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1108:4: STRING_LITERAL
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1108,4);
                    STRING_LITERAL407=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_constant4632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING_LITERAL407_tree = (LinkedListTree)adaptor.create(STRING_LITERAL407);
                    adaptor.addChild(root_0, STRING_LITERAL407_tree);
                    }

                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1109:4: TRUE
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1109,4);
                    TRUE408=(Token)match(input,TRUE,FOLLOW_TRUE_in_constant4637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE408_tree = (LinkedListTree)adaptor.create(TRUE408);
                    adaptor.addChild(root_0, TRUE408_tree);
                    }

                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1110:4: FALSE
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1110,4);
                    FALSE409=(Token)match(input,FALSE,FOLLOW_FALSE_in_constant4642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE409_tree = (LinkedListTree)adaptor.create(FALSE409);
                    adaptor.addChild(root_0, FALSE409_tree);
                    }

                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1111:4: NULL
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1111,4);
                    NULL410=(Token)match(input,NULL,FOLLOW_NULL_in_constant4647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL410_tree = (LinkedListTree)adaptor.create(NULL410);
                    adaptor.addChild(root_0, NULL410_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1112, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "constant");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "constant"

    public static class number_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1114:1: number : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL );
    public final AS3Parser.number_return number() throws RecognitionException {
        AS3Parser.number_return retval = new AS3Parser.number_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token set411=null;

        LinkedListTree set411_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "number");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1114, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1114:8: ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(1114,8);
            set411=(Token)input.LT(1);
            if ( (input.LA(1)>=HEX_LITERAL && input.LA(1)<=FLOAT_LITERAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (LinkedListTree)adaptor.create(set411));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                dbg.recognitionException(mse);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1118, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "number");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "number"

    public static class xmlLiteral_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xmlLiteral"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1121:1: xmlLiteral : LT -> ^( XML_LITERAL ) ;
    public final AS3Parser.xmlLiteral_return xmlLiteral() throws RecognitionException {
        AS3Parser.xmlLiteral_return retval = new AS3Parser.xmlLiteral_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LT412=null;

        LinkedListTree LT412_tree=null;
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");


        		LinkedListTree xml = null;
        	
        try { dbg.enterRule(getGrammarFileName(), "xmlLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1121, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1125:2: ( LT -> ^( XML_LITERAL ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1128:3: LT
            {
            dbg.location(1128,3);
            LT412=(Token)match(input,LT,FOLLOW_LT_in_xmlLiteral4700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(LT412);

            dbg.location(1129,3);
            if ( state.backtracking==0 ) {
               xml=parseXMLLiteral(); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1130:3: -> ^( XML_LITERAL )
            {
                dbg.location(1130,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1130:6: ^( XML_LITERAL )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(1130,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(XML_LITERAL, "XML_LITERAL"), root_1);

                dbg.location(1130,20);
                adaptor.addChild(root_1, xml);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1131, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "xmlLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "xmlLiteral"

    public static class regexpLiteral_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regexpLiteral"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1133:1: regexpLiteral : s= DIV -> ^( REGEXP_LITERAL ) ;
    public final AS3Parser.regexpLiteral_return regexpLiteral() throws RecognitionException {
        AS3Parser.regexpLiteral_return retval = new AS3Parser.regexpLiteral_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token s=null;

        LinkedListTree s_tree=null;
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");


        		LinkedListTree regexp = null;
        	
        try { dbg.enterRule(getGrammarFileName(), "regexpLiteral");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1133, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1137:2: (s= DIV -> ^( REGEXP_LITERAL ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1137:4: s= DIV
            {
            dbg.location(1137,5);
            s=(Token)match(input,DIV,FOLLOW_DIV_in_regexpLiteral4733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(s);

            dbg.location(1137,10);
            if ( state.backtracking==0 ) {
               regexp=parseRegexpLiteral((LinkedListToken)s); 
            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1138:3: -> ^( REGEXP_LITERAL )
            {
                dbg.location(1138,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1138:6: ^( REGEXP_LITERAL )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(1138,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(REGEXP_LITERAL, "REGEXP_LITERAL"), root_1);

                dbg.location(1138,23);
                adaptor.addChild(root_1, regexp);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1139, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "regexpLiteral");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "regexpLiteral"

    public static class newExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "newExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1141:1: newExpression : NEW fullNewSubexpression ( ( LPAREN )=> arguments )? ;
    public final AS3Parser.newExpression_return newExpression() throws RecognitionException {
        AS3Parser.newExpression_return retval = new AS3Parser.newExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token NEW413=null;
        AS3Parser.fullNewSubexpression_return fullNewSubexpression414 = null;

        AS3Parser.arguments_return arguments415 = null;


        LinkedListTree NEW413_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "newExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1141, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:2: ( NEW fullNewSubexpression ( ( LPAREN )=> arguments )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:4: NEW fullNewSubexpression ( ( LPAREN )=> arguments )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(1142,7);
            NEW413=(Token)match(input,NEW,FOLLOW_NEW_in_newExpression4756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NEW413_tree = (LinkedListTree)adaptor.create(NEW413);
            root_0 = (LinkedListTree)adaptor.becomeRoot(NEW413_tree, root_0);
            }
            dbg.location(1142,9);
            pushFollow(FOLLOW_fullNewSubexpression_in_newExpression4759);
            fullNewSubexpression414=fullNewSubexpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fullNewSubexpression414.getTree());
            dbg.location(1142,30);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:30: ( ( LPAREN )=> arguments )?
            int alt99=2;
            try { dbg.enterSubRule(99);
            try { dbg.enterDecision(99);

            try {
                isCyclicDecision = true;
                alt99 = dfa99.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(99);}

            switch (alt99) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:31: ( LPAREN )=> arguments
                    {
                    dbg.location(1142,42);
                    pushFollow(FOLLOW_arguments_in_newExpression4767);
                    arguments415=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments415.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(99);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1143, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "newExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "newExpression"

    public static class fullNewSubexpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fullNewSubexpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1145:1: fullNewSubexpression : ( primaryExpression -> primaryExpression ) ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* ;
    public final AS3Parser.fullNewSubexpression_return fullNewSubexpression() throws RecognitionException {
        AS3Parser.fullNewSubexpression_return retval = new AS3Parser.fullNewSubexpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token d=null;
        AS3Parser.primaryExpression_return primaryExpression416 = null;

        AS3Parser.qualifiedIdent_return qualifiedIdent417 = null;

        AS3Parser.brackets_return brackets418 = null;


        LinkedListTree d_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_brackets=new RewriteRuleSubtreeStream(adaptor,"rule brackets");
        RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try { dbg.enterRule(getGrammarFileName(), "fullNewSubexpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1145, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1146:2: ( ( primaryExpression -> primaryExpression ) ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1146:4: ( primaryExpression -> primaryExpression ) ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
            {
            dbg.location(1146,4);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1146:4: ( primaryExpression -> primaryExpression )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1146:6: primaryExpression
            {
            dbg.location(1146,6);
            pushFollow(FOLLOW_primaryExpression_in_fullNewSubexpression4782);
            primaryExpression416=primaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primaryExpression.add(primaryExpression416.getTree());


            // AST REWRITE
            // elements: primaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1146:24: -> primaryExpression
            {
                dbg.location(1146,27);
                adaptor.addChild(root_0, stream_primaryExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            dbg.location(1148,3);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1148:3: ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
            try { dbg.enterSubRule(100);

            loop100:
            do {
                int alt100=3;
                try { dbg.enterDecision(100);

                try {
                    isCyclicDecision = true;
                    alt100 = dfa100.predict(input);
                }
                catch (NoViableAltException nvae) {
                    dbg.recognitionException(nvae);
                    throw nvae;
                }
                } finally {dbg.exitDecision(100);}

                switch (alt100) {
            	case 1 :
            	    dbg.enterAlt(1);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1148:5: ( DOT )=>d= DOT qualifiedIdent
            	    {
            	    dbg.location(1148,14);
            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_fullNewSubexpression4803); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(d);

            	    dbg.location(1148,19);
            	    pushFollow(FOLLOW_qualifiedIdent_in_fullNewSubexpression4805);
            	    qualifiedIdent417=qualifiedIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent417.getTree());


            	    // AST REWRITE
            	    // elements: qualifiedIdent, fullNewSubexpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1148:34: -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent )
            	    {
            	        dbg.location(1148,37);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1148:37: ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1148,39);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(PROPERTY_OR_IDENTIFIER, d), root_1);

            	        dbg.location(1148,66);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1148,88);
            	        adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 2 :
            	    dbg.enterAlt(2);

            	    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1149:5: ( LBRACK )=> brackets
            	    {
            	    dbg.location(1149,16);
            	    pushFollow(FOLLOW_brackets_in_fullNewSubexpression4828);
            	    brackets418=brackets();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_brackets.add(brackets418.getTree());


            	    // AST REWRITE
            	    // elements: brackets, fullNewSubexpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (LinkedListTree)adaptor.nil();
            	    // 1149:25: -> ^( ARRAY_ACC $fullNewSubexpression brackets )
            	    {
            	        dbg.location(1149,28);
            	        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1149:28: ^( ARRAY_ACC $fullNewSubexpression brackets )
            	        {
            	        LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
            	        dbg.location(1149,30);
            	        root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ARRAY_ACC, "ARRAY_ACC"), root_1);

            	        dbg.location(1149,40);
            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        dbg.location(1149,62);
            	        adaptor.addChild(root_1, stream_brackets.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);
            } finally {dbg.exitSubRule(100);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1151, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "fullNewSubexpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "fullNewSubexpression"

    public static class propertyOperator_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyOperator"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1153:1: propertyOperator : ( DOT qualifiedIdent | brackets );
    public final AS3Parser.propertyOperator_return propertyOperator() throws RecognitionException {
        AS3Parser.propertyOperator_return retval = new AS3Parser.propertyOperator_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token DOT419=null;
        AS3Parser.qualifiedIdent_return qualifiedIdent420 = null;

        AS3Parser.brackets_return brackets421 = null;


        LinkedListTree DOT419_tree=null;

        try { dbg.enterRule(getGrammarFileName(), "propertyOperator");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1153, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1154:2: ( DOT qualifiedIdent | brackets )
            int alt101=2;
            try { dbg.enterDecision(101);

            int LA101_0 = input.LA(1);

            if ( (LA101_0==DOT) ) {
                alt101=1;
            }
            else if ( (LA101_0==LBRACK) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(101);}

            switch (alt101) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1154:4: DOT qualifiedIdent
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1154,7);
                    DOT419=(Token)match(input,DOT,FOLLOW_DOT_in_propertyOperator4855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT419_tree = (LinkedListTree)adaptor.create(DOT419);
                    root_0 = (LinkedListTree)adaptor.becomeRoot(DOT419_tree, root_0);
                    }
                    dbg.location(1154,9);
                    pushFollow(FOLLOW_qualifiedIdent_in_propertyOperator4858);
                    qualifiedIdent420=qualifiedIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent420.getTree());

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1155:4: brackets
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1155,4);
                    pushFollow(FOLLOW_brackets_in_propertyOperator4863);
                    brackets421=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets421.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1156, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "propertyOperator");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "propertyOperator"

    public static class brackets_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1158:1: brackets : LBRACK expressionList RBRACK ;
    public final AS3Parser.brackets_return brackets() throws RecognitionException {
        AS3Parser.brackets_return retval = new AS3Parser.brackets_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LBRACK422=null;
        Token RBRACK424=null;
        AS3Parser.expressionList_return expressionList423 = null;


        LinkedListTree LBRACK422_tree=null;
        LinkedListTree RBRACK424_tree=null;


        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "brackets");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1158, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1162:2: ( LBRACK expressionList RBRACK )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1162:4: LBRACK expressionList RBRACK
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(1162,4);
            LBRACK422=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_brackets4879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK422_tree = (LinkedListTree)adaptor.create(LBRACK422);
            adaptor.addChild(root_0, LBRACK422_tree);
            }
            dbg.location(1162,11);
            pushFollow(FOLLOW_expressionList_in_brackets4881);
            expressionList423=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList423.getTree());
            dbg.location(1162,26);
            RBRACK424=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_brackets4883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK424_tree = (LinkedListTree)adaptor.create(RBRACK424);
            adaptor.addChild(root_0, RBRACK424_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1163, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "brackets");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "brackets"

    public static class encapsulatedExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "encapsulatedExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1165:1: encapsulatedExpression : LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) ;
    public final AS3Parser.encapsulatedExpression_return encapsulatedExpression() throws RecognitionException {
        InOperator_stack.push(new InOperator_scope());

        AS3Parser.encapsulatedExpression_return retval = new AS3Parser.encapsulatedExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token LPAREN425=null;
        Token RPAREN427=null;
        AS3Parser.assignmentExpression_return assignmentExpression426 = null;


        LinkedListTree LPAREN425_tree=null;
        LinkedListTree RPAREN427_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");

        	((InOperator_scope)InOperator_stack.peek()).allowed = true;

        try { dbg.enterRule(getGrammarFileName(), "encapsulatedExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1165, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1170:2: ( LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1170:4: LPAREN assignmentExpression RPAREN
            {
            dbg.location(1170,4);
            LPAREN425=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_encapsulatedExpression4904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN425);

            dbg.location(1170,11);
            pushFollow(FOLLOW_assignmentExpression_in_encapsulatedExpression4906);
            assignmentExpression426=assignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_assignmentExpression.add(assignmentExpression426.getTree());
            dbg.location(1170,32);
            RPAREN427=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_encapsulatedExpression4908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN427);



            // AST REWRITE
            // elements: assignmentExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1171:3: -> ^( ENCPS_EXPR assignmentExpression )
            {
                dbg.location(1171,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1171:6: ^( ENCPS_EXPR assignmentExpression )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(1171,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(ENCPS_EXPR, "ENCPS_EXPR"), root_1);

                dbg.location(1171,19);
                adaptor.addChild(root_1, stream_assignmentExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
            InOperator_stack.pop();

        }
        dbg.location(1172, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "encapsulatedExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "encapsulatedExpression"

    public static class functionSignature_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionSignature"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1174:1: functionSignature : parameterDeclarationList ( typeExpression )? ;
    public final AS3Parser.functionSignature_return functionSignature() throws RecognitionException {
        AS3Parser.functionSignature_return retval = new AS3Parser.functionSignature_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.parameterDeclarationList_return parameterDeclarationList428 = null;

        AS3Parser.typeExpression_return typeExpression429 = null;



        try { dbg.enterRule(getGrammarFileName(), "functionSignature");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1174, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1175:2: ( parameterDeclarationList ( typeExpression )? )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1175:4: parameterDeclarationList ( typeExpression )?
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(1175,4);
            pushFollow(FOLLOW_parameterDeclarationList_in_functionSignature4929);
            parameterDeclarationList428=parameterDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterDeclarationList428.getTree());
            dbg.location(1175,29);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1175:29: ( typeExpression )?
            int alt102=2;
            try { dbg.enterSubRule(102);
            try { dbg.enterDecision(102);

            int LA102_0 = input.LA(1);

            if ( (LA102_0==COLON) ) {
                alt102=1;
            }
            } finally {dbg.exitDecision(102);}

            switch (alt102) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1175:29: typeExpression
                    {
                    dbg.location(1175,29);
                    pushFollow(FOLLOW_typeExpression_in_functionSignature4931);
                    typeExpression429=typeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeExpression429.getTree());

                    }
                    break;

            }
            } finally {dbg.exitSubRule(102);}


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1176, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionSignature");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "functionSignature"

    public static class functionCommon_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCommon"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1179:1: functionCommon : functionSignature block ;
    public final AS3Parser.functionCommon_return functionCommon() throws RecognitionException {
        AS3Parser.functionCommon_return retval = new AS3Parser.functionCommon_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        AS3Parser.functionSignature_return functionSignature430 = null;

        AS3Parser.block_return block431 = null;



        try { dbg.enterRule(getGrammarFileName(), "functionCommon");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1179, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1180:2: ( functionSignature block )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1180:4: functionSignature block
            {
            root_0 = (LinkedListTree)adaptor.nil();

            dbg.location(1180,4);
            pushFollow(FOLLOW_functionSignature_in_functionCommon4944);
            functionSignature430=functionSignature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, functionSignature430.getTree());
            dbg.location(1180,22);
            pushFollow(FOLLOW_block_in_functionCommon4946);
            block431=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block431.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1181, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionCommon");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "functionCommon"

    public static class functionExpression_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionExpression"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1183:1: functionExpression : FUNCTION ( IDENT )? functionCommon -> ^( FUNC_DEF ( IDENT )? functionCommon ) ;
    public final AS3Parser.functionExpression_return functionExpression() throws RecognitionException {
        AS3Parser.functionExpression_return retval = new AS3Parser.functionExpression_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token FUNCTION432=null;
        Token IDENT433=null;
        AS3Parser.functionCommon_return functionCommon434 = null;


        LinkedListTree FUNCTION432_tree=null;
        LinkedListTree IDENT433_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_functionCommon=new RewriteRuleSubtreeStream(adaptor,"rule functionCommon");
        try { dbg.enterRule(getGrammarFileName(), "functionExpression");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1183, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1184:2: ( FUNCTION ( IDENT )? functionCommon -> ^( FUNC_DEF ( IDENT )? functionCommon ) )
            dbg.enterAlt(1);

            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1184:4: FUNCTION ( IDENT )? functionCommon
            {
            dbg.location(1184,4);
            FUNCTION432=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionExpression4957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION432);

            dbg.location(1184,13);
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1184:13: ( IDENT )?
            int alt103=2;
            try { dbg.enterSubRule(103);
            try { dbg.enterDecision(103);

            int LA103_0 = input.LA(1);

            if ( (LA103_0==IDENT) ) {
                alt103=1;
            }
            } finally {dbg.exitDecision(103);}

            switch (alt103) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1184:13: IDENT
                    {
                    dbg.location(1184,13);
                    IDENT433=(Token)match(input,IDENT,FOLLOW_IDENT_in_functionExpression4959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT433);


                    }
                    break;

            }
            } finally {dbg.exitSubRule(103);}

            dbg.location(1184,20);
            pushFollow(FOLLOW_functionCommon_in_functionExpression4962);
            functionCommon434=functionCommon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionCommon.add(functionCommon434.getTree());


            // AST REWRITE
            // elements: IDENT, functionCommon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (LinkedListTree)adaptor.nil();
            // 1185:3: -> ^( FUNC_DEF ( IDENT )? functionCommon )
            {
                dbg.location(1185,6);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1185:6: ^( FUNC_DEF ( IDENT )? functionCommon )
                {
                LinkedListTree root_1 = (LinkedListTree)adaptor.nil();
                dbg.location(1185,8);
                root_1 = (LinkedListTree)adaptor.becomeRoot((LinkedListTree)adaptor.create(FUNC_DEF, "FUNC_DEF"), root_1);

                dbg.location(1185,17);
                // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1185:17: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    dbg.location(1185,17);
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                dbg.location(1185,24);
                adaptor.addChild(root_1, stream_functionCommon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1186, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "functionExpression");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "functionExpression"

    public static class ident_return extends ParserRuleReturnScope {
        LinkedListTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ident"
    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1189:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );
    public final AS3Parser.ident_return ident() throws RecognitionException {
        AS3Parser.ident_return retval = new AS3Parser.ident_return();
        retval.start = input.LT(1);

        LinkedListTree root_0 = null;

        Token i=null;
        Token IDENT435=null;

        LinkedListTree i_tree=null;
        LinkedListTree IDENT435_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_GET=new RewriteRuleTokenStream(adaptor,"token GET");
        RewriteRuleTokenStream stream_USE=new RewriteRuleTokenStream(adaptor,"token USE");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_XML=new RewriteRuleTokenStream(adaptor,"token XML");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DYNAMIC=new RewriteRuleTokenStream(adaptor,"token DYNAMIC");

        try { dbg.enterRule(getGrammarFileName(), "ident");
        if ( getRuleLevel()==0 ) {dbg.commence();}
        incRuleLevel();
        dbg.location(1189, 1);

        try {
            // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1190:2: ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] )
            int alt104=9;
            try { dbg.enterDecision(104);

            try {
                isCyclicDecision = true;
                alt104 = dfa104.predict(input);
            }
            catch (NoViableAltException nvae) {
                dbg.recognitionException(nvae);
                throw nvae;
            }
            } finally {dbg.exitDecision(104);}

            switch (alt104) {
                case 1 :
                    dbg.enterAlt(1);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1190:4: IDENT
                    {
                    root_0 = (LinkedListTree)adaptor.nil();

                    dbg.location(1190,4);
                    IDENT435=(Token)match(input,IDENT,FOLLOW_IDENT_in_ident4987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT435_tree = (LinkedListTree)adaptor.create(IDENT435);
                    adaptor.addChild(root_0, IDENT435_tree);
                    }

                    }
                    break;
                case 2 :
                    dbg.enterAlt(2);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1191:4: i= USE
                    {
                    dbg.location(1191,5);
                    i=(Token)match(input,USE,FOLLOW_USE_in_ident4994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_USE.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1191:10: -> IDENT[$i]
                    {
                        dbg.location(1191,13);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    dbg.enterAlt(3);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1192:4: i= XML
                    {
                    dbg.location(1192,5);
                    i=(Token)match(input,XML,FOLLOW_XML_in_ident5006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_XML.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1192:10: -> IDENT[$i]
                    {
                        dbg.location(1192,13);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    dbg.enterAlt(4);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1193:4: i= DYNAMIC
                    {
                    dbg.location(1193,5);
                    i=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_ident5018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DYNAMIC.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1193:14: -> IDENT[$i]
                    {
                        dbg.location(1193,17);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    dbg.enterAlt(5);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1194:4: i= NAMESPACE
                    {
                    dbg.location(1194,5);
                    i=(Token)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_ident5030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1194:16: -> IDENT[$i]
                    {
                        dbg.location(1194,19);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    dbg.enterAlt(6);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1195:4: i= IS
                    {
                    dbg.location(1195,5);
                    i=(Token)match(input,IS,FOLLOW_IS_in_ident5042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IS.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1195:9: -> IDENT[$i]
                    {
                        dbg.location(1195,12);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    dbg.enterAlt(7);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1196:4: i= AS
                    {
                    dbg.location(1196,5);
                    i=(Token)match(input,AS,FOLLOW_AS_in_ident5054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1196:9: -> IDENT[$i]
                    {
                        dbg.location(1196,12);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    dbg.enterAlt(8);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1197:4: i= GET
                    {
                    dbg.location(1197,5);
                    i=(Token)match(input,GET,FOLLOW_GET_in_ident5066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GET.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1197:10: -> IDENT[$i]
                    {
                        dbg.location(1197,13);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    dbg.enterAlt(9);

                    // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1198:4: i= SET
                    {
                    dbg.location(1198,5);
                    i=(Token)match(input,SET,FOLLOW_SET_in_ident5078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(i);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (LinkedListTree)adaptor.nil();
                    // 1198:10: -> IDENT[$i]
                    {
                        dbg.location(1198,13);
                        adaptor.addChild(root_0, (LinkedListTree)adaptor.create(IDENT, i));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (LinkedListTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
             finally {
        }
        dbg.location(1199, 2);

        }
        finally {
            dbg.exitRule(getGrammarFileName(), "ident");
            decRuleLevel();
            if ( getRuleLevel()==0 ) {dbg.terminate();}
        }

        return retval;
    }
    // $ANTLR end "ident"

    // $ANTLR start synpred1_AS3
    public final void synpred1_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:437:4: ( LCURLY )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:437:5: LCURLY
        {
        dbg.location(437,5);
        match(input,LCURLY,FOLLOW_LCURLY_in_synpred1_AS31513); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_AS3

    // $ANTLR start synpred2_AS3
    public final void synpred2_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:498:4: ( ELSE )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:498:5: ELSE
        {
        dbg.location(498,5);
        match(input,ELSE,FOLLOW_ELSE_in_synpred2_AS31717); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_AS3

    // $ANTLR start synpred3_AS3
    public final void synpred3_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:582:5: ( forInClauseDecl IN )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:582:6: forInClauseDecl IN
        {
        dbg.location(582,6);
        pushFollow(FOLLOW_forInClauseDecl_in_synpred3_AS32108);
        forInClauseDecl();

        state._fsp--;
        if (state.failed) return ;
        dbg.location(582,22);
        match(input,IN,FOLLOW_IN_in_synpred3_AS32110); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_AS3

    // $ANTLR start synpred4_AS3
    public final void synpred4_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:877:4: ( assignmentOperator )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:877:5: assignmentOperator
        {
        dbg.location(877,5);
        pushFollow(FOLLOW_assignmentOperator_in_synpred4_AS33424);
        assignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_AS3

    // $ANTLR start synpred5_AS3
    public final void synpred5_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:969:4: ( relationalOperator )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:969:5: relationalOperator
        {
        dbg.location(969,5);
        pushFollow(FOLLOW_relationalOperator_in_synpred5_AS33822);
        relationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_AS3

    // $ANTLR start synpred6_AS3
    public final void synpred6_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:31: ( LPAREN )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1142:32: LPAREN
        {
        dbg.location(1142,32);
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred6_AS34763); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_AS3

    // $ANTLR start synpred7_AS3
    public final void synpred7_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1148:5: ( DOT )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1148:6: DOT
        {
        dbg.location(1148,6);
        match(input,DOT,FOLLOW_DOT_in_synpred7_AS34797); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_AS3

    // $ANTLR start synpred8_AS3
    public final void synpred8_AS3_fragment() throws RecognitionException {   
        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1149:5: ( LBRACK )
        dbg.enterAlt(1);

        // /Users/eliseev/Projects/metaas-src/src/main/antlr/org/asdt/core/internal/antlr/AS3.g:1149:6: LBRACK
        {
        dbg.location(1149,6);
        match(input,LBRACK,FOLLOW_LBRACK_in_synpred8_AS34824); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_AS3

    // Delegated rules

    public final boolean synpred7_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred7_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred2_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred8_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred3_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred6_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred5_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred4_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_AS3() {
        state.backtracking++;
        dbg.beginBacktrack(state.backtracking);
        int start = input.mark();
        try {
            synpred1_AS3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        dbg.endBacktrack(state.backtracking, success);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA104 dfa104 = new DFA104(this);
    static final String DFA1_eotS =
        "\20\uffff";
    static final String DFA1_eofS =
        "\20\uffff";
    static final String DFA1_minS =
        "\1\74\17\uffff";
    static final String DFA1_maxS =
        "\1\u00be\17\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\1\15\uffff\1\2";
    static final String DFA1_specialS =
        "\20\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\17\3\uffff\3\1\52\uffff\6\1\1\uffff\4\1\103\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "176:4: ( as2CompilationUnit | as3CompilationUnit )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA2_eotS =
        "\17\uffff";
    static final String DFA2_eofS =
        "\17\uffff";
    static final String DFA2_minS =
        "\1\100\16\uffff";
    static final String DFA2_maxS =
        "\1\u00be\16\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA2_specialS =
        "\17\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\16\2\1\52\uffff\6\1\1\uffff\4\1\103\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()* loopback of 182:4: ( importDefinition )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA4_eotS =
        "\25\uffff";
    static final String DFA4_eofS =
        "\1\1\24\uffff";
    static final String DFA4_minS =
        "\1\77\24\uffff";
    static final String DFA4_maxS =
        "\1\u00be\24\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\22\uffff";
    static final String DFA4_specialS =
        "\25\uffff}>";
    static final String[] DFA4_transitionS = {
            "\4\2\5\uffff\1\2\2\uffff\4\2\36\uffff\6\2\1\uffff\4\2\103\uffff"+
            "\4\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:3: ( packageBlockEntry )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA5_eotS =
        "\14\uffff";
    static final String DFA5_eofS =
        "\14\uffff";
    static final String DFA5_minS =
        "\1\75\13\uffff";
    static final String DFA5_maxS =
        "\1\u0092\13\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA5_specialS =
        "\14\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\13\13\uffff\4\1\31\uffff\1\1\6\uffff\5\1\5\uffff\1\1\31\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "201:13: ( identifier )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA6_eotS =
        "\25\uffff";
    static final String DFA6_eofS =
        "\25\uffff";
    static final String DFA6_minS =
        "\1\76\24\uffff";
    static final String DFA6_maxS =
        "\1\u00be\24\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\2\1\1\22\uffff";
    static final String DFA6_specialS =
        "\25\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\4\2\5\uffff\1\2\2\uffff\4\2\36\uffff\6\2\1\uffff\4\2\103"+
            "\uffff\4\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:3: ( packageBlockEntry )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA8_eotS =
        "\24\uffff";
    static final String DFA8_eofS =
        "\24\uffff";
    static final String DFA8_minS =
        "\1\77\23\uffff";
    static final String DFA8_maxS =
        "\1\u00be\23\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\1\1\2\20\uffff\1\3";
    static final String DFA8_specialS =
        "\24\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\23\1\1\2\2\5\uffff\1\2\2\uffff\4\2\36\uffff\6\2\1\uffff\4"+
            "\2\103\uffff\4\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "213:4: ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA14_eotS =
        "\21\uffff";
    static final String DFA14_eofS =
        "\21\uffff";
    static final String DFA14_minS =
        "\1\76\20\uffff";
    static final String DFA14_maxS =
        "\1\u00be\20\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\1\1\16\uffff";
    static final String DFA14_specialS =
        "\21\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\4\uffff\2\2\36\uffff"+
            "\6\2\1\uffff\4\2\103\uffff\4\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 284:3: ( typeBlockEntry )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA16_eotS =
        "\20\uffff";
    static final String DFA16_eofS =
        "\20\uffff";
    static final String DFA16_minS =
        "\1\100\17\uffff";
    static final String DFA16_maxS =
        "\1\u00be\17\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\1\14\uffff\1\2\1\3";
    static final String DFA16_specialS =
        "\20\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\16\5\uffff\1\17\1\uffff\1\1\4\uffff\2\1\36\uffff\6\1\1\uffff"+
            "\4\1\103\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "289:1: typeBlockEntry : (a= annotations m= modifiers ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] ) | importDefinition | as2IncludeDirective );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA19_eotS =
        "\36\uffff";
    static final String DFA19_eofS =
        "\36\uffff";
    static final String DFA19_minS =
        "\2\111\7\uffff\1\111\24\uffff";
    static final String DFA19_maxS =
        "\2\u0092\7\uffff\1\u0092\24\uffff";
    static final String DFA19_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\22\uffff";
    static final String DFA19_specialS =
        "\36\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\1\1\11\2\2\31\uffff\1\2\6\uffff\1\2\11\uffff\1\2\31\uffff"+
            "\2\2",
            "\4\13\3\uffff\1\2\25\uffff\1\13\6\uffff\1\13\11\uffff\1\13"+
            "\31\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\13\3\uffff\1\2\25\uffff\1\13\6\uffff\1\13\11\uffff\1\13"+
            "\31\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "329:4: ( accessorRole )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA25_eotS =
        "\15\uffff";
    static final String DFA25_eofS =
        "\15\uffff";
    static final String DFA25_minS =
        "\1\111\14\uffff";
    static final String DFA25_maxS =
        "\1\u0092\14\uffff";
    static final String DFA25_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA25_specialS =
        "\15\uffff}>";
    static final String[] DFA25_transitionS = {
            "\4\1\1\uffff\1\1\2\uffff\1\14\1\1\23\uffff\1\1\6\uffff\1\1\11"+
            "\uffff\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "385:3: ( parameterDeclaration ( COMMA parameterDeclaration )* )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA26_eotS =
        "\14\uffff";
    static final String DFA26_eofS =
        "\14\uffff";
    static final String DFA26_minS =
        "\1\111\13\uffff";
    static final String DFA26_maxS =
        "\1\u0092\13\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA26_specialS =
        "\14\uffff}>";
    static final String[] DFA26_transitionS = {
            "\4\1\1\uffff\1\1\3\uffff\1\13\23\uffff\1\1\6\uffff\1\1\11\uffff"+
            "\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "393:1: parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA27_eotS =
        "\13\uffff";
    static final String DFA27_eofS =
        "\13\uffff";
    static final String DFA27_minS =
        "\1\111\12\uffff";
    static final String DFA27_maxS =
        "\1\u0092\12\uffff";
    static final String DFA27_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA27_specialS =
        "\13\uffff}>";
    static final String[] DFA27_transitionS = {
            "\4\2\1\uffff\1\1\27\uffff\1\2\6\uffff\1\2\11\uffff\1\2\31\uffff"+
            "\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "398:4: ( CONST )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA30_eotS =
        "\14\uffff";
    static final String DFA30_eofS =
        "\14\uffff";
    static final String DFA30_minS =
        "\1\104\13\uffff";
    static final String DFA30_maxS =
        "\1\u0092\13\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\uffff";
    static final String DFA30_specialS =
        "\14\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\12\4\uffff\4\1\4\uffff\1\12\24\uffff\1\1\6\uffff\1\1\11\uffff"+
            "\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "412:9: ( ident )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA31_eotS =
        "\62\uffff";
    static final String DFA31_eofS =
        "\62\uffff";
    static final String DFA31_minS =
        "\1\75\61\uffff";
    static final String DFA31_maxS =
        "\1\u00ac\61\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\1\57\uffff";
    static final String DFA31_specialS =
        "\62\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\2\1\1\1\2\7\uffff\10\2\1\uffff\1\2\2\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\4\2\2\uffff\2\2\2\uffff\4\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\6\2\4\uffff\1\2\31\uffff\2\2\4\uffff\3\2\1\uffff"+
            "\6\2\1\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 416:11: ( blockEntry )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA32_eotS =
        "\144\uffff";
    static final String DFA32_eofS =
        "\144\uffff";
    static final String DFA32_minS =
        "\2\75\43\uffff\1\120\32\uffff\1\0\11\uffff\1\0\1\uffff\10\0\15\uffff"+
        "\1\0\2\uffff";
    static final String DFA32_maxS =
        "\2\u00ac\43\uffff\1\141\32\uffff\1\0\11\uffff\1\0\1\uffff\10\0\15"+
        "\uffff\1\0\2\uffff";
    static final String DFA32_acceptS =
        "\2\uffff\1\2\1\3\40\uffff\1\4\1\uffff\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\17\1\1\uffff\11\1\1\uffff\1\1\10\uffff"+
        "\15\1\1\uffff\1\5\1\6";
    static final String DFA32_specialS =
        "\1\uffff\1\0\76\uffff\1\1\11\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\15\uffff\1\13\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\1\1\uffff\1\60\7\uffff\6\3\2\2\1\uffff\1\3\2\uffff\1\44\1"+
            "\uffff\1\55\1\56\2\uffff\1\54\1\53\1\52\1\51\2\uffff\1\57\1"+
            "\45\2\uffff\1\46\1\47\1\50\1\3\1\uffff\1\3\1\uffff\1\3\2\uffff"+
            "\6\3\4\uffff\1\3\31\uffff\2\3\4\uffff\3\3\1\uffff\6\3\1\uffff"+
            "\13\3",
            "\1\61\1\141\1\140\7\uffff\1\101\1\106\1\122\1\123\1\117\1\114"+
            "\2\62\1\uffff\1\110\2\uffff\1\124\1\uffff\1\135\1\136\2\uffff"+
            "\1\134\1\133\1\132\1\131\2\uffff\1\137\1\125\2\uffff\1\126\1"+
            "\127\1\130\1\115\1\uffff\1\76\1\uffff\1\70\2\uffff\1\112\4\113"+
            "\1\105\4\uffff\1\116\31\uffff\1\120\1\121\4\uffff\1\66\1\65"+
            "\1\77\1\uffff\1\63\1\64\1\67\1\71\1\72\1\73\1\uffff\1\111\1"+
            "\74\1\75\1\102\1\103\1\104\4\100\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\143\20\uffff\1\142",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "436:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | SEMI );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA32_1==LCURLY) && (synpred1_AS3())) {s = 49;}

                        else if ( ((LA32_1>=VAR && LA32_1<=CONST)) && (synpred1_AS3())) {s = 50;}

                        else if ( (LA32_1==INC) && (synpred1_AS3())) {s = 51;}

                        else if ( (LA32_1==DEC) && (synpred1_AS3())) {s = 52;}

                        else if ( (LA32_1==MINUS) && (synpred1_AS3())) {s = 53;}

                        else if ( (LA32_1==PLUS) && (synpred1_AS3())) {s = 54;}

                        else if ( (LA32_1==DELETE) && (synpred1_AS3())) {s = 55;}

                        else if ( (LA32_1==VOID) && (synpred1_AS3())) {s = 56;}

                        else if ( (LA32_1==TYPEOF) && (synpred1_AS3())) {s = 57;}

                        else if ( (LA32_1==LNOT) && (synpred1_AS3())) {s = 58;}

                        else if ( (LA32_1==BNOT) && (synpred1_AS3())) {s = 59;}

                        else if ( (LA32_1==UNDEFINED) && (synpred1_AS3())) {s = 60;}

                        else if ( (LA32_1==SUPER) && (synpred1_AS3())) {s = 61;}

                        else if ( (LA32_1==LT) && (synpred1_AS3())) {s = 62;}

                        else if ( (LA32_1==DIV) && (synpred1_AS3())) {s = 63;}

                        else if ( ((LA32_1>=HEX_LITERAL && LA32_1<=FLOAT_LITERAL)) ) {s = 64;}

                        else if ( (LA32_1==STRING_LITERAL) && (synpred1_AS3())) {s = 65;}

                        else if ( (LA32_1==TRUE) && (synpred1_AS3())) {s = 66;}

                        else if ( (LA32_1==FALSE) && (synpred1_AS3())) {s = 67;}

                        else if ( (LA32_1==NULL) && (synpred1_AS3())) {s = 68;}

                        else if ( (LA32_1==LBRACK) && (synpred1_AS3())) {s = 69;}

                        else if ( (LA32_1==FUNCTION) && (synpred1_AS3())) {s = 70;}

                        else if ( (LA32_1==NEW) && (synpred1_AS3())) {s = 71;}

                        else if ( (LA32_1==LPAREN) && (synpred1_AS3())) {s = 72;}

                        else if ( (LA32_1==E4X_ATTRI) && (synpred1_AS3())) {s = 73;}

                        else if ( (LA32_1==IDENT) ) {s = 74;}

                        else if ( ((LA32_1>=PUBLIC && LA32_1<=INTERNAL)) && (synpred1_AS3())) {s = 75;}

                        else if ( (LA32_1==USE) ) {s = 76;}

                        else if ( (LA32_1==XML) ) {s = 77;}

                        else if ( (LA32_1==DYNAMIC) ) {s = 78;}

                        else if ( (LA32_1==NAMESPACE) ) {s = 79;}

                        else if ( (LA32_1==IS) ) {s = 80;}

                        else if ( (LA32_1==AS) ) {s = 81;}

                        else if ( (LA32_1==GET) ) {s = 82;}

                        else if ( (LA32_1==SET) ) {s = 83;}

                        else if ( (LA32_1==IF) && (synpred1_AS3())) {s = 84;}

                        else if ( (LA32_1==FOR) && (synpred1_AS3())) {s = 85;}

                        else if ( (LA32_1==WHILE) && (synpred1_AS3())) {s = 86;}

                        else if ( (LA32_1==DO) && (synpred1_AS3())) {s = 87;}

                        else if ( (LA32_1==WITH) && (synpred1_AS3())) {s = 88;}

                        else if ( (LA32_1==SWITCH) && (synpred1_AS3())) {s = 89;}

                        else if ( (LA32_1==BREAK) && (synpred1_AS3())) {s = 90;}

                        else if ( (LA32_1==CONTINUE) && (synpred1_AS3())) {s = 91;}

                        else if ( (LA32_1==RETURN) && (synpred1_AS3())) {s = 92;}

                        else if ( (LA32_1==THROW) && (synpred1_AS3())) {s = 93;}

                        else if ( (LA32_1==TRY) && (synpred1_AS3())) {s = 94;}

                        else if ( (LA32_1==DEFAULT) && (synpred1_AS3())) {s = 95;}

                        else if ( (LA32_1==SEMI) && (synpred1_AS3())) {s = 96;}

                        else if ( (LA32_1==RCURLY) ) {s = 97;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_64 = input.LA(1);

                         
                        int index32_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_64);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_74 = input.LA(1);

                         
                        int index32_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_74);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_76 = input.LA(1);

                         
                        int index32_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_76);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_77 = input.LA(1);

                         
                        int index32_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_77);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_78 = input.LA(1);

                         
                        int index32_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_78);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA32_79 = input.LA(1);

                         
                        int index32_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_79);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA32_80 = input.LA(1);

                         
                        int index32_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_80);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA32_81 = input.LA(1);

                         
                        int index32_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_81);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA32_82 = input.LA(1);

                         
                        int index32_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_82);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA32_83 = input.LA(1);

                         
                        int index32_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_83);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA32_97 = input.LA(1);

                         
                        int index32_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_AS3()) ) {s = 96;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index32_97);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\145\uffff";
    static final String DFA33_eofS =
        "\145\uffff";
    static final String DFA33_minS =
        "\1\75\1\0\143\uffff";
    static final String DFA33_maxS =
        "\1\u00ac\1\0\143\uffff";
    static final String DFA33_acceptS =
        "\2\uffff\1\2\141\uffff\1\1";
    static final String DFA33_specialS =
        "\1\uffff\1\0\143\uffff}>";
    static final String[] DFA33_transitionS = {
            "\3\2\7\uffff\10\2\1\uffff\1\2\2\uffff\1\2\1\1\2\2\2\uffff\5"+
            "\2\1\uffff\2\2\2\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\6"+
            "\2\4\uffff\1\2\31\uffff\2\2\4\uffff\3\2\1\uffff\6\2\1\uffff"+
            "\13\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "498:3: ( ( ELSE )=> elseClause )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_1 = input.LA(1);

                         
                        int index33_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_AS3()) ) {s = 100;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index33_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\66\uffff";
    static final String DFA34_eofS =
        "\66\uffff";
    static final String DFA34_minS =
        "\1\75\65\uffff";
    static final String DFA34_maxS =
        "\1\u00ac\65\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA34_specialS =
        "\66\uffff}>";
    static final String[] DFA34_transitionS = {
            "\3\1\7\uffff\10\1\1\uffff\1\1\2\uffff\4\1\1\65\6\1\1\uffff\2"+
            "\1\2\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\6\1\4\uffff\1"+
            "\1\31\uffff\2\1\4\uffff\3\1\1\uffff\6\1\1\uffff\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()+ loopback of 513:4: ( catchBlock )+";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA35_eotS =
        "\65\uffff";
    static final String DFA35_eofS =
        "\65\uffff";
    static final String DFA35_minS =
        "\1\75\64\uffff";
    static final String DFA35_maxS =
        "\1\u00ac\64\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\1\2\62\uffff";
    static final String DFA35_specialS =
        "\65\uffff}>";
    static final String[] DFA35_transitionS = {
            "\3\2\7\uffff\10\2\1\uffff\1\2\2\uffff\4\2\1\uffff\1\1\5\2\1"+
            "\uffff\2\2\2\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\6\2\4"+
            "\uffff\1\2\31\uffff\2\2\4\uffff\3\2\1\uffff\6\2\1\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "514:3: ( finallyBlock )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA38_eotS =
        "\44\uffff";
    static final String DFA38_eofS =
        "\44\uffff";
    static final String DFA38_minS =
        "\1\75\43\uffff";
    static final String DFA38_maxS =
        "\1\u00ac\43\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\1\41\uffff\1\2";
    static final String DFA38_specialS =
        "\44\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\1\uffff\1\43\7\uffff\6\1\3\uffff\1\1\25\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\6\1\4\uffff\1\1\31\uffff\2\1\4\uffff"+
            "\3\1\1\uffff\6\1\1\uffff\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "530:12: ( expression )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA41_eotS =
        "\65\uffff";
    static final String DFA41_eofS =
        "\65\uffff";
    static final String DFA41_minS =
        "\1\75\1\136\63\uffff";
    static final String DFA41_maxS =
        "\1\u00ac\1\146\63\uffff";
    static final String DFA41_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\60\uffff";
    static final String DFA41_specialS =
        "\65\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\4\1\2\1\4\7\uffff\10\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2"+
            "\4\2\uffff\4\4\1\2\1\uffff\1\1\1\4\2\uffff\4\4\1\uffff\1\4\1"+
            "\uffff\1\4\2\uffff\6\4\4\uffff\1\4\31\uffff\2\4\4\uffff\3\4"+
            "\1\uffff\6\4\1\uffff\13\4",
            "\1\2\7\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 563:4: ( statement )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA42_eotS =
        "\u0135\uffff";
    static final String DFA42_eofS =
        "\u0135\uffff";
    static final String DFA42_minS =
        "\1\75\1\111\11\77\32\uffff\12\0\50\uffff\1\0\21\uffff\1\0\47\uffff"+
        "\1\0\34\uffff\1\0\21\uffff\1\0\34\uffff\1\0\34\uffff\1\0\34\uffff"+
        "\1\0\35\uffff";
    static final String DFA42_maxS =
        "\1\u00ac\1\u0092\11\u00c0\32\uffff\12\0\50\uffff\1\0\21\uffff\1"+
        "\0\47\uffff\1\0\34\uffff\1\0\21\uffff\1\0\34\uffff\1\0\34\uffff"+
        "\1\0\34\uffff\1\0\35\uffff";
    static final String DFA42_acceptS =
        "\13\uffff\1\2\u0128\uffff\1\1";
    static final String DFA42_specialS =
        "\45\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\50\uffff\1\12"+
        "\21\uffff\1\13\47\uffff\1\14\34\uffff\1\15\21\uffff\1\16\34\uffff"+
        "\1\17\34\uffff\1\20\34\uffff\1\21\35\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\13\1\uffff\1\13\7\uffff\2\13\1\11\1\12\1\6\1\3\2\1\1\uffff"+
            "\1\13\25\uffff\1\4\1\uffff\1\13\1\uffff\1\13\2\uffff\1\2\5\13"+
            "\4\uffff\1\5\31\uffff\1\7\1\10\4\uffff\3\13\1\uffff\6\13\1\uffff"+
            "\13\13",
            "\1\54\1\55\1\51\1\46\31\uffff\1\47\6\uffff\1\45\11\uffff\1"+
            "\50\31\uffff\1\52\1\53",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\56\4\uffff\3\13"+
            "\1\uffff\2\13\5\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35\uffff"+
            "\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\127\4\uffff\3\13"+
            "\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35\uffff"+
            "\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\151\4\uffff\3\13"+
            "\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35\uffff"+
            "\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u0091\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u00ae\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u00c0\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u00dd\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u00fa\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "\1\13\4\uffff\1\13\12\uffff\2\13\21\uffff\1\u0117\4\uffff\3"+
            "\13\1\uffff\1\13\6\uffff\1\13\5\uffff\45\13\4\uffff\1\13\35"+
            "\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "582:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_37 = input.LA(1);

                         
                        int index42_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_37);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_38 = input.LA(1);

                         
                        int index42_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_39 = input.LA(1);

                         
                        int index42_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_39);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_40 = input.LA(1);

                         
                        int index42_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_41 = input.LA(1);

                         
                        int index42_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_41);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_42 = input.LA(1);

                         
                        int index42_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_43 = input.LA(1);

                         
                        int index42_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_43);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_44 = input.LA(1);

                         
                        int index42_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_45 = input.LA(1);

                         
                        int index42_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_45);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_46 = input.LA(1);

                         
                        int index42_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_87 = input.LA(1);

                         
                        int index42_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_87);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_105 = input.LA(1);

                         
                        int index42_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_105);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA42_145 = input.LA(1);

                         
                        int index42_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_145);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA42_174 = input.LA(1);

                         
                        int index42_174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_174);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA42_192 = input.LA(1);

                         
                        int index42_192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_192);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA42_221 = input.LA(1);

                         
                        int index42_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_221);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA42_250 = input.LA(1);

                         
                        int index42_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_250);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA42_279 = input.LA(1);

                         
                        int index42_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_AS3()) ) {s = 308;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index42_279);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\13\uffff";
    static final String DFA43_eofS =
        "\13\uffff";
    static final String DFA43_minS =
        "\1\111\12\uffff";
    static final String DFA43_maxS =
        "\1\u0092\12\uffff";
    static final String DFA43_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA43_specialS =
        "\13\uffff}>";
    static final String[] DFA43_transitionS = {
            "\4\2\2\1\27\uffff\1\2\6\uffff\1\2\11\uffff\1\2\31\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "600:1: forInClauseDecl : ( declaration | ident );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA44_eotS =
        "\45\uffff";
    static final String DFA44_eofS =
        "\45\uffff";
    static final String DFA44_minS =
        "\1\75\44\uffff";
    static final String DFA44_maxS =
        "\1\u00ac\44\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\1\1\2\41\uffff\1\3";
    static final String DFA44_specialS =
        "\45\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\2\1\uffff\1\44\7\uffff\6\2\2\1\1\uffff\1\2\25\uffff\1\2\1"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\6\2\4\uffff\1\2\31\uffff\2\2"+
            "\4\uffff\3\2\1\uffff\6\2\1\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "623:4: ( declaration | expressionList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA45_eotS =
        "\44\uffff";
    static final String DFA45_eofS =
        "\44\uffff";
    static final String DFA45_minS =
        "\1\75\43\uffff";
    static final String DFA45_maxS =
        "\1\u00ac\43\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\1\41\uffff\1\2";
    static final String DFA45_specialS =
        "\44\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\uffff\1\43\7\uffff\6\1\3\uffff\1\1\25\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\6\1\4\uffff\1\1\31\uffff\2\1\4\uffff"+
            "\3\1\1\uffff\6\1\1\uffff\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "632:4: ( expressionList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA46_eotS =
        "\44\uffff";
    static final String DFA46_eofS =
        "\44\uffff";
    static final String DFA46_minS =
        "\1\75\43\uffff";
    static final String DFA46_maxS =
        "\1\u00ac\43\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\41\uffff\1\2";
    static final String DFA46_specialS =
        "\44\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\11\uffff\6\1\3\uffff\1\1\1\43\24\uffff\1\1\1\uffff\1\1"+
            "\1\uffff\1\1\2\uffff\6\1\4\uffff\1\1\31\uffff\2\1\4\uffff\3"+
            "\1\1\uffff\6\1\1\uffff\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "641:4: ( expressionList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA49_eotS =
        "\16\uffff";
    static final String DFA49_eofS =
        "\16\uffff";
    static final String DFA49_minS =
        "\1\110\15\uffff";
    static final String DFA49_maxS =
        "\1\u0092\15\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\2\uffff";
    static final String DFA49_specialS =
        "\16\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\4\1\31\uffff\1\1\3\uffff\2\13\1\uffff\5\1\5\uffff\1\1"+
            "\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "668:1: typeIdent : (i= identifier ( DOT LT t= typeIdent GT )? -> ^( TYPE_SPEC $i ( $t)? ) | ( VOID | STAR | FUNCTION ) -> ^( TYPE_SPEC ( VOID )? ( STAR )? ( FUNCTION )? ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA50_eotS =
        "\26\uffff";
    static final String DFA50_eofS =
        "\26\uffff";
    static final String DFA50_minS =
        "\1\75\4\uffff\1\111\20\uffff";
    static final String DFA50_maxS =
        "\1\151\4\uffff\1\u0092\20\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\2\12\uffff\1\1\11\uffff";
    static final String DFA50_specialS =
        "\26\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\1\1\uffff\1\1\3\uffff\3\1\11\uffff\1\1\1\uffff\1\1\20\uffff"+
            "\1\1\4\uffff\1\5\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "\4\14\31\uffff\1\14\1\uffff\1\1\4\uffff\5\14\5\uffff\1\14\31"+
            "\uffff\2\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "()* loopback of 678:3: ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA51_eotS =
        "\13\uffff";
    static final String DFA51_eofS =
        "\13\uffff";
    static final String DFA51_minS =
        "\1\111\12\uffff";
    static final String DFA51_maxS =
        "\1\u0092\12\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA51_specialS =
        "\13\uffff}>";
    static final String[] DFA51_transitionS = {
            "\4\2\31\uffff\1\2\4\uffff\1\1\1\uffff\1\2\11\uffff\1\2\31\uffff"+
            "\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "684:1: propertyIdentifier : ( STAR | ident );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA52_eotS =
        "\14\uffff";
    static final String DFA52_eofS =
        "\14\uffff";
    static final String DFA52_minS =
        "\1\111\13\uffff";
    static final String DFA52_maxS =
        "\1\u0092\13\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA52_specialS =
        "\14\uffff}>";
    static final String[] DFA52_transitionS = {
            "\4\1\31\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\13\5\uffff\1\1\31"+
            "\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "690:4: ( propertyIdentifier | reservedNamespace )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA54_eotS =
        "\u0160\uffff";
    static final String DFA54_eofS =
        "\u0160\uffff";
    static final String DFA54_minS =
        "\1\111\12\76\u0155\uffff";
    static final String DFA54_maxS =
        "\1\u0092\12\u00c0\u0155\uffff";
    static final String DFA54_acceptS =
        "\13\uffff\1\2\1\1\u0153\uffff";
    static final String DFA54_specialS =
        "\u0160\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\11\1\12\1\6\1\3\31\uffff\1\4\4\uffff\1\1\1\uffff\1\2\4\13"+
            "\5\uffff\1\5\31\uffff\1\7\1\10",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "\2\14\4\uffff\1\14\12\uffff\3\14\14\uffff\1\14\3\uffff\1\14"+
            "\4\uffff\3\14\1\uffff\1\14\1\13\5\uffff\2\14\4\uffff\45\14\4"+
            "\uffff\1\14\35\uffff\2\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "693:1: simpleQualifiedIdentifier : ( propertyIdentifier | qualifier DBL_COLON ( propertyIdentifier | brackets ) );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA53_eotS =
        "\14\uffff";
    static final String DFA53_eofS =
        "\14\uffff";
    static final String DFA53_minS =
        "\1\111\13\uffff";
    static final String DFA53_maxS =
        "\1\u0092\13\uffff";
    static final String DFA53_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA53_specialS =
        "\14\uffff}>";
    static final String[] DFA53_transitionS = {
            "\4\1\31\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\13\4\uffff"+
            "\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "696:3: ( propertyIdentifier | brackets )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA55_eotS =
        "\14\uffff";
    static final String DFA55_eofS =
        "\14\uffff";
    static final String DFA55_minS =
        "\1\111\13\uffff";
    static final String DFA55_maxS =
        "\1\u0092\13\uffff";
    static final String DFA55_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA55_specialS =
        "\14\uffff}>";
    static final String[] DFA55_transitionS = {
            "\4\1\31\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\13\4\uffff"+
            "\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "703:3: ( propertyIdentifier | brackets )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA56_eotS =
        "\15\uffff";
    static final String DFA56_eofS =
        "\15\uffff";
    static final String DFA56_minS =
        "\1\111\14\uffff";
    static final String DFA56_maxS =
        "\1\u0092\14\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA56_specialS =
        "\15\uffff}>";
    static final String[] DFA56_transitionS = {
            "\4\1\3\uffff\1\14\25\uffff\1\1\4\uffff\1\1\1\uffff\5\1\5\uffff"+
            "\1\1\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "708:1: nonAttributeQualifiedIdentifier : ( simpleQualifiedIdentifier | expressionQualifiedIdentifier );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA57_eotS =
        "\16\uffff";
    static final String DFA57_eofS =
        "\16\uffff";
    static final String DFA57_minS =
        "\1\111\15\uffff";
    static final String DFA57_maxS =
        "\1\u00a2\15\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\1\2\13\uffff";
    static final String DFA57_specialS =
        "\16\uffff}>";
    static final String[] DFA57_transitionS = {
            "\4\2\3\uffff\1\2\25\uffff\1\2\4\uffff\1\2\1\uffff\5\2\5\uffff"+
            "\1\2\31\uffff\2\2\17\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "713:1: qualifiedIdentifier : ( e4xAttributeIdentifier | nonAttributeQualifiedIdentifier );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA58_eotS =
        "\62\uffff";
    static final String DFA58_eofS =
        "\1\uffff\1\3\60\uffff";
    static final String DFA58_minS =
        "\1\111\1\75\60\uffff";
    static final String DFA58_maxS =
        "\1\u0092\1\u00c0\60\uffff";
    static final String DFA58_acceptS =
        "\2\uffff\1\1\1\2\56\uffff";
    static final String DFA58_specialS =
        "\62\uffff}>";
    static final String[] DFA58_transitionS = {
            "\4\3\31\uffff\1\3\6\uffff\1\1\4\2\5\uffff\1\3\31\uffff\2\3",
            "\3\3\3\uffff\3\3\11\uffff\3\3\14\uffff\1\3\3\uffff\1\3\4\uffff"+
            "\3\3\1\uffff\1\3\1\2\5\uffff\2\3\4\uffff\45\3\4\uffff\1\3\35"+
            "\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "719:4: ( namespaceName DBL_COLON )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA60_eotS =
        "\15\uffff";
    static final String DFA60_eofS =
        "\15\uffff";
    static final String DFA60_minS =
        "\1\77\1\111\13\uffff";
    static final String DFA60_maxS =
        "\1\147\1\u0092\13\uffff";
    static final String DFA60_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String DFA60_specialS =
        "\15\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\2\47\uffff\1\1",
            "\4\4\31\uffff\1\4\4\uffff\1\2\1\uffff\1\4\11\uffff\1\4\31\uffff"+
            "\2\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "()* loopback of 735:3: ( options {greedy=true; } : DOT ident )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA62_eotS =
        "\22\uffff";
    static final String DFA62_eofS =
        "\22\uffff";
    static final String DFA62_minS =
        "\1\101\21\uffff";
    static final String DFA62_maxS =
        "\1\u00be\21\uffff";
    static final String DFA62_acceptS =
        "\1\uffff\1\3\16\uffff\1\1\1\2";
    static final String DFA62_specialS =
        "\22\uffff}>";
    static final String[] DFA62_transitionS = {
            "\2\1\5\uffff\1\1\2\uffff\4\1\36\uffff\5\1\1\20\1\uffff\4\1\103"+
            "\uffff\1\21\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "()* loopback of 744:4: ( annotation | includeDirective )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA65_eotS =
        "\22\uffff";
    static final String DFA65_eofS =
        "\22\uffff";
    static final String DFA65_minS =
        "\1\107\21\uffff";
    static final String DFA65_maxS =
        "\1\u00ab\21\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\1\17\uffff\1\2";
    static final String DFA65_specialS =
        "\22\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\1\uffff\4\1\4\uffff\1\21\24\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\1\11\uffff\1\1\31\uffff\2\1\6\uffff\1\1\13\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "761:3: ( annotationParam ( COMMA annotationParam )* )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA66_eotS =
        "\54\uffff";
    static final String DFA66_eofS =
        "\54\uffff";
    static final String DFA66_minS =
        "\1\107\11\104\42\uffff";
    static final String DFA66_maxS =
        "\1\u00ab\11\121\42\uffff";
    static final String DFA66_acceptS =
        "\12\uffff\1\2\6\uffff\1\3\1\uffff\1\1\30\uffff";
    static final String DFA66_specialS =
        "\54\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\12\1\uffff\1\10\1\11\1\5\1\2\31\uffff\1\3\1\uffff\1\12\4"+
            "\uffff\1\1\11\uffff\1\4\31\uffff\1\6\1\7\6\uffff\1\12\13\uffff"+
            "\7\12",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "\1\21\12\uffff\1\23\1\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "779:1: annotationParam : ( ident ASSIGN constant -> ^( ASSIGN ident constant ) | constant -> constant | ident -> ident );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA67_eotS =
        "\20\uffff";
    static final String DFA67_eofS =
        "\20\uffff";
    static final String DFA67_minS =
        "\1\101\17\uffff";
    static final String DFA67_maxS =
        "\1\u00be\17\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\10\uffff";
    static final String DFA67_specialS =
        "\20\uffff}>";
    static final String[] DFA67_transitionS = {
            "\2\1\5\uffff\1\1\2\uffff\4\1\36\uffff\5\7\2\uffff\4\7\104\uffff"+
            "\3\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "()* loopback of 787:4: ( modifier )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA68_eotS =
        "\12\uffff";
    static final String DFA68_eofS =
        "\12\uffff";
    static final String DFA68_minS =
        "\1\155\11\uffff";
    static final String DFA68_maxS =
        "\1\u00be\11\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA68_specialS =
        "\12\uffff}>";
    static final String[] DFA68_transitionS = {
            "\5\1\2\uffff\1\3\1\4\1\7\1\10\104\uffff\1\5\1\6\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "791:1: modifier : ( namespaceName | STATIC | FINAL | 'enumerable' | 'explicit' | OVERRIDE | DYNAMIC | 'intrinsic' );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA69_eotS =
        "\45\uffff";
    static final String DFA69_eofS =
        "\45\uffff";
    static final String DFA69_minS =
        "\1\120\1\75\43\uffff";
    static final String DFA69_maxS =
        "\1\120\1\u00ac\43\uffff";
    static final String DFA69_acceptS =
        "\2\uffff\1\2\1\1\41\uffff";
    static final String DFA69_specialS =
        "\45\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1",
            "\1\3\11\uffff\6\3\3\uffff\1\3\1\2\24\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\3\2\uffff\6\3\4\uffff\1\3\31\uffff\2\3\4\uffff\3"+
            "\3\1\uffff\6\3\1\uffff\13\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "802:1: arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA70_eotS =
        "\45\uffff";
    static final String DFA70_eofS =
        "\45\uffff";
    static final String DFA70_minS =
        "\1\75\44\uffff";
    static final String DFA70_maxS =
        "\1\u00ac\44\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\42\uffff\1\2";
    static final String DFA70_specialS =
        "\45\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\6\uffff\1\1\2\uffff\6\1\3\uffff\1\1\25\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\6\1\1\44\3\uffff\1\1\31\uffff\2\1\4"+
            "\uffff\3\1\1\uffff\6\1\1\uffff\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "814:11: ( elementList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA71_eotS =
        "\44\uffff";
    static final String DFA71_eofS =
        "\44\uffff";
    static final String DFA71_minS =
        "\1\75\43\uffff";
    static final String DFA71_maxS =
        "\1\u00ac\43\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\1\1\2\41\uffff";
    static final String DFA71_specialS =
        "\44\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\2\6\uffff\1\1\2\uffff\6\2\3\uffff\1\2\25\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\6\2\4\uffff\1\2\31\uffff\2\2\4\uffff"+
            "\3\2\1\uffff\6\2\1\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "818:1: elementList : ( COMMA | nonemptyElementList );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA73_eotS =
        "\14\uffff";
    static final String DFA73_eofS =
        "\14\uffff";
    static final String DFA73_minS =
        "\1\76\13\uffff";
    static final String DFA73_maxS =
        "\1\u00ab\13\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA73_specialS =
        "\14\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\13\12\uffff\4\1\31\uffff\1\1\6\uffff\1\1\11\uffff\1\1\31"+
            "\uffff\2\1\25\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "840:11: ( fieldList )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA74_eotS =
        "\15\uffff";
    static final String DFA74_eofS =
        "\15\uffff";
    static final String DFA74_minS =
        "\1\76\14\uffff";
    static final String DFA74_maxS =
        "\1\u00ab\14\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\1\uffff";
    static final String DFA74_specialS =
        "\15\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\13\5\uffff\1\13\4\uffff\4\1\31\uffff\1\1\6\uffff\1\1\11\uffff"+
            "\1\1\31\uffff\2\1\25\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "845:25: ( literalField )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA76_eotS =
        "\13\uffff";
    static final String DFA76_eofS =
        "\13\uffff";
    static final String DFA76_minS =
        "\1\111\12\uffff";
    static final String DFA76_maxS =
        "\1\u00ab\12\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA76_specialS =
        "\13\uffff}>";
    static final String[] DFA76_transitionS = {
            "\4\1\31\uffff\1\1\6\uffff\1\1\11\uffff\1\1\31\uffff\2\1\25\uffff"+
            "\4\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "853:1: fieldName : ( ident | number );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA78_eotS =
        "\54\uffff";
    static final String DFA78_eofS =
        "\54\uffff";
    static final String DFA78_minS =
        "\1\76\7\uffff\1\0\43\uffff";
    static final String DFA78_maxS =
        "\1\u0084\7\uffff\1\0\43\uffff";
    static final String DFA78_acceptS =
        "\1\uffff\1\2\51\uffff\1\1";
    static final String DFA78_specialS =
        "\10\uffff\1\0\43\uffff}>";
    static final String[] DFA78_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\10\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\15\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "()* loopback of 877:2: ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_8 = input.LA(1);

                         
                        int index78_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_AS3()) ) {s = 43;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index78_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA79_eotS =
        "\12\uffff";
    static final String DFA79_eofS =
        "\12\uffff";
    static final String DFA79_minS =
        "\1\76\11\uffff";
    static final String DFA79_maxS =
        "\1\u0085\11\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA79_specialS =
        "\12\uffff}>";
    static final String[] DFA79_transitionS = {
            "\2\2\4\uffff\1\2\12\uffff\1\2\1\uffff\1\2\14\uffff\1\2\3\uffff"+
            "\1\2\20\uffff\1\2\4\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "903:3: ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA80_eotS =
        "\13\uffff";
    static final String DFA80_eofS =
        "\13\uffff";
    static final String DFA80_minS =
        "\1\76\12\uffff";
    static final String DFA80_maxS =
        "\1\u00bf\12\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA80_specialS =
        "\13\uffff}>";
    static final String[] DFA80_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\16\1\1\12\70\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()* loopback of 918:3: (o= logicalOrOperator logicalAndExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA81_eotS =
        "\14\uffff";
    static final String DFA81_eofS =
        "\14\uffff";
    static final String DFA81_minS =
        "\1\76\13\uffff";
    static final String DFA81_maxS =
        "\1\u00c0\13\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\11\uffff\1\1";
    static final String DFA81_specialS =
        "\14\uffff}>";
    static final String[] DFA81_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\17\1\1\13\67\uffff\1\1\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 928:3: (o= logicalAndOperator bitwiseOrExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA82_eotS =
        "\15\uffff";
    static final String DFA82_eofS =
        "\15\uffff";
    static final String DFA82_minS =
        "\1\76\14\uffff";
    static final String DFA82_maxS =
        "\1\u00c0\14\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA82_specialS =
        "\15\uffff}>";
    static final String[] DFA82_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\20\1\1\14\66\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()* loopback of 938:3: (o= BOR bitwiseXorExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA83_eotS =
        "\16\uffff";
    static final String DFA83_eofS =
        "\16\uffff";
    static final String DFA83_minS =
        "\1\76\15\uffff";
    static final String DFA83_maxS =
        "\1\u00c0\15\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA83_specialS =
        "\16\uffff}>";
    static final String[] DFA83_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\21\1\1\15\65\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "()* loopback of 944:3: (o= BXOR bitwiseAndExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA84_eotS =
        "\17\uffff";
    static final String DFA84_eofS =
        "\17\uffff";
    static final String DFA84_minS =
        "\1\76\16\uffff";
    static final String DFA84_maxS =
        "\1\u00c0\16\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA84_specialS =
        "\17\uffff}>";
    static final String[] DFA84_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\22\1\1\16\64\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 950:3: (o= BAND equalityExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA85_eotS =
        "\20\uffff";
    static final String DFA85_eofS =
        "\20\uffff";
    static final String DFA85_minS =
        "\1\76\17\uffff";
    static final String DFA85_maxS =
        "\1\u00c0\17\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\2\15\uffff\1\1";
    static final String DFA85_specialS =
        "\20\uffff}>";
    static final String[] DFA85_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\20\uffff\1\1\4\uffff\23\1\4\17\60\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()* loopback of 956:2: (o= equalityOperator relationalExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA86_eotS =
        "\72\uffff";
    static final String DFA86_eofS =
        "\13\uffff\1\1\56\uffff";
    static final String DFA86_minS =
        "\1\76\12\uffff\1\75\13\uffff\42\0\1\uffff";
    static final String DFA86_maxS =
        "\1\u00c0\12\uffff\1\u00ac\13\uffff\42\0\1\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\2\16\uffff\7\1\43\uffff";
    static final String DFA86_specialS =
        "\1\0\26\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\uffff}>";
    static final String[] DFA86_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\13\5\uffff\1\20\1\21\11\uffff\1\1\4\uffff\27\1\1\22\1\23"+
            "\1\24\1\25\1\26\53\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\11\uffff\1\45\1\53\1\67\1\70\1\64\1\61\3\uffff\1\55\25"+
            "\uffff\1\62\1\uffff\1\42\1\uffff\1\34\2\uffff\1\57\4\60\1\51"+
            "\4\uffff\1\63\31\uffff\1\65\1\66\4\uffff\1\32\1\31\1\43\1\uffff"+
            "\1\27\1\30\1\33\1\35\1\36\1\37\1\uffff\1\56\1\40\1\41\1\46\1"+
            "\47\1\50\4\44\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "()* loopback of 969:3: ( ( relationalOperator )=>o= relationalOperator shiftExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_0 = input.LA(1);

                         
                        int index86_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA86_0>=RCURLY && LA86_0<=SEMI)||LA86_0==COMMA||LA86_0==ASSIGN||LA86_0==RPAREN||LA86_0==COLON||LA86_0==RBRACK||(LA86_0>=STAR_ASSIGN && LA86_0<=EQUAL)||(LA86_0>=191 && LA86_0<=192)) ) {s = 1;}

                        else if ( (LA86_0==IN) ) {s = 11;}

                        else if ( (LA86_0==LT) && (synpred5_AS3())) {s = 16;}

                        else if ( (LA86_0==GT) && (synpred5_AS3())) {s = 17;}

                        else if ( (LA86_0==LE) && (synpred5_AS3())) {s = 18;}

                        else if ( (LA86_0==GE) && (synpred5_AS3())) {s = 19;}

                        else if ( (LA86_0==IS) && (synpred5_AS3())) {s = 20;}

                        else if ( (LA86_0==AS) && (synpred5_AS3())) {s = 21;}

                        else if ( (LA86_0==INSTANCEOF) && (synpred5_AS3())) {s = 22;}

                         
                        input.seek(index86_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_23 = input.LA(1);

                         
                        int index86_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA86_24 = input.LA(1);

                         
                        int index86_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA86_25 = input.LA(1);

                         
                        int index86_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA86_26 = input.LA(1);

                         
                        int index86_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_26);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA86_27 = input.LA(1);

                         
                        int index86_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA86_28 = input.LA(1);

                         
                        int index86_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_28);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA86_29 = input.LA(1);

                         
                        int index86_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_29);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA86_30 = input.LA(1);

                         
                        int index86_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_30);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA86_31 = input.LA(1);

                         
                        int index86_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_31);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA86_32 = input.LA(1);

                         
                        int index86_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_32);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA86_33 = input.LA(1);

                         
                        int index86_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_33);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA86_34 = input.LA(1);

                         
                        int index86_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_34);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA86_35 = input.LA(1);

                         
                        int index86_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_35);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA86_36 = input.LA(1);

                         
                        int index86_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_36);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA86_37 = input.LA(1);

                         
                        int index86_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_37);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA86_38 = input.LA(1);

                         
                        int index86_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_38);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA86_39 = input.LA(1);

                         
                        int index86_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_39);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA86_40 = input.LA(1);

                         
                        int index86_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_40);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA86_41 = input.LA(1);

                         
                        int index86_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_41);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA86_42 = input.LA(1);

                         
                        int index86_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_42);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA86_43 = input.LA(1);

                         
                        int index86_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_43);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA86_44 = input.LA(1);

                         
                        int index86_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_44);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA86_45 = input.LA(1);

                         
                        int index86_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_45);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA86_46 = input.LA(1);

                         
                        int index86_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_46);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA86_47 = input.LA(1);

                         
                        int index86_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_47);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA86_48 = input.LA(1);

                         
                        int index86_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_48);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA86_49 = input.LA(1);

                         
                        int index86_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_49);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA86_50 = input.LA(1);

                         
                        int index86_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_50);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA86_51 = input.LA(1);

                         
                        int index86_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_51);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA86_52 = input.LA(1);

                         
                        int index86_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_52);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA86_53 = input.LA(1);

                         
                        int index86_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_53);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA86_54 = input.LA(1);

                         
                        int index86_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_54);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA86_55 = input.LA(1);

                         
                        int index86_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_55);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA86_56 = input.LA(1);

                         
                        int index86_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred5_AS3()&&evalPredicate(((InOperator_scope)InOperator_stack.peek()).allowed,"$InOperator::allowed"))) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\30\uffff";
    static final String DFA88_eofS =
        "\30\uffff";
    static final String DFA88_minS =
        "\1\76\27\uffff";
    static final String DFA88_maxS =
        "\1\u00c0\27\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA88_specialS =
        "\30\uffff}>";
    static final String[] DFA88_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\5\uffff\2\1\11\uffff\1\1\4\uffff\34\1\3\27\50\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()* loopback of 980:3: (o= shiftOperator additiveExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA89_eotS =
        "\31\uffff";
    static final String DFA89_eofS =
        "\31\uffff";
    static final String DFA89_minS =
        "\1\76\30\uffff";
    static final String DFA89_maxS =
        "\1\u00c0\30\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA89_specialS =
        "\31\uffff}>";
    static final String[] DFA89_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\5\uffff\2\1\11\uffff\1\1\4\uffff\37\1\2\30\46\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "()* loopback of 990:3: (o= additiveOperator multiplicativeExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA90_eotS =
        "\34\uffff";
    static final String DFA90_eofS =
        "\34\uffff";
    static final String DFA90_minS =
        "\1\76\33\uffff";
    static final String DFA90_maxS =
        "\1\u00c0\33\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\2\27\uffff\1\1\2\uffff";
    static final String DFA90_specialS =
        "\34\uffff}>";
    static final String[] DFA90_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\uffff\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\5\uffff\2\1\1\uffff\1\31\7\uffff\1\1\4\uffff\41\1\2\31"+
            "\44\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "()* loopback of 1000:3: (o= multiplicativeOperator unaryExpression )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA92_eotS =
        "\43\uffff";
    static final String DFA92_eofS =
        "\43\uffff";
    static final String DFA92_minS =
        "\1\75\42\uffff";
    static final String DFA92_maxS =
        "\1\u00ac\42\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\35\uffff";
    static final String DFA92_specialS =
        "\43\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\5\11\uffff\6\5\3\uffff\1\5\25\uffff\1\5\1\uffff\1\5\1\uffff"+
            "\1\5\2\uffff\6\5\4\uffff\1\5\31\uffff\2\5\4\uffff\1\4\1\3\1"+
            "\5\1\uffff\1\1\1\2\4\5\1\uffff\13\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "1013:1: unaryExpression : (in= INC unaryExpression -> ^( PRE_INC[$in] unaryExpression ) | de= DEC unaryExpression -> ^( PRE_DEC[$de] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA93_eotS =
        "\37\uffff";
    static final String DFA93_eofS =
        "\37\uffff";
    static final String DFA93_minS =
        "\1\75\36\uffff";
    static final String DFA93_maxS =
        "\1\u00ac\36\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\30\uffff";
    static final String DFA93_specialS =
        "\37\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\6\11\uffff\6\6\3\uffff\1\6\25\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\2\uffff\6\6\4\uffff\1\6\31\uffff\2\6\6\uffff\1\6\3\uffff"+
            "\1\1\1\3\1\4\1\5\1\uffff\13\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "1021:1: unaryExpressionNotPlusMinus : ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | VOID unaryExpression -> ^( VOID unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA94_eotS =
        "\57\uffff";
    static final String DFA94_eofS =
        "\57\uffff";
    static final String DFA94_minS =
        "\1\76\35\uffff\1\111\20\uffff";
    static final String DFA94_maxS =
        "\1\u00c0\35\uffff\1\u00a2\20\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\10\35\uffff\1\2\1\3\1\7\1\4\1\6\1\5\1\1\11\uffff";
    static final String DFA94_specialS =
        "\57\uffff}>";
    static final String[] DFA94_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\1\1\1\41\1\1\14\uffff\1\1\3\uffff"+
            "\1\1\4\uffff\1\36\2\1\1\uffff\1\1\6\uffff\1\37\1\1\4\uffff\45"+
            "\1\4\uffff\1\40\35\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\45\3\uffff\1\42\25\uffff\1\45\4\uffff\1\43\1\uffff\5\45"+
            "\5\uffff\1\45\31\uffff\2\45\17\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "()* loopback of 1036:4: (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA95_eotS =
        "\36\uffff";
    static final String DFA95_eofS =
        "\36\uffff";
    static final String DFA95_minS =
        "\1\76\35\uffff";
    static final String DFA95_maxS =
        "\1\u00c0\35\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA95_specialS =
        "\36\uffff}>";
    static final String[] DFA95_transitionS = {
            "\2\3\4\uffff\1\3\12\uffff\1\3\1\uffff\1\3\14\uffff\1\3\3\uffff"+
            "\1\3\5\uffff\2\3\1\uffff\1\3\7\uffff\1\3\4\uffff\43\3\1\1\1"+
            "\2\42\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "1047:3: (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA96_eotS =
        "\15\uffff";
    static final String DFA96_eofS =
        "\15\uffff";
    static final String DFA96_minS =
        "\1\111\14\uffff";
    static final String DFA96_maxS =
        "\1\u0092\14\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\1\3";
    static final String DFA96_specialS =
        "\15\uffff}>";
    static final String[] DFA96_transitionS = {
            "\4\1\31\uffff\1\1\4\uffff\1\13\1\uffff\5\1\1\14\4\uffff\1\1"+
            "\31\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "1055:3: ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) )";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA97_eotS =
        "\32\uffff";
    static final String DFA97_eofS =
        "\32\uffff";
    static final String DFA97_minS =
        "\1\75\31\uffff";
    static final String DFA97_maxS =
        "\1\u00ac\31\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\1\2\1\3\6\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\11\uffff";
    static final String DFA97_specialS =
        "\32\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\13\11\uffff\1\3\1\14\4\20\3\uffff\1\16\25\uffff\1\20\1\uffff"+
            "\1\3\4\uffff\5\20\1\12\4\uffff\1\20\31\uffff\2\20\6\uffff\1"+
            "\3\10\uffff\1\17\1\1\1\2\7\3\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "1061:1: primaryExpression : ( UNDEFINED | SUPER | constant | arrayLiteral | objectLiteral | functionExpression | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
    static final String DFA99_eotS =
        "\106\uffff";
    static final String DFA99_eofS =
        "\106\uffff";
    static final String DFA99_minS =
        "\1\76\1\0\104\uffff";
    static final String DFA99_maxS =
        "\1\u00c0\1\0\104\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\102\uffff\1\1";
    static final String DFA99_specialS =
        "\1\uffff\1\0\104\uffff}>";
    static final String[] DFA99_transitionS = {
            "\2\2\4\uffff\1\2\12\uffff\1\2\1\1\1\2\14\uffff\1\2\3\uffff\1"+
            "\2\4\uffff\3\2\1\uffff\1\2\6\uffff\2\2\4\uffff\45\2\4\uffff"+
            "\1\2\35\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "1142:30: ( ( LPAREN )=> arguments )?";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_AS3()) ) {s = 69;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA100_eotS =
        "\123\uffff";
    static final String DFA100_eofS =
        "\123\uffff";
    static final String DFA100_minS =
        "\1\76\1\uffff\2\0\117\uffff";
    static final String DFA100_maxS =
        "\1\u00c0\1\uffff\2\0\117\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\3\55\uffff\1\1\42\uffff\1\2";
    static final String DFA100_specialS =
        "\2\uffff\1\0\1\1\117\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\1\4\uffff\1\1\12\uffff\3\1\14\uffff\1\1\3\uffff\1\1\4\uffff"+
            "\1\2\2\1\1\uffff\1\1\6\uffff\1\3\1\1\4\uffff\45\1\4\uffff\1"+
            "\1\35\uffff\2\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 1148:3: ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_AS3()) ) {s = 47;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_AS3()) ) {s = 82;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index100_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\12\uffff";
    static final String DFA104_eofS =
        "\12\uffff";
    static final String DFA104_minS =
        "\1\111\11\uffff";
    static final String DFA104_maxS =
        "\1\u0092\11\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA104_specialS =
        "\12\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\10\1\11\1\5\1\2\31\uffff\1\3\6\uffff\1\1\11\uffff\1\4\31"+
            "\uffff\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "1189:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );";
        }
        public void error(NoViableAltException nvae) {
            dbg.recognitionException(nvae);
        }
    }
 

    public static final BitSet FOLLOW_as2CompilationUnit_in_compilationUnit294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as3CompilationUnit_in_compilationUnit300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDefinition_in_as2CompilationUnit327 = new BitSet(new long[]{0x0000000000000000L,0x00F7E00000000007L,0x7800000000000000L});
    public static final BitSet FOLLOW_as2Type_in_as2CompilationUnit332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_as2Type345 = new BitSet(new long[]{0x0000000000000000L,0x00F7E00000000006L,0x7800000000000000L});
    public static final BitSet FOLLOW_modifiers_in_as2Type354 = new BitSet(new long[]{0x0000000000000000L,0x00F7E00000000006L,0x7800000000000000L});
    public static final BitSet FOLLOW_as2ClassDefinition_in_as2Type360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as2InterfaceDefinition_in_as2Type366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageDecl_in_as3CompilationUnit381 = new BitSet(new long[]{0x8000000000000000L,0x00F7E00000007907L,0x7800000000000000L});
    public static final BitSet FOLLOW_packageBlockEntry_in_as3CompilationUnit385 = new BitSet(new long[]{0x8000000000000000L,0x00F7E00000007907L,0x7800000000000000L});
    public static final BitSet FOLLOW_EOF_in_as3CompilationUnit390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDecl402 = new BitSet(new long[]{0x2000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_packageDecl405 = new BitSet(new long[]{0x2000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_packageBlock_in_packageDecl410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_packageBlock421 = new BitSet(new long[]{0xC000000000000000L,0x00F7E00000007907L,0x7800000000000000L});
    public static final BitSet FOLLOW_packageBlockEntry_in_packageBlock425 = new BitSet(new long[]{0xC000000000000000L,0x00F7E00000007907L,0x7800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_packageBlock430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDefinition_in_packageBlockEntry454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_packageBlockEntry463 = new BitSet(new long[]{0x0000000000000000L,0x00F7E00000007906L,0x7800000000000000L});
    public static final BitSet FOLLOW_modifiers_in_packageBlockEntry473 = new BitSet(new long[]{0x0000000000000000L,0x00F7E00000007906L,0x7800000000000000L});
    public static final BitSet FOLLOW_classDefinition_in_packageBlockEntry483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDefinition_in_packageBlockEntry491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDefinition_in_packageBlockEntry499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDefinition_in_packageBlockEntry507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceDefinition_in_packageBlockEntry515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_useNamespaceDirective_in_packageBlockEntry523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_packageBlockEntry534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_endOfFile551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDefinition563 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifierStar_in_importDefinition566 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_importDefinition568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_semi579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_classDefinition594 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_classDefinition596 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_classExtendsClause_in_classDefinition600 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_implementsClause_in_classDefinition604 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_typeBlock_in_classDefinition608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLASS_in_as2ClassDefinition640 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_as2ClassDefinition642 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_classExtendsClause_in_as2ClassDefinition646 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_implementsClause_in_as2ClassDefinition650 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_typeBlock_in_as2ClassDefinition654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceDefinition690 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_interfaceDefinition692 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_interfaceDefinition696 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_typeBlock_in_interfaceDefinition700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERFACE_in_as2InterfaceDefinition730 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_as2InterfaceDefinition732 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition736 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_typeBlock_in_as2InterfaceDefinition740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_classExtendsClause770 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_classExtendsClause773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause786 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_interfaceExtendsClause789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_interfaceExtendsClause793 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_interfaceExtendsClause796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_implementsClause811 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_implementsClause814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_implementsClause818 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_identifier_in_implementsClause821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_LCURLY_in_typeBlock835 = new BitSet(new long[]{0x4000000000000000L,0x00F7E00000006147L,0x7800000000000000L});
    public static final BitSet FOLLOW_typeBlockEntry_in_typeBlock839 = new BitSet(new long[]{0x4000000000000000L,0x00F7E00000006147L,0x7800000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_typeBlock844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_typeBlockEntry870 = new BitSet(new long[]{0x0000000000000000L,0x00F3E00000006100L,0x7000000000000000L});
    public static final BitSet FOLLOW_modifiers_in_typeBlockEntry879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006100L});
    public static final BitSet FOLLOW_variableDefinition_in_typeBlockEntry888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDefinition_in_typeBlockEntry895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDefinition_in_typeBlockEntry905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as2IncludeDirective_in_typeBlockEntry910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_as2IncludeDirective926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_includeDirective937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_includeDirective941 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_includeDirective945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_methodDefinition962 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_optionalAccessorRole_in_methodDefinition968 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_methodDefinition975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_parameterDeclarationList_in_methodDefinition979 = new BitSet(new long[]{0xA000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_typeExpression_in_methodDefinition983 = new BitSet(new long[]{0xA000000000000000L});
    public static final BitSet FOLLOW_block_in_methodDefinition989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_semi_in_methodDefinition991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_accessorRole_in_optionalAccessorRole1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_accessorRole0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDefinition1096 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_namespaceDefinition1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USE_in_useNamespaceDirective1125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_NAMESPACE_in_useNamespaceDirective1127 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_useNamespaceDirective1129 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_useNamespaceDirective1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrConst_in_variableDefinition1155 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDefinition1157 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_variableDefinition1162 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDefinition1164 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_semi_in_variableDefinition1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_varOrConst0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_variableDeclarator1214 = new BitSet(new long[]{0x0000000000000002L,0x0000000040008000L});
    public static final BitSet FOLLOW_typeExpression_in_variableDeclarator1217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator1220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrConst_in_declaration1231 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_variableDeclarator_in_declaration1234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_declarationTail_in_declaration1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_declarationTail1260 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_variableDeclarator_in_declarationTail1263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_ASSIGN_in_variableInitializer1276 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_variableInitializer1279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameterDeclarationList1292 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000065E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
    public static final BitSet FOLLOW_COMMA_in_parameterDeclarationList1304 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000045E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
    public static final BitSet FOLLOW_RPAREN_in_parameterDeclarationList1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_basicParameterDeclaration_in_parameterDeclaration1340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameterRestDeclaration_in_parameterDeclaration1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_basicParameterDeclaration1355 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_basicParameterDeclaration1358 = new BitSet(new long[]{0x0000000000000002L,0x0000000040008000L});
    public static final BitSet FOLLOW_typeExpression_in_basicParameterDeclaration1360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_parameterDefault_in_basicParameterDeclaration1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_parameterDefault1407 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_parameterDefault1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REST_in_parameterRestDeclaration1421 = new BitSet(new long[]{0x0000000000000002L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_parameterRestDeclaration1423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_block1447 = new BitSet(new long[]{0xE000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_blockEntry_in_block1449 = new BitSet(new long[]{0xE000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_RCURLY_in_block1452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockEntry1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition1487 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_condition1489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_condition1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarationStatement_in_statement1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionStatement_in_statement1527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_statement1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forEachStatement_in_statement1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStatement_in_statement1544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStatement_in_statement1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doWhileStatement_in_statement1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withStatement_in_statement1569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchStatement_in_statement1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakStatement_in_statement1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueStatement_in_statement1595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnStatement_in_statement1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwStatement_in_statement1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStatement_in_statement1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultXMLNamespaceStatement_in_statement1629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_declarationStatement1659 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_declarationStatement1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_expressionStatement1682 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_expressionStatement1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifStatement1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_condition_in_ifStatement1709 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_ifStatement1711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_elseClause_in_ifStatement1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause1733 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_elseClause1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_throwStatement1747 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_throwStatement1750 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_throwStatement1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_tryStatement1764 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_tryStatement1768 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_finallyBlock_in_tryStatement1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchBlock_in_tryStatement1778 = new BitSet(new long[]{0x0000000000000002L,0x0000000001800000L});
    public static final BitSet FOLLOW_finallyBlock_in_tryStatement1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_catchBlock1814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_catchBlock1816 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_catchBlock1818 = new BitSet(new long[]{0x0000000000000000L,0x0000000040020000L});
    public static final BitSet FOLLOW_typeExpression_in_catchBlock1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_catchBlock1823 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_catchBlock1827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_finallyBlock1853 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_finallyBlock1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_returnStatement1867 = new BitSet(new long[]{0xA000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_returnStatement1870 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_returnStatement1873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continueStatement1886 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_continueStatement1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakStatement1900 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_breakStatement1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_switchStatement1914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_condition_in_switchStatement1917 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_switchBlock_in_switchStatement1921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_switchBlock1932 = new BitSet(new long[]{0x4000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_caseStatement_in_switchBlock1937 = new BitSet(new long[]{0x4000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_defaultStatement_in_switchBlock1944 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_switchBlock1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseStatement1975 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_caseStatement1978 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_caseStatement1980 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_switchStatementList_in_caseStatement1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultStatement1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_defaultStatement2002 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_switchStatementList_in_defaultStatement2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_switchStatementList2020 = new BitSet(new long[]{0xA000000000000002L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_FOR_in_forEachStatement2043 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EACH_in_forEachStatement2045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_forEachStatement2049 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000007E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_forInClause_in_forEachStatement2053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_forEachStatement2057 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_forEachStatement2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forStatement2097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_forStatement2101 = new BitSet(new long[]{0xA000000000000000L,0x0087E54000017F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_forInClause_in_forStatement2113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_forStatement2115 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_forStatement2117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_traditionalForClause_in_forStatement2138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_forStatement2140 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_forStatement2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_traditionalForClause2173 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_SEMI_in_traditionalForClause2177 = new BitSet(new long[]{0xA000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_forCond_in_traditionalForClause2185 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_SEMI_in_traditionalForClause2189 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_forIter_in_traditionalForClause2197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInClauseDecl_in_forInClause2212 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_IN_in_forInClause2214 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_forInClauseTail_in_forInClause2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_forInClauseDecl2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_forInClauseDecl2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInClauseTail2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_forInit2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forCond2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forIter2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileStatement2386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_condition_in_whileStatement2389 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_whileStatement2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_doWhileStatement2402 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_doWhileStatement2405 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHILE_in_doWhileStatement2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_condition_in_doWhileStatement2410 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_doWhileStatement2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_withStatement2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_condition_in_withStatement2426 = new BitSet(new long[]{0xA000000000000000L,0x0087E5799E697F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_statement_in_withStatement2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultXMLNamespaceStatement2439 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_XML_in_defaultXMLNamespaceStatement2441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultXMLNamespaceStatement2443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_ASSIGN_in_defaultXMLNamespaceStatement2445 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_defaultXMLNamespaceStatement2447 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_semi_in_defaultXMLNamespaceStatement2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_typeExpression2472 = new BitSet(new long[]{0x0000000000000000L,0x0083EC4000001F00L,0x0000000000060000L});
    public static final BitSet FOLLOW_typeIdent_in_typeExpression2479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_typeIdent2499 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_DOT_in_typeIdent2502 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_LT_in_typeIdent2504 = new BitSet(new long[]{0x0000000000000000L,0x0083EC4000001F00L,0x0000000000060000L});
    public static final BitSet FOLLOW_typeIdent_in_typeIdent2508 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_GT_in_typeIdent2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_typeIdent2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_typeIdent2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_typeIdent2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdent_in_identifier2573 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_propOrIdent_in_identifier2601 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyIdentifier2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_propertyIdentifier2639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyIdentifier_in_qualifier2652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reservedNamespace_in_qualifier2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyIdentifier_in_simpleQualifiedIdentifier2669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifier_in_simpleQualifiedIdentifier2674 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DBL_COLON_in_simpleQualifiedIdentifier2676 = new BitSet(new long[]{0x0000000000000000L,0x0087E84000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_propertyIdentifier_in_simpleQualifiedIdentifier2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_simpleQualifiedIdentifier2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_encapsulatedExpression_in_expressionQualifiedIdentifier2705 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DBL_COLON_in_expressionQualifiedIdentifier2707 = new BitSet(new long[]{0x0000000000000000L,0x0087E84000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_propertyIdentifier_in_expressionQualifiedIdentifier2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_expressionQualifiedIdentifier2720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleQualifiedIdentifier_in_nonAttributeQualifiedIdentifier2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifiedIdentifier_in_nonAttributeQualifiedIdentifier2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_e4xAttributeIdentifier_in_qualifiedIdentifier2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonAttributeQualifiedIdentifier_in_qualifiedIdentifier2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceName_in_qualifiedIdent2768 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DBL_COLON_in_qualifiedIdent2770 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_qualifiedIdent2775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_namespaceName2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reservedNamespace_in_namespaceName2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reservedNamespace0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_identifierStar2828 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_DOT_in_identifierStar2845 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_identifierStar2847 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_DOT_in_identifierStar2859 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_STAR_in_identifierStar2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations2893 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_includeDirective_in_annotations2899 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LBRACK_in_annotation2926 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_ident_in_annotation2930 = new BitSet(new long[]{0x0000000000000000L,0x0008000000010000L});
    public static final BitSet FOLLOW_annotationParamList_in_annotation2934 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_annotation2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_annotationParamList2965 = new BitSet(new long[]{0x0000000000000000L,0x0083E14000021E80L,0x00000FE002060000L});
    public static final BitSet FOLLOW_annotationParam_in_annotationParamList2971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
    public static final BitSet FOLLOW_COMMA_in_annotationParamList2977 = new BitSet(new long[]{0x0000000000000000L,0x0083E14000001E80L,0x00000FE002060000L});
    public static final BitSet FOLLOW_annotationParam_in_annotationParamList2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020010L});
    public static final BitSet FOLLOW_RPAREN_in_annotationParamList2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_annotationParam3017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_ASSIGN_in_annotationParam3019 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000080L,0x00000FE002000000L});
    public static final BitSet FOLLOW_constant_in_annotationParam3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_annotationParam3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_annotationParam3045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers3060 = new BitSet(new long[]{0x0000000000000002L,0x00F3E00000000000L,0x7000000000000000L});
    public static final BitSet FOLLOW_namespaceName_in_modifier3083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_modifier3088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINAL_in_modifier3093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_modifier3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_modifier3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OVERRIDE_in_modifier3108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_modifier3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_modifier3118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments3139 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expressionList_in_arguments3141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments3158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_arrayLiteral3177 = new BitSet(new long[]{0x2000000000000000L,0x008FE54000011F90L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_elementList_in_arrayLiteral3179 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_arrayLiteral3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_elementList3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonemptyElementList_in_elementList3212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_nonemptyElementList3235 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_assignmentExpression_in_element3261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_objectLiteral3273 = new BitSet(new long[]{0x4000000000000000L,0x0083E04000001E00L,0x00000F0000060000L});
    public static final BitSet FOLLOW_fieldList_in_objectLiteral3275 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_objectLiteral3278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literalField_in_fieldList3301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_fieldList3304 = new BitSet(new long[]{0x0000000000000002L,0x0083E04000001E10L,0x00000F0000060000L});
    public static final BitSet FOLLOW_literalField_in_fieldList3307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_fieldName_in_literalField3324 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_literalField3326 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_element_in_literalField3328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_fieldName3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_fieldName3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expression3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_expressionList3392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_COMMA_in_expressionList3395 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_expressionList3397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_conditionalExpression_in_assignmentExpression3418 = new BitSet(new long[]{0x0000000000000002L,0xFF00000000008000L,0x000000000000001FL});
    public static final BitSet FOLLOW_assignmentOperator_in_assignmentExpression3430 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_assignmentExpression3435 = new BitSet(new long[]{0x0000000000000002L,0xFF00000000008000L,0x000000000000001FL});
    public static final BitSet FOLLOW_set_in_assignmentOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOrExpression_in_conditionalExpression3533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_QUESTION_in_conditionalExpression3547 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_conditionalSubExpression_in_conditionalExpression3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression3581 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalSubExpression3583 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression3600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_logicalOrOperator_in_logicalOrExpression3607 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression3610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_set_in_logicalOrOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression3641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L,0x0000000000000001L});
    public static final BitSet FOLLOW_logicalAndOperator_in_logicalAndExpression3648 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression3651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_logicalAndOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_BOR_in_bitwiseOrExpression3689 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BXOR_in_bitwiseXorExpression3715 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression3734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_BAND_in_bitwiseAndExpression3741 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression3744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression3760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_equalityOperator_in_equalityExpression3767 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression3772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_set_in_equalityOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression3816 = new BitSet(new long[]{0x0000000000000002L,0x0000030400000000L,0x00000000000F8000L});
    public static final BitSet FOLLOW_relationalOperator_in_relationalExpression3828 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression3831 = new BitSet(new long[]{0x0000000000000002L,0x0000030400000000L,0x00000000000F8000L});
    public static final BitSet FOLLOW_IN_in_relationalOperator3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalOperator3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relationalOperator3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_relationalOperator3861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_relationalOperator3865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_relationalOperator3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_relationalOperator3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_relationalOperator3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression3889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_shiftOperator_in_shiftExpression3896 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression3899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000700000L});
    public static final BitSet FOLLOW_set_in_shiftOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_additiveOperator_in_additiveExpression3941 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_set_in_additiveOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression3975 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression3983 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression3989 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_STAR_in_multiplicativeOperator4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplicativeOperator4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_multiplicativeOperator4027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INC_in_unaryExpression4041 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_unaryExpression4059 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression4061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression4075 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression4090 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression4092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_unaryExpressionNotPlusMinus4116 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_unaryExpressionNotPlusMinus4131 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus4146 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LNOT_in_unaryExpressionNotPlusMinus4161 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNOT_in_unaryExpressionNotPlusMinus4176 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixExpression4212 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_propOrIdent_in_postfixExpression4226 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_LBRACK_in_postfixExpression4240 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_postfixExpression4242 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_postfixExpression4246 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_E4X_DESC_in_postfixExpression4267 = new BitSet(new long[]{0x0000000000000000L,0x0083E84000011E00L,0x0000000400060000L});
    public static final BitSet FOLLOW_qualifiedIdentifier_in_postfixExpression4269 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_DOT_in_postfixExpression4287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_postfixExpression4289 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_postfixExpression4291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_postfixExpression4293 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_DOT_in_postfixExpression4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_e4xAttributeIdentifier_in_postfixExpression4315 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_DOT_in_postfixExpression4336 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_STAR_in_postfixExpression4338 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_arguments_in_postfixExpression4358 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000218000000L});
    public static final BitSet FOLLOW_INC_in_postfixExpression4394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_in_postfixExpression4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_E4X_ATTRI_in_e4xAttributeIdentifier4441 = new BitSet(new long[]{0x0000000000000000L,0x0087E84000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_qualifiedIdent_in_e4xAttributeIdentifier4447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_e4xAttributeIdentifier4461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_e4xAttributeIdentifier4473 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expression_in_e4xAttributeIdentifier4475 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_e4xAttributeIdentifier4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEFINED_in_primaryExpression4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primaryExpression4505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_primaryExpression4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayLiteral_in_primaryExpression4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectLiteral_in_primaryExpression4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionExpression_in_primaryExpression4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newExpression_in_primaryExpression4530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_encapsulatedExpression_in_primaryExpression4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_e4xAttributeIdentifier_in_primaryExpression4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedIdent_in_primaryExpression4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_propOrIdent4584 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_qualifiedIdent_in_propOrIdent4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlLiteral_in_constant4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexpLiteral_in_constant4622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_constant4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_constant4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_constant4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_constant4642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_constant4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_number0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_xmlLiteral4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_regexpLiteral4733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newExpression4756 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_fullNewSubexpression_in_newExpression4759 = new BitSet(new long[]{0x0000000000000002L,0x0004008000010000L,0x0000000200000000L});
    public static final BitSet FOLLOW_arguments_in_newExpression4767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_fullNewSubexpression4782 = new BitSet(new long[]{0x0000000000000002L,0x0087E8C000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_DOT_in_fullNewSubexpression4803 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_qualifiedIdent_in_fullNewSubexpression4805 = new BitSet(new long[]{0x0000000000000002L,0x0087E8C000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_brackets_in_fullNewSubexpression4828 = new BitSet(new long[]{0x0000000000000002L,0x0087E8C000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_DOT_in_propertyOperator4855 = new BitSet(new long[]{0x0000000000000000L,0x0083E04000001E00L,0x0000000000060000L});
    public static final BitSet FOLLOW_qualifiedIdent_in_propertyOperator4858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_propertyOperator4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_brackets4879 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_expressionList_in_brackets4881 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_brackets4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_encapsulatedExpression4904 = new BitSet(new long[]{0x2000000000000000L,0x0087E54000011F80L,0x00001FFDFB860000L});
    public static final BitSet FOLLOW_assignmentExpression_in_encapsulatedExpression4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPAREN_in_encapsulatedExpression4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameterDeclarationList_in_functionSignature4929 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_typeExpression_in_functionSignature4931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionSignature_in_functionCommon4944 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_block_in_functionCommon4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_functionExpression4957 = new BitSet(new long[]{0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_IDENT_in_functionExpression4959 = new BitSet(new long[]{0x0000000000000000L,0x0000200000010000L});
    public static final BitSet FOLLOW_functionCommon_in_functionExpression4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_ident4987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USE_in_ident4994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XML_in_ident5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMIC_in_ident5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_ident5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_ident5042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_ident5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GET_in_ident5066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_ident5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_synpred1_AS31513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred2_AS31717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInClauseDecl_in_synpred3_AS32108 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_IN_in_synpred3_AS32110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred4_AS33424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOperator_in_synpred5_AS33822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred6_AS34763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred7_AS34797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_synpred8_AS34824 = new BitSet(new long[]{0x0000000000000002L});

}